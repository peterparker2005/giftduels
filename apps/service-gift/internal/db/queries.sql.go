// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const completeGiftWithdrawal = `-- name: CompleteGiftWithdrawal :one
UPDATE gifts 
SET status = 'withdrawn', withdrawn_at = NOW(), updated_at = NOW()
WHERE id = $1 AND status = 'withdraw_pending'
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
`

func (q *Queries) CompleteGiftWithdrawal(ctx context.Context, id string) (Gift, error) {
	row := q.db.QueryRowContext(ctx, completeGiftWithdrawal, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.ImageUrl,
		&i.TonPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const createGift = `-- name: CreateGift :one
INSERT INTO gifts (
    id,
    telegram_gift_id,
    title,
    slug,
    image_url,
    owner_telegram_id,
    upgrade_message_id,
    ton_price,
    collectible_id,
    status,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
`

type CreateGiftParams struct {
	ID               string
	TelegramGiftID   int64
	Title            string
	Slug             string
	ImageUrl         sql.NullString
	OwnerTelegramID  int64
	UpgradeMessageID int32
	TonPrice         float64
	CollectibleID    int32
	Status           GiftStatus
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (q *Queries) CreateGift(ctx context.Context, arg CreateGiftParams) (Gift, error) {
	row := q.db.QueryRowContext(ctx, createGift,
		arg.ID,
		arg.TelegramGiftID,
		arg.Title,
		arg.Slug,
		arg.ImageUrl,
		arg.OwnerTelegramID,
		arg.UpgradeMessageID,
		arg.TonPrice,
		arg.CollectibleID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.ImageUrl,
		&i.TonPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const createGiftEvent = `-- name: CreateGiftEvent :one
INSERT INTO gift_events (
    gift_id,
    from_user_id,
    to_user_id
) VALUES (
    $1, $2, $3
)
RETURNING id, gift_id, from_user_id, to_user_id, action, source, related_game_id, description, payload, occurred_at
`

type CreateGiftEventParams struct {
	GiftID     sql.NullString
	FromUserID sql.NullInt64
	ToUserID   sql.NullInt64
}

func (q *Queries) CreateGiftEvent(ctx context.Context, arg CreateGiftEventParams) (GiftEvent, error) {
	row := q.db.QueryRowContext(ctx, createGiftEvent, arg.GiftID, arg.FromUserID, arg.ToUserID)
	var i GiftEvent
	err := row.Scan(
		&i.ID,
		&i.GiftID,
		&i.FromUserID,
		&i.ToUserID,
		&i.Action,
		&i.Source,
		&i.RelatedGameID,
		&i.Description,
		&i.Payload,
		&i.OccurredAt,
	)
	return i, err
}

const getGiftByID = `-- name: GetGiftByID :one
SELECT id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
  FROM gifts
 WHERE id = $1
`

func (q *Queries) GetGiftByID(ctx context.Context, id string) (Gift, error) {
	row := q.db.QueryRowContext(ctx, getGiftByID, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.ImageUrl,
		&i.TonPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const getGiftEvents = `-- name: GetGiftEvents :many
SELECT id, gift_id, from_user_id, to_user_id, action, source, related_game_id, description, payload, occurred_at FROM gift_events
WHERE gift_id = $1
ORDER BY occurred_at DESC
LIMIT $2
OFFSET $3
`

type GetGiftEventsParams struct {
	GiftID sql.NullString
	Limit  int32
	Offset int32
}

func (q *Queries) GetGiftEvents(ctx context.Context, arg GetGiftEventsParams) ([]GiftEvent, error) {
	rows, err := q.db.QueryContext(ctx, getGiftEvents, arg.GiftID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GiftEvent
	for rows.Next() {
		var i GiftEvent
		if err := rows.Scan(
			&i.ID,
			&i.GiftID,
			&i.FromUserID,
			&i.ToUserID,
			&i.Action,
			&i.Source,
			&i.RelatedGameID,
			&i.Description,
			&i.Payload,
			&i.OccurredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGifts = `-- name: GetUserGifts :many
SELECT id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
  FROM gifts
 WHERE owner_telegram_id = $1
 ORDER BY created_at DESC
 LIMIT  $2
 OFFSET $3
`

type GetUserGiftsParams struct {
	OwnerTelegramID int64
	Limit           int32
	Offset          int32
}

func (q *Queries) GetUserGifts(ctx context.Context, arg GetUserGiftsParams) ([]Gift, error) {
	rows, err := q.db.QueryContext(ctx, getUserGifts, arg.OwnerTelegramID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gift
	for rows.Next() {
		var i Gift
		if err := rows.Scan(
			&i.ID,
			&i.TelegramGiftID,
			&i.CollectibleID,
			&i.OwnerTelegramID,
			&i.UpgradeMessageID,
			&i.Title,
			&i.Slug,
			&i.ImageUrl,
			&i.TonPrice,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WithdrawnAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markGiftForWithdrawal = `-- name: MarkGiftForWithdrawal :one
UPDATE gifts 
SET status = 'withdraw_pending', withdraw_requested = NOW(), updated_at = NOW()
WHERE id = $1 AND status = 'owned'
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
`

func (q *Queries) MarkGiftForWithdrawal(ctx context.Context, id string) (Gift, error) {
	row := q.db.QueryRowContext(ctx, markGiftForWithdrawal, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.ImageUrl,
		&i.TonPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const saveGiftWithPrice = `-- name: SaveGiftWithPrice :one
UPDATE gifts 
SET ton_price = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
`

type SaveGiftWithPriceParams struct {
	ID       string
	TonPrice float64
}

func (q *Queries) SaveGiftWithPrice(ctx context.Context, arg SaveGiftWithPriceParams) (Gift, error) {
	row := q.db.QueryRowContext(ctx, saveGiftWithPrice, arg.ID, arg.TonPrice)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.ImageUrl,
		&i.TonPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const stakeGiftForGame = `-- name: StakeGiftForGame :one
UPDATE gifts 
SET status = 'in_game', updated_at = NOW()
WHERE id = $1 AND status = 'owned'
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
`

func (q *Queries) StakeGiftForGame(ctx context.Context, id string) (Gift, error) {
	row := q.db.QueryRowContext(ctx, stakeGiftForGame, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.ImageUrl,
		&i.TonPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const updateGiftOwner = `-- name: UpdateGiftOwner :one
UPDATE gifts 
SET owner_telegram_id = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
`

type UpdateGiftOwnerParams struct {
	ID              string
	OwnerTelegramID int64
}

func (q *Queries) UpdateGiftOwner(ctx context.Context, arg UpdateGiftOwnerParams) (Gift, error) {
	row := q.db.QueryRowContext(ctx, updateGiftOwner, arg.ID, arg.OwnerTelegramID)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.ImageUrl,
		&i.TonPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const updateGiftStatus = `-- name: UpdateGiftStatus :one
UPDATE gifts 
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, image_url, ton_price, status, created_at, updated_at, withdrawn_at
`

type UpdateGiftStatusParams struct {
	ID     string
	Status GiftStatus
}

func (q *Queries) UpdateGiftStatus(ctx context.Context, arg UpdateGiftStatusParams) (Gift, error) {
	row := q.db.QueryRowContext(ctx, updateGiftStatus, arg.ID, arg.Status)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.ImageUrl,
		&i.TonPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}
