// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cancelGiftWithdrawal = `-- name: CancelGiftWithdrawal :one
UPDATE gifts 
SET status = 'owned', updated_at = NOW()
WHERE id = $1 AND status = 'withdraw_pending'
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

func (q *Queries) CancelGiftWithdrawal(ctx context.Context, id pgtype.UUID) (Gift, error) {
	row := q.db.QueryRow(ctx, cancelGiftWithdrawal, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const completeGiftWithdrawal = `-- name: CompleteGiftWithdrawal :one
UPDATE gifts 
SET status = 'withdrawn', withdrawn_at = NOW(), updated_at = NOW()
WHERE id = $1 AND status = 'withdraw_pending'
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

func (q *Queries) CompleteGiftWithdrawal(ctx context.Context, id pgtype.UUID) (Gift, error) {
	row := q.db.QueryRow(ctx, completeGiftWithdrawal, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const createBackdrop = `-- name: CreateBackdrop :one
INSERT INTO gift_backdrops (name, short_name, rarity_per_mille, center_color, edge_color, pattern_color, text_color)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, short_name, rarity_per_mille, center_color, edge_color, pattern_color, text_color
`

type CreateBackdropParams struct {
	Name           string
	ShortName      string
	RarityPerMille int32
	CenterColor    pgtype.Text
	EdgeColor      pgtype.Text
	PatternColor   pgtype.Text
	TextColor      pgtype.Text
}

func (q *Queries) CreateBackdrop(ctx context.Context, arg CreateBackdropParams) (GiftBackdrop, error) {
	row := q.db.QueryRow(ctx, createBackdrop,
		arg.Name,
		arg.ShortName,
		arg.RarityPerMille,
		arg.CenterColor,
		arg.EdgeColor,
		arg.PatternColor,
		arg.TextColor,
	)
	var i GiftBackdrop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
		&i.CenterColor,
		&i.EdgeColor,
		&i.PatternColor,
		&i.TextColor,
	)
	return i, err
}

const createCollection = `-- name: CreateCollection :one
INSERT INTO gift_collections (name, short_name)
VALUES ($1, $2)
RETURNING id, name, short_name
`

type CreateCollectionParams struct {
	Name      string
	ShortName string
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (GiftCollection, error) {
	row := q.db.QueryRow(ctx, createCollection, arg.Name, arg.ShortName)
	var i GiftCollection
	err := row.Scan(&i.ID, &i.Name, &i.ShortName)
	return i, err
}

const createGift = `-- name: CreateGift :one
INSERT INTO gifts (
    id,
    telegram_gift_id,
    title,
    slug,
    owner_telegram_id,
    upgrade_message_id,
    price,
    collectible_id,
    collection_id,
    model_id,
    backdrop_id,
    symbol_id,
    status,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8,
    $9, $10, $11, $12, $13, $14, $15
)
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

type CreateGiftParams struct {
	ID               pgtype.UUID
	TelegramGiftID   int64
	Title            string
	Slug             string
	OwnerTelegramID  int64
	UpgradeMessageID int32
	Price            pgtype.Numeric
	CollectibleID    int32
	CollectionID     int32
	ModelID          int32
	BackdropID       int32
	SymbolID         int32
	Status           GiftStatus
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
}

func (q *Queries) CreateGift(ctx context.Context, arg CreateGiftParams) (Gift, error) {
	row := q.db.QueryRow(ctx, createGift,
		arg.ID,
		arg.TelegramGiftID,
		arg.Title,
		arg.Slug,
		arg.OwnerTelegramID,
		arg.UpgradeMessageID,
		arg.Price,
		arg.CollectibleID,
		arg.CollectionID,
		arg.ModelID,
		arg.BackdropID,
		arg.SymbolID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const createGiftEvent = `-- name: CreateGiftEvent :one
INSERT INTO gift_events (
    gift_id,
    event_type,
    telegram_user_id,
    related_game_id
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, gift_id, event_type, telegram_user_id, related_game_id, occurred_at
`

type CreateGiftEventParams struct {
	GiftID         pgtype.UUID
	EventType      GiftEventType
	TelegramUserID pgtype.Int8
	RelatedGameID  pgtype.UUID
}

func (q *Queries) CreateGiftEvent(ctx context.Context, arg CreateGiftEventParams) (GiftEvent, error) {
	row := q.db.QueryRow(ctx, createGiftEvent,
		arg.GiftID,
		arg.EventType,
		arg.TelegramUserID,
		arg.RelatedGameID,
	)
	var i GiftEvent
	err := row.Scan(
		&i.ID,
		&i.GiftID,
		&i.EventType,
		&i.TelegramUserID,
		&i.RelatedGameID,
		&i.OccurredAt,
	)
	return i, err
}

const createModel = `-- name: CreateModel :one
INSERT INTO gift_models (collection_id, name, short_name, rarity_per_mille)
VALUES ($1, $2, $3, $4)
RETURNING id, collection_id, name, short_name, rarity_per_mille
`

type CreateModelParams struct {
	CollectionID   int32
	Name           string
	ShortName      string
	RarityPerMille int32
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (GiftModel, error) {
	row := q.db.QueryRow(ctx, createModel,
		arg.CollectionID,
		arg.Name,
		arg.ShortName,
		arg.RarityPerMille,
	)
	var i GiftModel
	err := row.Scan(
		&i.ID,
		&i.CollectionID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
	)
	return i, err
}

const createSymbol = `-- name: CreateSymbol :one
INSERT INTO gift_symbols (name, short_name, rarity_per_mille)
VALUES ($1, $2, $3)
RETURNING id, name, short_name, rarity_per_mille
`

type CreateSymbolParams struct {
	Name           string
	ShortName      string
	RarityPerMille int32
}

func (q *Queries) CreateSymbol(ctx context.Context, arg CreateSymbolParams) (GiftSymbol, error) {
	row := q.db.QueryRow(ctx, createSymbol, arg.Name, arg.ShortName, arg.RarityPerMille)
	var i GiftSymbol
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
	)
	return i, err
}

const findBackdropByName = `-- name: FindBackdropByName :one
SELECT id, name, short_name, rarity_per_mille, center_color, edge_color, pattern_color, text_color FROM gift_backdrops
WHERE name = $1
`

func (q *Queries) FindBackdropByName(ctx context.Context, name string) (GiftBackdrop, error) {
	row := q.db.QueryRow(ctx, findBackdropByName, name)
	var i GiftBackdrop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
		&i.CenterColor,
		&i.EdgeColor,
		&i.PatternColor,
		&i.TextColor,
	)
	return i, err
}

const findCollectionByName = `-- name: FindCollectionByName :one
SELECT id, name, short_name FROM gift_collections
WHERE name = $1
`

func (q *Queries) FindCollectionByName(ctx context.Context, name string) (GiftCollection, error) {
	row := q.db.QueryRow(ctx, findCollectionByName, name)
	var i GiftCollection
	err := row.Scan(&i.ID, &i.Name, &i.ShortName)
	return i, err
}

const findModelByName = `-- name: FindModelByName :one
SELECT id, collection_id, name, short_name, rarity_per_mille FROM gift_models
WHERE name = $1
`

func (q *Queries) FindModelByName(ctx context.Context, name string) (GiftModel, error) {
	row := q.db.QueryRow(ctx, findModelByName, name)
	var i GiftModel
	err := row.Scan(
		&i.ID,
		&i.CollectionID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
	)
	return i, err
}

const findSymbolByName = `-- name: FindSymbolByName :one
SELECT id, name, short_name, rarity_per_mille FROM gift_symbols
WHERE name = $1
`

func (q *Queries) FindSymbolByName(ctx context.Context, name string) (GiftSymbol, error) {
	row := q.db.QueryRow(ctx, findSymbolByName, name)
	var i GiftSymbol
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
	)
	return i, err
}

const getGiftBackdrop = `-- name: GetGiftBackdrop :one
SELECT id, name, short_name, rarity_per_mille, center_color, edge_color, pattern_color, text_color FROM gift_backdrops
WHERE id = $1
`

func (q *Queries) GetGiftBackdrop(ctx context.Context, id int32) (GiftBackdrop, error) {
	row := q.db.QueryRow(ctx, getGiftBackdrop, id)
	var i GiftBackdrop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
		&i.CenterColor,
		&i.EdgeColor,
		&i.PatternColor,
		&i.TextColor,
	)
	return i, err
}

const getGiftBackdropsByIDs = `-- name: GetGiftBackdropsByIDs :many
SELECT id, name, short_name, rarity_per_mille, center_color, edge_color, pattern_color, text_color
FROM gift_backdrops
WHERE id = ANY($1::int[])
`

func (q *Queries) GetGiftBackdropsByIDs(ctx context.Context, dollar_1 []int32) ([]GiftBackdrop, error) {
	rows, err := q.db.Query(ctx, getGiftBackdropsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GiftBackdrop
	for rows.Next() {
		var i GiftBackdrop
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortName,
			&i.RarityPerMille,
			&i.CenterColor,
			&i.EdgeColor,
			&i.PatternColor,
			&i.TextColor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGiftByID = `-- name: GetGiftByID :one
SELECT id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
FROM gifts
WHERE id = $1
`

func (q *Queries) GetGiftByID(ctx context.Context, id pgtype.UUID) (Gift, error) {
	row := q.db.QueryRow(ctx, getGiftByID, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const getGiftCollection = `-- name: GetGiftCollection :one
SELECT id, name, short_name FROM gift_collections
WHERE id = $1
`

func (q *Queries) GetGiftCollection(ctx context.Context, id int32) (GiftCollection, error) {
	row := q.db.QueryRow(ctx, getGiftCollection, id)
	var i GiftCollection
	err := row.Scan(&i.ID, &i.Name, &i.ShortName)
	return i, err
}

const getGiftCollectionsByIDs = `-- name: GetGiftCollectionsByIDs :many
SELECT id, name, short_name
FROM gift_collections
WHERE id = ANY($1::int[])
`

func (q *Queries) GetGiftCollectionsByIDs(ctx context.Context, dollar_1 []int32) ([]GiftCollection, error) {
	rows, err := q.db.Query(ctx, getGiftCollectionsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GiftCollection
	for rows.Next() {
		var i GiftCollection
		if err := rows.Scan(&i.ID, &i.Name, &i.ShortName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGiftEvents = `-- name: GetGiftEvents :many
SELECT id, gift_id, event_type, telegram_user_id, related_game_id, occurred_at FROM gift_events
WHERE gift_id = $1
ORDER BY occurred_at DESC
LIMIT $2
OFFSET $3
`

type GetGiftEventsParams struct {
	GiftID pgtype.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetGiftEvents(ctx context.Context, arg GetGiftEventsParams) ([]GiftEvent, error) {
	rows, err := q.db.Query(ctx, getGiftEvents, arg.GiftID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GiftEvent
	for rows.Next() {
		var i GiftEvent
		if err := rows.Scan(
			&i.ID,
			&i.GiftID,
			&i.EventType,
			&i.TelegramUserID,
			&i.RelatedGameID,
			&i.OccurredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGiftModel = `-- name: GetGiftModel :one
SELECT id, collection_id, name, short_name, rarity_per_mille FROM gift_models
WHERE id = $1
`

func (q *Queries) GetGiftModel(ctx context.Context, id int32) (GiftModel, error) {
	row := q.db.QueryRow(ctx, getGiftModel, id)
	var i GiftModel
	err := row.Scan(
		&i.ID,
		&i.CollectionID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
	)
	return i, err
}

const getGiftModelsByIDs = `-- name: GetGiftModelsByIDs :many
SELECT id, collection_id, name, short_name, rarity_per_mille
FROM gift_models
WHERE id = ANY($1::int[])
`

func (q *Queries) GetGiftModelsByIDs(ctx context.Context, dollar_1 []int32) ([]GiftModel, error) {
	rows, err := q.db.Query(ctx, getGiftModelsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GiftModel
	for rows.Next() {
		var i GiftModel
		if err := rows.Scan(
			&i.ID,
			&i.CollectionID,
			&i.Name,
			&i.ShortName,
			&i.RarityPerMille,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGiftSymbol = `-- name: GetGiftSymbol :one
SELECT id, name, short_name, rarity_per_mille FROM gift_symbols
WHERE id = $1
`

func (q *Queries) GetGiftSymbol(ctx context.Context, id int32) (GiftSymbol, error) {
	row := q.db.QueryRow(ctx, getGiftSymbol, id)
	var i GiftSymbol
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.RarityPerMille,
	)
	return i, err
}

const getGiftSymbolsByIDs = `-- name: GetGiftSymbolsByIDs :many
SELECT id, name, short_name, rarity_per_mille
FROM gift_symbols
WHERE id = ANY($1::int[])
`

func (q *Queries) GetGiftSymbolsByIDs(ctx context.Context, dollar_1 []int32) ([]GiftSymbol, error) {
	rows, err := q.db.Query(ctx, getGiftSymbolsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GiftSymbol
	for rows.Next() {
		var i GiftSymbol
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortName,
			&i.RarityPerMille,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGiftsByIDs = `-- name: GetGiftsByIDs :many
SELECT id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
FROM gifts
WHERE id = ANY($1::uuid[])
ORDER BY updated_at DESC
`

func (q *Queries) GetGiftsByIDs(ctx context.Context, dollar_1 []pgtype.UUID) ([]Gift, error) {
	rows, err := q.db.Query(ctx, getGiftsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gift
	for rows.Next() {
		var i Gift
		if err := rows.Scan(
			&i.ID,
			&i.TelegramGiftID,
			&i.CollectibleID,
			&i.OwnerTelegramID,
			&i.UpgradeMessageID,
			&i.Title,
			&i.Slug,
			&i.Price,
			&i.CollectionID,
			&i.ModelID,
			&i.BackdropID,
			&i.SymbolID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WithdrawnAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserActiveGifts = `-- name: GetUserActiveGifts :many
SELECT id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
FROM gifts
WHERE owner_telegram_id = $1
  AND status IN ('owned', 'in_game')
ORDER BY
  updated_at DESC,
  (status = 'owned') DESC,
  price DESC
LIMIT $2 OFFSET $3
`

type GetUserActiveGiftsParams struct {
	OwnerTelegramID int64
	Limit           int32
	Offset          int32
}

func (q *Queries) GetUserActiveGifts(ctx context.Context, arg GetUserActiveGiftsParams) ([]Gift, error) {
	rows, err := q.db.Query(ctx, getUserActiveGifts, arg.OwnerTelegramID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gift
	for rows.Next() {
		var i Gift
		if err := rows.Scan(
			&i.ID,
			&i.TelegramGiftID,
			&i.CollectibleID,
			&i.OwnerTelegramID,
			&i.UpgradeMessageID,
			&i.Title,
			&i.Slug,
			&i.Price,
			&i.CollectionID,
			&i.ModelID,
			&i.BackdropID,
			&i.SymbolID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WithdrawnAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserActiveGiftsCount = `-- name: GetUserActiveGiftsCount :one
SELECT COUNT(*)
FROM gifts
WHERE owner_telegram_id = $1
  AND status IN ('owned', 'in_game')
`

func (q *Queries) GetUserActiveGiftsCount(ctx context.Context, ownerTelegramID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getUserActiveGiftsCount, ownerTelegramID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserGifts = `-- name: GetUserGifts :many
SELECT id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
FROM gifts
WHERE owner_telegram_id = $1
ORDER BY updated_at DESC
LIMIT $2 OFFSET $3
`

type GetUserGiftsParams struct {
	OwnerTelegramID int64
	Limit           int32
	Offset          int32
}

func (q *Queries) GetUserGifts(ctx context.Context, arg GetUserGiftsParams) ([]Gift, error) {
	rows, err := q.db.Query(ctx, getUserGifts, arg.OwnerTelegramID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gift
	for rows.Next() {
		var i Gift
		if err := rows.Scan(
			&i.ID,
			&i.TelegramGiftID,
			&i.CollectibleID,
			&i.OwnerTelegramID,
			&i.UpgradeMessageID,
			&i.Title,
			&i.Slug,
			&i.Price,
			&i.CollectionID,
			&i.ModelID,
			&i.BackdropID,
			&i.SymbolID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WithdrawnAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGiftsCount = `-- name: GetUserGiftsCount :one
SELECT COUNT(*)
FROM gifts
WHERE owner_telegram_id = $1
`

func (q *Queries) GetUserGiftsCount(ctx context.Context, ownerTelegramID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getUserGiftsCount, ownerTelegramID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const markGiftForWithdrawal = `-- name: MarkGiftForWithdrawal :one
UPDATE gifts 
SET status = 'withdraw_pending', updated_at = NOW()
WHERE id = $1 AND status = 'owned'
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

func (q *Queries) MarkGiftForWithdrawal(ctx context.Context, id pgtype.UUID) (Gift, error) {
	row := q.db.QueryRow(ctx, markGiftForWithdrawal, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const returnGiftFromGame = `-- name: ReturnGiftFromGame :one
UPDATE gifts 
SET status = 'owned', updated_at = NOW()
WHERE id = $1 AND status = 'in_game'
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

func (q *Queries) ReturnGiftFromGame(ctx context.Context, id pgtype.UUID) (Gift, error) {
	row := q.db.QueryRow(ctx, returnGiftFromGame, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const saveGiftWithPrice = `-- name: SaveGiftWithPrice :one
UPDATE gifts 
SET price = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

type SaveGiftWithPriceParams struct {
	ID    pgtype.UUID
	Price pgtype.Numeric
}

func (q *Queries) SaveGiftWithPrice(ctx context.Context, arg SaveGiftWithPriceParams) (Gift, error) {
	row := q.db.QueryRow(ctx, saveGiftWithPrice, arg.ID, arg.Price)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const stakeGiftForGame = `-- name: StakeGiftForGame :one
UPDATE gifts 
SET status = 'in_game', updated_at = NOW()
WHERE id = $1 AND status = 'owned'
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

func (q *Queries) StakeGiftForGame(ctx context.Context, id pgtype.UUID) (Gift, error) {
	row := q.db.QueryRow(ctx, stakeGiftForGame, id)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const updateGiftOwner = `-- name: UpdateGiftOwner :one
UPDATE gifts 
SET owner_telegram_id = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

type UpdateGiftOwnerParams struct {
	ID              pgtype.UUID
	OwnerTelegramID int64
}

func (q *Queries) UpdateGiftOwner(ctx context.Context, arg UpdateGiftOwnerParams) (Gift, error) {
	row := q.db.QueryRow(ctx, updateGiftOwner, arg.ID, arg.OwnerTelegramID)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}

const updateGiftStatus = `-- name: UpdateGiftStatus :one
UPDATE gifts 
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, telegram_gift_id, collectible_id, owner_telegram_id, upgrade_message_id, title, slug, price, collection_id, model_id, backdrop_id, symbol_id, status, created_at, updated_at, withdrawn_at
`

type UpdateGiftStatusParams struct {
	ID     pgtype.UUID
	Status GiftStatus
}

func (q *Queries) UpdateGiftStatus(ctx context.Context, arg UpdateGiftStatusParams) (Gift, error) {
	row := q.db.QueryRow(ctx, updateGiftStatus, arg.ID, arg.Status)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.TelegramGiftID,
		&i.CollectibleID,
		&i.OwnerTelegramID,
		&i.UpgradeMessageID,
		&i.Title,
		&i.Slug,
		&i.Price,
		&i.CollectionID,
		&i.ModelID,
		&i.BackdropID,
		&i.SymbolID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WithdrawnAt,
	)
	return i, err
}
