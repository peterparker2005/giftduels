// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type GiftAttributeType string

const (
	GiftAttributeTypeModel    GiftAttributeType = "model"
	GiftAttributeTypeSymbol   GiftAttributeType = "symbol"
	GiftAttributeTypeBackdrop GiftAttributeType = "backdrop"
)

func (e *GiftAttributeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GiftAttributeType(s)
	case string:
		*e = GiftAttributeType(s)
	default:
		return fmt.Errorf("unsupported scan type for GiftAttributeType: %T", src)
	}
	return nil
}

type NullGiftAttributeType struct {
	GiftAttributeType GiftAttributeType
	Valid             bool // Valid is true if GiftAttributeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGiftAttributeType) Scan(value interface{}) error {
	if value == nil {
		ns.GiftAttributeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GiftAttributeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGiftAttributeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GiftAttributeType), nil
}

type GiftStatus string

const (
	GiftStatusOwned           GiftStatus = "owned"
	GiftStatusInGame          GiftStatus = "in_game"
	GiftStatusLost            GiftStatus = "lost"
	GiftStatusWithdrawPending GiftStatus = "withdraw_pending"
	GiftStatusWithdrawn       GiftStatus = "withdrawn"
)

func (e *GiftStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GiftStatus(s)
	case string:
		*e = GiftStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GiftStatus: %T", src)
	}
	return nil
}

type NullGiftStatus struct {
	GiftStatus GiftStatus
	Valid      bool // Valid is true if GiftStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGiftStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GiftStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GiftStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGiftStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GiftStatus), nil
}

type Gift struct {
	ID               pgtype.UUID
	TelegramGiftID   int64
	CollectibleID    int32
	OwnerTelegramID  int64
	UpgradeMessageID int32
	Title            string
	Slug             string
	TonPrice         float64
	Status           GiftStatus
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
	WithdrawnAt      pgtype.Timestamptz
}

type GiftAttribute struct {
	TelegramGiftID int64
	Type           GiftAttributeType
	Name           string
	Rarity         int32
}

type GiftEvent struct {
	ID            pgtype.UUID
	GiftID        pgtype.UUID
	FromUserID    pgtype.Int8
	ToUserID      pgtype.Int8
	Action        string
	Source        pgtype.Text
	RelatedGameID pgtype.Text
	Description   pgtype.Text
	Payload       []byte
	OccurredAt    pgtype.Timestamptz
}
