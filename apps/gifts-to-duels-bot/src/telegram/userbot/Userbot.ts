import { Api, TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions";
import { publisher } from "@/amqp/publisher";
import { config } from "@/config";
import { logger } from "@/logger";
import { GiftFetcher } from "@/telegram/userbot/GiftFetcher";
import {
	GiftTransferer,
	TransferParams,
} from "@/telegram/userbot/GiftTransferer";
import { PeerResolver } from "@/telegram/userbot/PeerResolver";

export class Userbot {
	private client: TelegramClient;
	public peerResolver: PeerResolver;
	public giftFetcher: GiftFetcher;
	public giftTransferer: GiftTransferer;

	constructor() {
		// 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TelegramClient
		this.client = new TelegramClient(
			new StringSession(config.telegram.sessionString),
			config.telegram.apiId,
			config.telegram.apiHash,
			{ connectionRetries: 5 },
		);

		// 2) –°–æ–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ–≤–µ—Ä—Ö client
		this.peerResolver = new PeerResolver(this.client);
		this.giftFetcher = new GiftFetcher(this.client);
		this.giftTransferer = new GiftTransferer(this.client, publisher);
	}

	/** –°–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω */
	async start(): Promise<void> {
		await this.client.connect();
		await this.client.getMe();
		logger.info("‚úÖ Userbot connected");
	}

	/** –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é */
	async close(): Promise<void> {
		await this.client.destroy();
		logger.info("üîå Userbot disconnected");
	}

	/** –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–π client, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–≥–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ Telegram-—Ö—ç–Ω–¥–ª–µ—Ä—ã */
	getClient(): TelegramClient {
		return this.client;
	}

	/**
	 * –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ GiftFetcher: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç username|userId –∏–ª–∏ undefined,
	 * —Ä–µ–∑–æ–ª–≤–∏—Ç peer –∏ –æ—Ç–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤.
	 */
	async getUserGifts(
		user: string | number | undefined,
		limit: number,
	): Promise<{
		total: number;
		gifts: Api.SavedStarGift[];
		users: Api.TypeUser[];
	}> {
		const peer: Api.TypeInputPeer =
			user == null
				? new Api.InputPeerSelf()
				: await this.peerResolver.resolve(user);
		return this.giftFetcher.getUserGifts(peer, limit);
	}

	/**
	 * –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ GiftTransferer: —Ä–µ–∑–æ–ª–≤–∏—Ç peer –ø–æ params.userId
	 * –∏ –≤—ã–∑—ã–≤–∞–µ—Ç transferGift.
	 */
	async transferGift(params: TransferParams): Promise<void> {
		const peer = await this.peerResolver.resolve(params.userId);
		return this.giftTransferer.transferGift(peer, params);
	}
}
