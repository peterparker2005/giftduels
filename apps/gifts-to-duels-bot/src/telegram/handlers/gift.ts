import { Api, TelegramClient } from 'telegram'

import { parseMessageActionStarGiftUnique } from '@/domain/gift'
import { logger } from '@/logger'
import { publishProto } from '@/amqp/publisher'
import { giftduels } from '@giftduels/protobuf-ts'
import { encoderFor } from '@/utils/encoderFor'

export async function nftGiftHandler(client: TelegramClient) {
	client.addEventHandler(async (update: Api.TypeUpdate) => {
		if (!(update instanceof Api.UpdateNewMessage)) return

		const message = update.message
		logger.info({ messageType: message.className }, 'üì® Incoming message')

		if (!(message instanceof Api.MessageService)) return

		logger.info({ action: message.action.className }, 'action.className')

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ NFT –ø–æ–¥–∞—Ä–∫–∏ (MessageActionStarGiftUnique)
		if (!(message.action instanceof Api.MessageActionStarGiftUnique)) return

		logger.info({ action: message.action.className }, 'üéØ NFT Gift action')
		logger.info({ data: message }, 'Data')

		let senderId: number
		const peer = message.fromId ?? message.peerId

		if ('userId' in peer) {
			senderId = peer.userId.toJSNumber?.()
		} else if ('chatId' in peer) {
			senderId = peer.chatId.toJSNumber?.()
		} else {
			logger.warn({ peer }, '‚ö†Ô∏è Unknown peer type')
			return
		}

		logger.info({ action: message.action.className }, 'Processing NFT Gift...')

		const self = await client.getMe()

		logger.info({ senderId }, 'üéÅ Got NFT Gift')

		try {
			const gift = parseMessageActionStarGiftUnique(
				message,
				senderId,
				self.id?.toJSNumber()
			)

			logger.debug({ gift }, 'üì¶ Parsed NFT gift')

			await publishProto<giftduels.gift.v1.TelegramGiftReceivedEvent>({
				routingKey: 'telegram.gift.received',
				msg: gift,
				encoder: encoderFor(giftduels.gift.v1.TelegramGiftReceivedEvent),
			})

			logger.info(
				{
					messageId: message.id,
					userId: senderId,
					giftId: gift.telegramGiftId,
				},
				'üì§ NFT Gift event published'
			)

			await client.sendMessage(senderId, {
				message: `üéÅ ${
					gift.title || '–ü–æ–¥–∞—Ä–æ–∫'
				} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å GiftDuels!\n\n–ò—â–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é ‚Äî @GiftDuels`,
			})
		} catch (err) {
			logger.error(
				{
					err,
					messageId: message.id,
					userId: senderId,
				},
				'‚ùå Error in NFT Gift handler'
			)

			await client.sendMessage(senderId, {
				message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
			})
		}
	})
}
