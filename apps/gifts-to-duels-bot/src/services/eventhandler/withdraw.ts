import { create } from "@bufbuild/protobuf";
import {
	GiftWithdrawFailedEventSchema,
	GiftWithdrawRequestedEvent,
	GiftWithdrawRequestedEventSchema,
} from "@giftduels/protobuf-js/giftduels/gift/v1/events_pb";
import { ConsumeMessage } from "amqplib";
import { v4 as uuidv4 } from "uuid";
import type { AckControl } from "@/amqp/consumer";
import { publisher } from "@/amqp/publisher";
import { logger } from "@/logger";
import { Userbot } from "@/telegram/userbot";
import { decodeProtobufMessage } from "@/utils/decodeProtobufMessage";

const MAX_RETRIES = 3;

export async function handleGiftWithdrawRequested(
	msg: Buffer,
	properties: ConsumeMessage["properties"],
	ctrl: AckControl,
	userbot: Userbot,
): Promise<void> {
	// 1) –°–∫–æ–ª—å–∫–æ —É–∂–µ –±—ã–ª–æ –ø–æ–ø—ã—Ç–æ–∫?
	const prevAttempts = Number(properties.headers?.["x-attempts"] ?? 0);

	// 2) –ü—Ä–æ–±—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
	const event = decodeProtobufMessage<GiftWithdrawRequestedEvent>(
		msg,
		GiftWithdrawRequestedEventSchema,
	);
	if (!event) {
		logger.warn(
			{ messageId: properties.messageId, attempts: prevAttempts },
			"‚ö†Ô∏è –ù–µ —Å–º–æ–≥–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å Protobuf ‚Äî —É–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
		);
		return ctrl.fail(); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–µ–∑ retry
	}

	// 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
	const giftId = event.giftId?.value;
	const ownerTelegramId = event.ownerTelegramId?.value;
	const upgradeMessageId = event.upgradeMessageId;
	if (!giftId || !ownerTelegramId || !upgradeMessageId) {
		logger.error(
			{
				messageId: properties.messageId,
				attempts: prevAttempts,
				giftId,
				ownerTelegramId,
				upgradeMessageId,
			},
			"‚ùå –í —Ç–µ–ª–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π ‚Äî –¥—Ä–æ–ø–∞–µ–º",
		);
		return ctrl.fail();
	}

	const log = logger.child({ giftId, ownerTelegramId, upgradeMessageId });

	try {
		log.info("üéÅ –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telegram API");
		await userbot.transferGift({
			userId: Number(ownerTelegramId),
			messageId: upgradeMessageId,
		});
		log.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω");

		return ctrl.ack();
	} catch (err) {
		log.error({ err, attempts: prevAttempts }, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");

		// transient-–æ—à–∏–±–∫–∞? —Ä–µ—à–∞–µ–º –ø–æ —á–∏—Å–ª—É –ø–æ–ø—ã—Ç–æ–∫
		if (prevAttempts < MAX_RETRIES) {
			log.info({ nextAttempt: prevAttempts + 1 }, "üîÑ –ë—É–¥–µ–º –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É");
			return ctrl.retry();
		} else {
			log.error(
				{ attempts: prevAttempts },
				`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ ${MAX_RETRIES} –ø–æ–≤—Ç–æ—Ä–æ–≤ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ`,
			);

			try {
				const failedEvent = create(GiftWithdrawFailedEventSchema, {
					$typeName: GiftWithdrawFailedEventSchema.typeName,
					giftId: event.giftId,
					ownerTelegramId: event.ownerTelegramId,
					telegramGiftId: event.telegramGiftId,
					collectibleId: event.collectibleId,
					upgradeMessageId: event.upgradeMessageId,
					price: event.price,
					commissionAmount: event.commissionAmount,
					errorReason: `Failed after ${MAX_RETRIES} attempts: ${err instanceof Error ? err.message : String(err)}`,
					attemptsMade: prevAttempts + 1,
				});

				const messageId = uuidv4();

				await publisher.publishProto({
					routingKey: "gift.withdraw.failed",
					schema: GiftWithdrawFailedEventSchema,
					msg: failedEvent,
					opts: {
						messageId,
					},
				});

				log.info("üì§ –°–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—ã–≤–æ–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ");
			} catch (publishErr) {
				log.error({ publishErr }, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ–± –æ—à–∏–±–∫–µ");
			}

			return ctrl.fail();
		}
	}
}
