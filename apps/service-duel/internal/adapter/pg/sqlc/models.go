// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DuelStatus string

const (
	DuelStatusWaitingForOpponent DuelStatus = "waiting_for_opponent"
	DuelStatusInProgress         DuelStatus = "in_progress"
	DuelStatusCompleted          DuelStatus = "completed"
	DuelStatusCancelled          DuelStatus = "cancelled"
)

func (e *DuelStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DuelStatus(s)
	case string:
		*e = DuelStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DuelStatus: %T", src)
	}
	return nil
}

type NullDuelStatus struct {
	DuelStatus DuelStatus
	Valid      bool // Valid is true if DuelStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDuelStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DuelStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DuelStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDuelStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DuelStatus), nil
}

type Duel struct {
	ID                   pgtype.UUID
	DisplayNumber        int64
	IsPrivate            bool
	MaxPlayers           int32
	MaxGifts             int32
	WinnerTelegramUserID pgtype.Int8
	NextRollDeadline     pgtype.Timestamptz
	Status               NullDuelStatus
	CreatedAt            pgtype.Timestamptz
	UpdatedAt            pgtype.Timestamptz
	CompletedAt          pgtype.Timestamptz
}

type DuelParticipant struct {
	DuelID         pgtype.UUID
	TelegramUserID int64
	IsCreator      bool
}

type DuelRoll struct {
	DuelID         pgtype.UUID
	RoundNumber    int32
	TelegramUserID int64
	DiceValue      int16
	RolledAt       pgtype.Timestamptz
	IsAutoRolled   bool
}

type DuelRound struct {
	DuelID      pgtype.UUID
	RoundNumber int32
}

type DuelStake struct {
	DuelID         pgtype.UUID
	TelegramUserID int64
	GiftID         pgtype.UUID
}
