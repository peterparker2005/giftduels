// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"
)

const addUserBalance = `-- name: AddUserBalance :exec
UPDATE user_balances SET ton_balance = ton_balance + $1 WHERE telegram_user_id = $2
`

type AddUserBalanceParams struct {
	TonBalance     float64
	TelegramUserID int64
}

func (q *Queries) AddUserBalance(ctx context.Context, arg AddUserBalanceParams) error {
	_, err := q.db.Exec(ctx, addUserBalance, arg.TonBalance, arg.TelegramUserID)
	return err
}

const createUserBalance = `-- name: CreateUserBalance :one
INSERT INTO user_balances (
    telegram_user_id,
    ton_balance
) VALUES (
    $1, $2
)
RETURNING id, telegram_user_id, ton_balance, created_at, updated_at
`

type CreateUserBalanceParams struct {
	TelegramUserID int64
	TonBalance     float64
}

func (q *Queries) CreateUserBalance(ctx context.Context, arg CreateUserBalanceParams) (UserBalance, error) {
	row := q.db.QueryRow(ctx, createUserBalance, arg.TelegramUserID, arg.TonBalance)
	var i UserBalance
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.TonBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserTransaction = `-- name: CreateUserTransaction :one
INSERT INTO user_transactions (
    telegram_user_id,
    amount,
    reason
) VALUES (
    $1, $2, $3
)
RETURNING id, telegram_user_id, amount, reason, created_at
`

type CreateUserTransactionParams struct {
	TelegramUserID int64
	Amount         float64
	Reason         TransactionReason
}

func (q *Queries) CreateUserTransaction(ctx context.Context, arg CreateUserTransactionParams) (UserTransaction, error) {
	row := q.db.QueryRow(ctx, createUserTransaction, arg.TelegramUserID, arg.Amount, arg.Reason)
	var i UserTransaction
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Amount,
		&i.Reason,
		&i.CreatedAt,
	)
	return i, err
}

const getUserBalance = `-- name: GetUserBalance :one
SELECT id, telegram_user_id, ton_balance, created_at, updated_at FROM user_balances WHERE telegram_user_id = $1
`

func (q *Queries) GetUserBalance(ctx context.Context, telegramUserID int64) (UserBalance, error) {
	row := q.db.QueryRow(ctx, getUserBalance, telegramUserID)
	var i UserBalance
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.TonBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const spendUserBalance = `-- name: SpendUserBalance :exec
UPDATE user_balances SET ton_balance = ton_balance - $1 WHERE telegram_user_id = $2
`

type SpendUserBalanceParams struct {
	TonBalance     float64
	TelegramUserID int64
}

func (q *Queries) SpendUserBalance(ctx context.Context, arg SpendUserBalanceParams) error {
	_, err := q.db.Exec(ctx, spendUserBalance, arg.TonBalance, arg.TelegramUserID)
	return err
}
