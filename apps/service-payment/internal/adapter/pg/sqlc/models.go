// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TransactionReason string

const (
	TransactionReasonWithdraw TransactionReason = "withdraw"
)

func (e *TransactionReason) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionReason(s)
	case string:
		*e = TransactionReason(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionReason: %T", src)
	}
	return nil
}

type NullTransactionReason struct {
	TransactionReason TransactionReason
	Valid             bool // Valid is true if TransactionReason is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionReason) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionReason, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionReason.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionReason) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionReason), nil
}

type UserBalance struct {
	ID             int32
	TelegramUserID int64
	TonBalance     float64
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
}

type UserTransaction struct {
	ID             int32
	TelegramUserID int64
	Amount         float64
	Reason         TransactionReason
	CreatedAt      pgtype.Timestamp
}
