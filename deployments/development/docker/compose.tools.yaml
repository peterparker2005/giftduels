services:
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9010:9001'
    volumes:
      - ./volumes/minio:/minio_data
      - ./certs:/root/.minio/certs # üëà –ø—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - net

  postgres:
    image: ankane/pgvector:latest
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_MULTIPLE_DATABASES: giftduels_user,giftduels_gift,giftduels_payment,giftduels_duel
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '5433:5432'
    volumes:
      - ./volumes/postgres_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d postgres']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks: [net]

  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      # RABBITMQ_ENABLED_PLUGINS: |
      #   rabbitmq_management.
      #   rabbitmq_management_agent.
      #   rabbitmq_prometheus.
    ports:
      - '5672:5672' # –ø–æ—Ä—Ç –¥–ª—è AMQP (–∫–ª–∏–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–≥–æ)
      - '15672:15672' # –ø–æ—Ä—Ç –¥–ª—è RabbitMQ Management UI
    volumes:
      - ./volumes/rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD-SHELL', 'rabbitmq-diagnostics -q ping']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - net

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - ./volumes/redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks: [net]

  vault:
    image: hashicorp/vault:1.15.3
    container_name: vault
    ports:
      - '8200:8200'
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:8200'
    cap_add:
      - IPC_LOCK
    command: server -dev
    healthcheck:
      test: ['CMD', 'vault', 'status']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks: [net]

  envoy:
    image: envoyproxy/envoy:v1.29.1
    container_name: envoy
    volumes:
      - ./config/envoy.yaml:/etc/envoy/envoy.yaml
      - ./certs:/certs:ro
    ports:
      - '8443:8443' # —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞, miniapp –∏ —Ç.–¥.
      - '9090:9090' # admin Envoy
    depends_on: []
    networks: [net]

networks:
  net:
    driver: bridge
