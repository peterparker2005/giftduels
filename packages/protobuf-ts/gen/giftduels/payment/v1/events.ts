// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/payment/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TelegramUserId } from "../../shared/v1/common";
import {
  CommissionChargeStars,
  InvoicePurpose,
  invoicePurposeFromJSON,
  invoicePurposeToJSON,
  StarsDeposit,
} from "./payment";

/** Invoice payload structure that gets encoded into base64 for telegram bot */
export interface InvoicePayload {
  $type: "giftduels.payment.v1.InvoicePayload";
  purpose: InvoicePurpose;
  starsDeposit?: StarsDeposit | undefined;
  commissionChargeStars?: CommissionChargeStars | undefined;
}

/** universal event of new invoice appearance. */
export interface InvoicePaymentEvent {
  $type: "giftduels.payment.v1.InvoicePaymentEvent";
  invoiceId: string;
  telegramUserId: TelegramUserId | undefined;
  purpose: InvoicePurpose;
  starsDeposit?: StarsDeposit | undefined;
  commissionChargeStars?:
    | CommissionChargeStars
    | undefined;
  /** raw useful field, can store Original InvoicePayload */
  rawPayloadBytes: Uint8Array;
}

function createBaseInvoicePayload(): InvoicePayload {
  return {
    $type: "giftduels.payment.v1.InvoicePayload",
    purpose: 0,
    starsDeposit: undefined,
    commissionChargeStars: undefined,
  };
}

export const InvoicePayload: MessageFns<InvoicePayload, "giftduels.payment.v1.InvoicePayload"> = {
  $type: "giftduels.payment.v1.InvoicePayload" as const,

  encode(message: InvoicePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.purpose !== 0) {
      writer.uint32(8).int32(message.purpose);
    }
    if (message.starsDeposit !== undefined) {
      StarsDeposit.encode(message.starsDeposit, writer.uint32(82).fork()).join();
    }
    if (message.commissionChargeStars !== undefined) {
      CommissionChargeStars.encode(message.commissionChargeStars, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvoicePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoicePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.purpose = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.starsDeposit = StarsDeposit.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.commissionChargeStars = CommissionChargeStars.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvoicePayload {
    return {
      $type: InvoicePayload.$type,
      purpose: isSet(object.purpose) ? invoicePurposeFromJSON(object.purpose) : 0,
      starsDeposit: isSet(object.starsDeposit) ? StarsDeposit.fromJSON(object.starsDeposit) : undefined,
      commissionChargeStars: isSet(object.commissionChargeStars)
        ? CommissionChargeStars.fromJSON(object.commissionChargeStars)
        : undefined,
    };
  },

  toJSON(message: InvoicePayload): unknown {
    const obj: any = {};
    if (message.purpose !== 0) {
      obj.purpose = invoicePurposeToJSON(message.purpose);
    }
    if (message.starsDeposit !== undefined) {
      obj.starsDeposit = StarsDeposit.toJSON(message.starsDeposit);
    }
    if (message.commissionChargeStars !== undefined) {
      obj.commissionChargeStars = CommissionChargeStars.toJSON(message.commissionChargeStars);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvoicePayload>, I>>(base?: I): InvoicePayload {
    return InvoicePayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvoicePayload>, I>>(object: I): InvoicePayload {
    const message = createBaseInvoicePayload();
    message.purpose = object.purpose ?? 0;
    message.starsDeposit = (object.starsDeposit !== undefined && object.starsDeposit !== null)
      ? StarsDeposit.fromPartial(object.starsDeposit)
      : undefined;
    message.commissionChargeStars =
      (object.commissionChargeStars !== undefined && object.commissionChargeStars !== null)
        ? CommissionChargeStars.fromPartial(object.commissionChargeStars)
        : undefined;
    return message;
  },
};

function createBaseInvoicePaymentEvent(): InvoicePaymentEvent {
  return {
    $type: "giftduels.payment.v1.InvoicePaymentEvent",
    invoiceId: "",
    telegramUserId: undefined,
    purpose: 0,
    starsDeposit: undefined,
    commissionChargeStars: undefined,
    rawPayloadBytes: new Uint8Array(0),
  };
}

export const InvoicePaymentEvent: MessageFns<InvoicePaymentEvent, "giftduels.payment.v1.InvoicePaymentEvent"> = {
  $type: "giftduels.payment.v1.InvoicePaymentEvent" as const,

  encode(message: InvoicePaymentEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invoiceId !== "") {
      writer.uint32(10).string(message.invoiceId);
    }
    if (message.telegramUserId !== undefined) {
      TelegramUserId.encode(message.telegramUserId, writer.uint32(18).fork()).join();
    }
    if (message.purpose !== 0) {
      writer.uint32(24).int32(message.purpose);
    }
    if (message.starsDeposit !== undefined) {
      StarsDeposit.encode(message.starsDeposit, writer.uint32(82).fork()).join();
    }
    if (message.commissionChargeStars !== undefined) {
      CommissionChargeStars.encode(message.commissionChargeStars, writer.uint32(90).fork()).join();
    }
    if (message.rawPayloadBytes.length !== 0) {
      writer.uint32(162).bytes(message.rawPayloadBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvoicePaymentEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoicePaymentEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invoiceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.purpose = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.starsDeposit = StarsDeposit.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.commissionChargeStars = CommissionChargeStars.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.rawPayloadBytes = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvoicePaymentEvent {
    return {
      $type: InvoicePaymentEvent.$type,
      invoiceId: isSet(object.invoiceId) ? globalThis.String(object.invoiceId) : "",
      telegramUserId: isSet(object.telegramUserId) ? TelegramUserId.fromJSON(object.telegramUserId) : undefined,
      purpose: isSet(object.purpose) ? invoicePurposeFromJSON(object.purpose) : 0,
      starsDeposit: isSet(object.starsDeposit) ? StarsDeposit.fromJSON(object.starsDeposit) : undefined,
      commissionChargeStars: isSet(object.commissionChargeStars)
        ? CommissionChargeStars.fromJSON(object.commissionChargeStars)
        : undefined,
      rawPayloadBytes: isSet(object.rawPayloadBytes) ? bytesFromBase64(object.rawPayloadBytes) : new Uint8Array(0),
    };
  },

  toJSON(message: InvoicePaymentEvent): unknown {
    const obj: any = {};
    if (message.invoiceId !== "") {
      obj.invoiceId = message.invoiceId;
    }
    if (message.telegramUserId !== undefined) {
      obj.telegramUserId = TelegramUserId.toJSON(message.telegramUserId);
    }
    if (message.purpose !== 0) {
      obj.purpose = invoicePurposeToJSON(message.purpose);
    }
    if (message.starsDeposit !== undefined) {
      obj.starsDeposit = StarsDeposit.toJSON(message.starsDeposit);
    }
    if (message.commissionChargeStars !== undefined) {
      obj.commissionChargeStars = CommissionChargeStars.toJSON(message.commissionChargeStars);
    }
    if (message.rawPayloadBytes.length !== 0) {
      obj.rawPayloadBytes = base64FromBytes(message.rawPayloadBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvoicePaymentEvent>, I>>(base?: I): InvoicePaymentEvent {
    return InvoicePaymentEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvoicePaymentEvent>, I>>(object: I): InvoicePaymentEvent {
    const message = createBaseInvoicePaymentEvent();
    message.invoiceId = object.invoiceId ?? "";
    message.telegramUserId = (object.telegramUserId !== undefined && object.telegramUserId !== null)
      ? TelegramUserId.fromPartial(object.telegramUserId)
      : undefined;
    message.purpose = object.purpose ?? 0;
    message.starsDeposit = (object.starsDeposit !== undefined && object.starsDeposit !== null)
      ? StarsDeposit.fromPartial(object.starsDeposit)
      : undefined;
    message.commissionChargeStars =
      (object.commissionChargeStars !== undefined && object.commissionChargeStars !== null)
        ? CommissionChargeStars.fromPartial(object.commissionChargeStars)
        : undefined;
    message.rawPayloadBytes = object.rawPayloadBytes ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
