// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/gift/v1/gift_private_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GiftId, PageRequest, PageResponse, TelegramUserId } from "../../shared/v1/common";
import { Gift } from "./gift";

export interface GetUserGiftsRequest {
  $type: "giftduels.gift.v1.GetUserGiftsRequest";
  telegramUserId: TelegramUserId | undefined;
  pagination: PageRequest | undefined;
}

export interface GetUserGiftsResponse {
  $type: "giftduels.gift.v1.GetUserGiftsResponse";
  gifts: Gift[];
  pagination: PageResponse | undefined;
}

export interface TransferGiftToUserRequest {
  $type: "giftduels.gift.v1.TransferGiftToUserRequest";
  telegramUserId: TelegramUserId | undefined;
  giftId: GiftId | undefined;
}

export interface TransferGiftToUserResponse {
  $type: "giftduels.gift.v1.TransferGiftToUserResponse";
  gift: Gift | undefined;
}

export interface StakeGiftRequest {
  $type: "giftduels.gift.v1.StakeGiftRequest";
  telegramUserId: TelegramUserId | undefined;
  giftId: GiftId | undefined;
  gameId: string;
}

export interface StakeGiftResponse {
  $type: "giftduels.gift.v1.StakeGiftResponse";
  gift: Gift | undefined;
}

export interface PrivateGetGiftRequest {
  $type: "giftduels.gift.v1.PrivateGetGiftRequest";
  giftId: GiftId | undefined;
}

export interface PrivateGetGiftResponse {
  $type: "giftduels.gift.v1.PrivateGetGiftResponse";
  gift: Gift | undefined;
}

function createBaseGetUserGiftsRequest(): GetUserGiftsRequest {
  return { $type: "giftduels.gift.v1.GetUserGiftsRequest", telegramUserId: undefined, pagination: undefined };
}

export const GetUserGiftsRequest: MessageFns<GetUserGiftsRequest, "giftduels.gift.v1.GetUserGiftsRequest"> = {
  $type: "giftduels.gift.v1.GetUserGiftsRequest" as const,

  encode(message: GetUserGiftsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramUserId !== undefined) {
      TelegramUserId.encode(message.telegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserGiftsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserGiftsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.telegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserGiftsRequest {
    return {
      $type: GetUserGiftsRequest.$type,
      telegramUserId: isSet(object.telegramUserId) ? TelegramUserId.fromJSON(object.telegramUserId) : undefined,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: GetUserGiftsRequest): unknown {
    const obj: any = {};
    if (message.telegramUserId !== undefined) {
      obj.telegramUserId = TelegramUserId.toJSON(message.telegramUserId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserGiftsRequest>, I>>(base?: I): GetUserGiftsRequest {
    return GetUserGiftsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserGiftsRequest>, I>>(object: I): GetUserGiftsRequest {
    const message = createBaseGetUserGiftsRequest();
    message.telegramUserId = (object.telegramUserId !== undefined && object.telegramUserId !== null)
      ? TelegramUserId.fromPartial(object.telegramUserId)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseGetUserGiftsResponse(): GetUserGiftsResponse {
  return { $type: "giftduels.gift.v1.GetUserGiftsResponse", gifts: [], pagination: undefined };
}

export const GetUserGiftsResponse: MessageFns<GetUserGiftsResponse, "giftduels.gift.v1.GetUserGiftsResponse"> = {
  $type: "giftduels.gift.v1.GetUserGiftsResponse" as const,

  encode(message: GetUserGiftsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gifts) {
      Gift.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserGiftsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserGiftsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gifts.push(Gift.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserGiftsResponse {
    return {
      $type: GetUserGiftsResponse.$type,
      gifts: globalThis.Array.isArray(object?.gifts) ? object.gifts.map((e: any) => Gift.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: GetUserGiftsResponse): unknown {
    const obj: any = {};
    if (message.gifts?.length) {
      obj.gifts = message.gifts.map((e) => Gift.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserGiftsResponse>, I>>(base?: I): GetUserGiftsResponse {
    return GetUserGiftsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserGiftsResponse>, I>>(object: I): GetUserGiftsResponse {
    const message = createBaseGetUserGiftsResponse();
    message.gifts = object.gifts?.map((e) => Gift.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseTransferGiftToUserRequest(): TransferGiftToUserRequest {
  return { $type: "giftduels.gift.v1.TransferGiftToUserRequest", telegramUserId: undefined, giftId: undefined };
}

export const TransferGiftToUserRequest: MessageFns<
  TransferGiftToUserRequest,
  "giftduels.gift.v1.TransferGiftToUserRequest"
> = {
  $type: "giftduels.gift.v1.TransferGiftToUserRequest" as const,

  encode(message: TransferGiftToUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramUserId !== undefined) {
      TelegramUserId.encode(message.telegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.giftId !== undefined) {
      GiftId.encode(message.giftId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferGiftToUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferGiftToUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.telegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.giftId = GiftId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferGiftToUserRequest {
    return {
      $type: TransferGiftToUserRequest.$type,
      telegramUserId: isSet(object.telegramUserId) ? TelegramUserId.fromJSON(object.telegramUserId) : undefined,
      giftId: isSet(object.giftId) ? GiftId.fromJSON(object.giftId) : undefined,
    };
  },

  toJSON(message: TransferGiftToUserRequest): unknown {
    const obj: any = {};
    if (message.telegramUserId !== undefined) {
      obj.telegramUserId = TelegramUserId.toJSON(message.telegramUserId);
    }
    if (message.giftId !== undefined) {
      obj.giftId = GiftId.toJSON(message.giftId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferGiftToUserRequest>, I>>(base?: I): TransferGiftToUserRequest {
    return TransferGiftToUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferGiftToUserRequest>, I>>(object: I): TransferGiftToUserRequest {
    const message = createBaseTransferGiftToUserRequest();
    message.telegramUserId = (object.telegramUserId !== undefined && object.telegramUserId !== null)
      ? TelegramUserId.fromPartial(object.telegramUserId)
      : undefined;
    message.giftId = (object.giftId !== undefined && object.giftId !== null)
      ? GiftId.fromPartial(object.giftId)
      : undefined;
    return message;
  },
};

function createBaseTransferGiftToUserResponse(): TransferGiftToUserResponse {
  return { $type: "giftduels.gift.v1.TransferGiftToUserResponse", gift: undefined };
}

export const TransferGiftToUserResponse: MessageFns<
  TransferGiftToUserResponse,
  "giftduels.gift.v1.TransferGiftToUserResponse"
> = {
  $type: "giftduels.gift.v1.TransferGiftToUserResponse" as const,

  encode(message: TransferGiftToUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gift !== undefined) {
      Gift.encode(message.gift, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferGiftToUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferGiftToUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gift = Gift.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferGiftToUserResponse {
    return {
      $type: TransferGiftToUserResponse.$type,
      gift: isSet(object.gift) ? Gift.fromJSON(object.gift) : undefined,
    };
  },

  toJSON(message: TransferGiftToUserResponse): unknown {
    const obj: any = {};
    if (message.gift !== undefined) {
      obj.gift = Gift.toJSON(message.gift);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferGiftToUserResponse>, I>>(base?: I): TransferGiftToUserResponse {
    return TransferGiftToUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferGiftToUserResponse>, I>>(object: I): TransferGiftToUserResponse {
    const message = createBaseTransferGiftToUserResponse();
    message.gift = (object.gift !== undefined && object.gift !== null) ? Gift.fromPartial(object.gift) : undefined;
    return message;
  },
};

function createBaseStakeGiftRequest(): StakeGiftRequest {
  return { $type: "giftduels.gift.v1.StakeGiftRequest", telegramUserId: undefined, giftId: undefined, gameId: "" };
}

export const StakeGiftRequest: MessageFns<StakeGiftRequest, "giftduels.gift.v1.StakeGiftRequest"> = {
  $type: "giftduels.gift.v1.StakeGiftRequest" as const,

  encode(message: StakeGiftRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramUserId !== undefined) {
      TelegramUserId.encode(message.telegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.giftId !== undefined) {
      GiftId.encode(message.giftId, writer.uint32(18).fork()).join();
    }
    if (message.gameId !== "") {
      writer.uint32(26).string(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StakeGiftRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStakeGiftRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.telegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.giftId = GiftId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StakeGiftRequest {
    return {
      $type: StakeGiftRequest.$type,
      telegramUserId: isSet(object.telegramUserId) ? TelegramUserId.fromJSON(object.telegramUserId) : undefined,
      giftId: isSet(object.giftId) ? GiftId.fromJSON(object.giftId) : undefined,
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
    };
  },

  toJSON(message: StakeGiftRequest): unknown {
    const obj: any = {};
    if (message.telegramUserId !== undefined) {
      obj.telegramUserId = TelegramUserId.toJSON(message.telegramUserId);
    }
    if (message.giftId !== undefined) {
      obj.giftId = GiftId.toJSON(message.giftId);
    }
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StakeGiftRequest>, I>>(base?: I): StakeGiftRequest {
    return StakeGiftRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StakeGiftRequest>, I>>(object: I): StakeGiftRequest {
    const message = createBaseStakeGiftRequest();
    message.telegramUserId = (object.telegramUserId !== undefined && object.telegramUserId !== null)
      ? TelegramUserId.fromPartial(object.telegramUserId)
      : undefined;
    message.giftId = (object.giftId !== undefined && object.giftId !== null)
      ? GiftId.fromPartial(object.giftId)
      : undefined;
    message.gameId = object.gameId ?? "";
    return message;
  },
};

function createBaseStakeGiftResponse(): StakeGiftResponse {
  return { $type: "giftduels.gift.v1.StakeGiftResponse", gift: undefined };
}

export const StakeGiftResponse: MessageFns<StakeGiftResponse, "giftduels.gift.v1.StakeGiftResponse"> = {
  $type: "giftduels.gift.v1.StakeGiftResponse" as const,

  encode(message: StakeGiftResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gift !== undefined) {
      Gift.encode(message.gift, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StakeGiftResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStakeGiftResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gift = Gift.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StakeGiftResponse {
    return { $type: StakeGiftResponse.$type, gift: isSet(object.gift) ? Gift.fromJSON(object.gift) : undefined };
  },

  toJSON(message: StakeGiftResponse): unknown {
    const obj: any = {};
    if (message.gift !== undefined) {
      obj.gift = Gift.toJSON(message.gift);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StakeGiftResponse>, I>>(base?: I): StakeGiftResponse {
    return StakeGiftResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StakeGiftResponse>, I>>(object: I): StakeGiftResponse {
    const message = createBaseStakeGiftResponse();
    message.gift = (object.gift !== undefined && object.gift !== null) ? Gift.fromPartial(object.gift) : undefined;
    return message;
  },
};

function createBasePrivateGetGiftRequest(): PrivateGetGiftRequest {
  return { $type: "giftduels.gift.v1.PrivateGetGiftRequest", giftId: undefined };
}

export const PrivateGetGiftRequest: MessageFns<PrivateGetGiftRequest, "giftduels.gift.v1.PrivateGetGiftRequest"> = {
  $type: "giftduels.gift.v1.PrivateGetGiftRequest" as const,

  encode(message: PrivateGetGiftRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftId !== undefined) {
      GiftId.encode(message.giftId, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateGetGiftRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateGetGiftRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.giftId = GiftId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateGetGiftRequest {
    return {
      $type: PrivateGetGiftRequest.$type,
      giftId: isSet(object.giftId) ? GiftId.fromJSON(object.giftId) : undefined,
    };
  },

  toJSON(message: PrivateGetGiftRequest): unknown {
    const obj: any = {};
    if (message.giftId !== undefined) {
      obj.giftId = GiftId.toJSON(message.giftId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateGetGiftRequest>, I>>(base?: I): PrivateGetGiftRequest {
    return PrivateGetGiftRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateGetGiftRequest>, I>>(object: I): PrivateGetGiftRequest {
    const message = createBasePrivateGetGiftRequest();
    message.giftId = (object.giftId !== undefined && object.giftId !== null)
      ? GiftId.fromPartial(object.giftId)
      : undefined;
    return message;
  },
};

function createBasePrivateGetGiftResponse(): PrivateGetGiftResponse {
  return { $type: "giftduels.gift.v1.PrivateGetGiftResponse", gift: undefined };
}

export const PrivateGetGiftResponse: MessageFns<PrivateGetGiftResponse, "giftduels.gift.v1.PrivateGetGiftResponse"> = {
  $type: "giftduels.gift.v1.PrivateGetGiftResponse" as const,

  encode(message: PrivateGetGiftResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gift !== undefined) {
      Gift.encode(message.gift, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateGetGiftResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateGetGiftResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gift = Gift.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateGetGiftResponse {
    return { $type: PrivateGetGiftResponse.$type, gift: isSet(object.gift) ? Gift.fromJSON(object.gift) : undefined };
  },

  toJSON(message: PrivateGetGiftResponse): unknown {
    const obj: any = {};
    if (message.gift !== undefined) {
      obj.gift = Gift.toJSON(message.gift);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateGetGiftResponse>, I>>(base?: I): PrivateGetGiftResponse {
    return PrivateGetGiftResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateGetGiftResponse>, I>>(object: I): PrivateGetGiftResponse {
    const message = createBasePrivateGetGiftResponse();
    message.gift = (object.gift !== undefined && object.gift !== null) ? Gift.fromPartial(object.gift) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
