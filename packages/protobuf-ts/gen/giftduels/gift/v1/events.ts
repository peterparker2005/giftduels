// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/gift/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { GiftTelegramId, TelegramUserId } from "../../shared/v1/common";
import { GiftAttribute } from "./gift";

/** Event emitted when a gift is received from a user to the system */
export interface TelegramGiftReceivedEvent {
  $type: "giftduels.gift.v1.TelegramGiftReceivedEvent";
  telegramGiftId: GiftTelegramId | undefined;
  depositDate: Date | undefined;
  ownerTelegramId:
    | TelegramUserId
    | undefined;
  /** Gift information */
  title: string;
  slug: string;
  attributes: GiftAttribute[];
  /** Collectible information (if applicable) */
  collectibleId: number;
  /** Used to transfer gift */
  upgradeMessageId: number;
}

function createBaseTelegramGiftReceivedEvent(): TelegramGiftReceivedEvent {
  return {
    $type: "giftduels.gift.v1.TelegramGiftReceivedEvent",
    telegramGiftId: undefined,
    depositDate: undefined,
    ownerTelegramId: undefined,
    title: "",
    slug: "",
    attributes: [],
    collectibleId: 0,
    upgradeMessageId: 0,
  };
}

export const TelegramGiftReceivedEvent: MessageFns<
  TelegramGiftReceivedEvent,
  "giftduels.gift.v1.TelegramGiftReceivedEvent"
> = {
  $type: "giftduels.gift.v1.TelegramGiftReceivedEvent" as const,

  encode(message: TelegramGiftReceivedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramGiftId !== undefined) {
      GiftTelegramId.encode(message.telegramGiftId, writer.uint32(18).fork()).join();
    }
    if (message.depositDate !== undefined) {
      Timestamp.encode(toTimestamp(message.depositDate), writer.uint32(26).fork()).join();
    }
    if (message.ownerTelegramId !== undefined) {
      TelegramUserId.encode(message.ownerTelegramId, writer.uint32(34).fork()).join();
    }
    if (message.title !== "") {
      writer.uint32(42).string(message.title);
    }
    if (message.slug !== "") {
      writer.uint32(50).string(message.slug);
    }
    for (const v of message.attributes) {
      GiftAttribute.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.collectibleId !== 0) {
      writer.uint32(64).int32(message.collectibleId);
    }
    if (message.upgradeMessageId !== 0) {
      writer.uint32(72).int32(message.upgradeMessageId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelegramGiftReceivedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelegramGiftReceivedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telegramGiftId = GiftTelegramId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.depositDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ownerTelegramId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.attributes.push(GiftAttribute.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.collectibleId = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.upgradeMessageId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelegramGiftReceivedEvent {
    return {
      $type: TelegramGiftReceivedEvent.$type,
      telegramGiftId: isSet(object.telegramGiftId) ? GiftTelegramId.fromJSON(object.telegramGiftId) : undefined,
      depositDate: isSet(object.depositDate) ? fromJsonTimestamp(object.depositDate) : undefined,
      ownerTelegramId: isSet(object.ownerTelegramId) ? TelegramUserId.fromJSON(object.ownerTelegramId) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => GiftAttribute.fromJSON(e))
        : [],
      collectibleId: isSet(object.collectibleId) ? globalThis.Number(object.collectibleId) : 0,
      upgradeMessageId: isSet(object.upgradeMessageId) ? globalThis.Number(object.upgradeMessageId) : 0,
    };
  },

  toJSON(message: TelegramGiftReceivedEvent): unknown {
    const obj: any = {};
    if (message.telegramGiftId !== undefined) {
      obj.telegramGiftId = GiftTelegramId.toJSON(message.telegramGiftId);
    }
    if (message.depositDate !== undefined) {
      obj.depositDate = message.depositDate.toISOString();
    }
    if (message.ownerTelegramId !== undefined) {
      obj.ownerTelegramId = TelegramUserId.toJSON(message.ownerTelegramId);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => GiftAttribute.toJSON(e));
    }
    if (message.collectibleId !== 0) {
      obj.collectibleId = Math.round(message.collectibleId);
    }
    if (message.upgradeMessageId !== 0) {
      obj.upgradeMessageId = Math.round(message.upgradeMessageId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TelegramGiftReceivedEvent>, I>>(base?: I): TelegramGiftReceivedEvent {
    return TelegramGiftReceivedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TelegramGiftReceivedEvent>, I>>(object: I): TelegramGiftReceivedEvent {
    const message = createBaseTelegramGiftReceivedEvent();
    message.telegramGiftId = (object.telegramGiftId !== undefined && object.telegramGiftId !== null)
      ? GiftTelegramId.fromPartial(object.telegramGiftId)
      : undefined;
    message.depositDate = object.depositDate ?? undefined;
    message.ownerTelegramId = (object.ownerTelegramId !== undefined && object.ownerTelegramId !== null)
      ? TelegramUserId.fromPartial(object.ownerTelegramId)
      : undefined;
    message.title = object.title ?? "";
    message.slug = object.slug ?? "";
    message.attributes = object.attributes?.map((e) => GiftAttribute.fromPartial(e)) || [];
    message.collectibleId = object.collectibleId ?? 0;
    message.upgradeMessageId = object.upgradeMessageId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
