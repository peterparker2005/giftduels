// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/event/v1/public_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DuelEvent } from "../../duel/v1/event";
import { InvoicePaymentEvent } from "../../payment/v1/events";

export interface SocketResponse {
  $type: "giftduels.event.v1.SocketResponse";
  onlineCount?: OnlineCountEvent | undefined;
  invoicePayment?: InvoicePaymentEvent | undefined;
  duelEvent?: DuelEvent | undefined;
}

export interface OnlineCountEvent {
  $type: "giftduels.event.v1.OnlineCountEvent";
  onlineCount: number;
}

function createBaseSocketResponse(): SocketResponse {
  return {
    $type: "giftduels.event.v1.SocketResponse",
    onlineCount: undefined,
    invoicePayment: undefined,
    duelEvent: undefined,
  };
}

export const SocketResponse: MessageFns<SocketResponse, "giftduels.event.v1.SocketResponse"> = {
  $type: "giftduels.event.v1.SocketResponse" as const,

  encode(message: SocketResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.onlineCount !== undefined) {
      OnlineCountEvent.encode(message.onlineCount, writer.uint32(10).fork()).join();
    }
    if (message.invoicePayment !== undefined) {
      InvoicePaymentEvent.encode(message.invoicePayment, writer.uint32(18).fork()).join();
    }
    if (message.duelEvent !== undefined) {
      DuelEvent.encode(message.duelEvent, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.onlineCount = OnlineCountEvent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invoicePayment = InvoicePaymentEvent.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.duelEvent = DuelEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketResponse {
    return {
      $type: SocketResponse.$type,
      onlineCount: isSet(object.onlineCount) ? OnlineCountEvent.fromJSON(object.onlineCount) : undefined,
      invoicePayment: isSet(object.invoicePayment) ? InvoicePaymentEvent.fromJSON(object.invoicePayment) : undefined,
      duelEvent: isSet(object.duelEvent) ? DuelEvent.fromJSON(object.duelEvent) : undefined,
    };
  },

  toJSON(message: SocketResponse): unknown {
    const obj: any = {};
    if (message.onlineCount !== undefined) {
      obj.onlineCount = OnlineCountEvent.toJSON(message.onlineCount);
    }
    if (message.invoicePayment !== undefined) {
      obj.invoicePayment = InvoicePaymentEvent.toJSON(message.invoicePayment);
    }
    if (message.duelEvent !== undefined) {
      obj.duelEvent = DuelEvent.toJSON(message.duelEvent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketResponse>, I>>(base?: I): SocketResponse {
    return SocketResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketResponse>, I>>(object: I): SocketResponse {
    const message = createBaseSocketResponse();
    message.onlineCount = (object.onlineCount !== undefined && object.onlineCount !== null)
      ? OnlineCountEvent.fromPartial(object.onlineCount)
      : undefined;
    message.invoicePayment = (object.invoicePayment !== undefined && object.invoicePayment !== null)
      ? InvoicePaymentEvent.fromPartial(object.invoicePayment)
      : undefined;
    message.duelEvent = (object.duelEvent !== undefined && object.duelEvent !== null)
      ? DuelEvent.fromPartial(object.duelEvent)
      : undefined;
    return message;
  },
};

function createBaseOnlineCountEvent(): OnlineCountEvent {
  return { $type: "giftduels.event.v1.OnlineCountEvent", onlineCount: 0 };
}

export const OnlineCountEvent: MessageFns<OnlineCountEvent, "giftduels.event.v1.OnlineCountEvent"> = {
  $type: "giftduels.event.v1.OnlineCountEvent" as const,

  encode(message: OnlineCountEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.onlineCount !== 0) {
      writer.uint32(8).int32(message.onlineCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineCountEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineCountEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.onlineCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineCountEvent {
    return {
      $type: OnlineCountEvent.$type,
      onlineCount: isSet(object.onlineCount) ? globalThis.Number(object.onlineCount) : 0,
    };
  },

  toJSON(message: OnlineCountEvent): unknown {
    const obj: any = {};
    if (message.onlineCount !== 0) {
      obj.onlineCount = Math.round(message.onlineCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnlineCountEvent>, I>>(base?: I): OnlineCountEvent {
    return OnlineCountEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnlineCountEvent>, I>>(object: I): OnlineCountEvent {
    const message = createBaseOnlineCountEvent();
    message.onlineCount = object.onlineCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
