// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/identity/v1/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { TelegramUserId, UserId } from "../../shared/v1/common";

export interface User {
  $type: "giftduels.identity.v1.User";
  userId: UserId | undefined;
  telegramId: TelegramUserId | undefined;
  firstName: string;
  lastName: string;
  username: string;
  languageCode: string;
  isPremium: boolean;
  allowsWriteToPm: boolean;
  photoUrl: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface UserProfile {
  $type: "giftduels.identity.v1.UserProfile";
  userId: UserId | undefined;
  telegramId:
    | TelegramUserId
    | undefined;
  /** Computed from first_name + last_name or username */
  displayName: string;
  username: string;
  photoUrl: string;
  isPremium: boolean;
}

export interface TelegramUserInfo {
  $type: "giftduels.identity.v1.TelegramUserInfo";
  telegramId: TelegramUserId | undefined;
  firstName: string;
  lastName: string;
  username: string;
  languageCode: string;
  isPremium: boolean;
  allowsWriteToPm: boolean;
  photoUrl: string;
}

function createBaseUser(): User {
  return {
    $type: "giftduels.identity.v1.User",
    userId: undefined,
    telegramId: undefined,
    firstName: "",
    lastName: "",
    username: "",
    languageCode: "",
    isPremium: false,
    allowsWriteToPm: false,
    photoUrl: "",
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const User: MessageFns<User, "giftduels.identity.v1.User"> = {
  $type: "giftduels.identity.v1.User" as const,

  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      UserId.encode(message.userId, writer.uint32(10).fork()).join();
    }
    if (message.telegramId !== undefined) {
      TelegramUserId.encode(message.telegramId, writer.uint32(18).fork()).join();
    }
    if (message.firstName !== "") {
      writer.uint32(26).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(34).string(message.lastName);
    }
    if (message.username !== "") {
      writer.uint32(42).string(message.username);
    }
    if (message.languageCode !== "") {
      writer.uint32(50).string(message.languageCode);
    }
    if (message.isPremium !== false) {
      writer.uint32(56).bool(message.isPremium);
    }
    if (message.allowsWriteToPm !== false) {
      writer.uint32(64).bool(message.allowsWriteToPm);
    }
    if (message.photoUrl !== "") {
      writer.uint32(74).string(message.photoUrl);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(82).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = UserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telegramId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isPremium = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.allowsWriteToPm = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.photoUrl = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      $type: User.$type,
      userId: isSet(object.userId) ? UserId.fromJSON(object.userId) : undefined,
      telegramId: isSet(object.telegramId) ? TelegramUserId.fromJSON(object.telegramId) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      isPremium: isSet(object.isPremium) ? globalThis.Boolean(object.isPremium) : false,
      allowsWriteToPm: isSet(object.allowsWriteToPm) ? globalThis.Boolean(object.allowsWriteToPm) : false,
      photoUrl: isSet(object.photoUrl) ? globalThis.String(object.photoUrl) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = UserId.toJSON(message.userId);
    }
    if (message.telegramId !== undefined) {
      obj.telegramId = TelegramUserId.toJSON(message.telegramId);
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.isPremium !== false) {
      obj.isPremium = message.isPremium;
    }
    if (message.allowsWriteToPm !== false) {
      obj.allowsWriteToPm = message.allowsWriteToPm;
    }
    if (message.photoUrl !== "") {
      obj.photoUrl = message.photoUrl;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? UserId.fromPartial(object.userId)
      : undefined;
    message.telegramId = (object.telegramId !== undefined && object.telegramId !== null)
      ? TelegramUserId.fromPartial(object.telegramId)
      : undefined;
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.username = object.username ?? "";
    message.languageCode = object.languageCode ?? "";
    message.isPremium = object.isPremium ?? false;
    message.allowsWriteToPm = object.allowsWriteToPm ?? false;
    message.photoUrl = object.photoUrl ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseUserProfile(): UserProfile {
  return {
    $type: "giftduels.identity.v1.UserProfile",
    userId: undefined,
    telegramId: undefined,
    displayName: "",
    username: "",
    photoUrl: "",
    isPremium: false,
  };
}

export const UserProfile: MessageFns<UserProfile, "giftduels.identity.v1.UserProfile"> = {
  $type: "giftduels.identity.v1.UserProfile" as const,

  encode(message: UserProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      UserId.encode(message.userId, writer.uint32(10).fork()).join();
    }
    if (message.telegramId !== undefined) {
      TelegramUserId.encode(message.telegramId, writer.uint32(18).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.username !== "") {
      writer.uint32(34).string(message.username);
    }
    if (message.photoUrl !== "") {
      writer.uint32(42).string(message.photoUrl);
    }
    if (message.isPremium !== false) {
      writer.uint32(48).bool(message.isPremium);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = UserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telegramId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.photoUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isPremium = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserProfile {
    return {
      $type: UserProfile.$type,
      userId: isSet(object.userId) ? UserId.fromJSON(object.userId) : undefined,
      telegramId: isSet(object.telegramId) ? TelegramUserId.fromJSON(object.telegramId) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      photoUrl: isSet(object.photoUrl) ? globalThis.String(object.photoUrl) : "",
      isPremium: isSet(object.isPremium) ? globalThis.Boolean(object.isPremium) : false,
    };
  },

  toJSON(message: UserProfile): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = UserId.toJSON(message.userId);
    }
    if (message.telegramId !== undefined) {
      obj.telegramId = TelegramUserId.toJSON(message.telegramId);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.photoUrl !== "") {
      obj.photoUrl = message.photoUrl;
    }
    if (message.isPremium !== false) {
      obj.isPremium = message.isPremium;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserProfile>, I>>(base?: I): UserProfile {
    return UserProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserProfile>, I>>(object: I): UserProfile {
    const message = createBaseUserProfile();
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? UserId.fromPartial(object.userId)
      : undefined;
    message.telegramId = (object.telegramId !== undefined && object.telegramId !== null)
      ? TelegramUserId.fromPartial(object.telegramId)
      : undefined;
    message.displayName = object.displayName ?? "";
    message.username = object.username ?? "";
    message.photoUrl = object.photoUrl ?? "";
    message.isPremium = object.isPremium ?? false;
    return message;
  },
};

function createBaseTelegramUserInfo(): TelegramUserInfo {
  return {
    $type: "giftduels.identity.v1.TelegramUserInfo",
    telegramId: undefined,
    firstName: "",
    lastName: "",
    username: "",
    languageCode: "",
    isPremium: false,
    allowsWriteToPm: false,
    photoUrl: "",
  };
}

export const TelegramUserInfo: MessageFns<TelegramUserInfo, "giftduels.identity.v1.TelegramUserInfo"> = {
  $type: "giftduels.identity.v1.TelegramUserInfo" as const,

  encode(message: TelegramUserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramId !== undefined) {
      TelegramUserId.encode(message.telegramId, writer.uint32(10).fork()).join();
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(26).string(message.lastName);
    }
    if (message.username !== "") {
      writer.uint32(34).string(message.username);
    }
    if (message.languageCode !== "") {
      writer.uint32(42).string(message.languageCode);
    }
    if (message.isPremium !== false) {
      writer.uint32(48).bool(message.isPremium);
    }
    if (message.allowsWriteToPm !== false) {
      writer.uint32(56).bool(message.allowsWriteToPm);
    }
    if (message.photoUrl !== "") {
      writer.uint32(66).string(message.photoUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelegramUserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelegramUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.telegramId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isPremium = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.allowsWriteToPm = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.photoUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelegramUserInfo {
    return {
      $type: TelegramUserInfo.$type,
      telegramId: isSet(object.telegramId) ? TelegramUserId.fromJSON(object.telegramId) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      isPremium: isSet(object.isPremium) ? globalThis.Boolean(object.isPremium) : false,
      allowsWriteToPm: isSet(object.allowsWriteToPm) ? globalThis.Boolean(object.allowsWriteToPm) : false,
      photoUrl: isSet(object.photoUrl) ? globalThis.String(object.photoUrl) : "",
    };
  },

  toJSON(message: TelegramUserInfo): unknown {
    const obj: any = {};
    if (message.telegramId !== undefined) {
      obj.telegramId = TelegramUserId.toJSON(message.telegramId);
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.isPremium !== false) {
      obj.isPremium = message.isPremium;
    }
    if (message.allowsWriteToPm !== false) {
      obj.allowsWriteToPm = message.allowsWriteToPm;
    }
    if (message.photoUrl !== "") {
      obj.photoUrl = message.photoUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TelegramUserInfo>, I>>(base?: I): TelegramUserInfo {
    return TelegramUserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TelegramUserInfo>, I>>(object: I): TelegramUserInfo {
    const message = createBaseTelegramUserInfo();
    message.telegramId = (object.telegramId !== undefined && object.telegramId !== null)
      ? TelegramUserId.fromPartial(object.telegramId)
      : undefined;
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.username = object.username ?? "";
    message.languageCode = object.languageCode ?? "";
    message.isPremium = object.isPremium ?? false;
    message.allowsWriteToPm = object.allowsWriteToPm ?? false;
    message.photoUrl = object.photoUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
