// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/identity/v1/public_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TelegramUserId, UserId } from "../../shared/v1/common";
import { UserProfile } from "./user";

export interface GetProfileResponse {
  $type: "giftduels.identity.v1.GetProfileResponse";
  profile: UserProfile | undefined;
}

export interface ValidateTokenRequest {
  $type: "giftduels.identity.v1.ValidateTokenRequest";
  token: string;
}

export interface ValidateTokenResponse {
  $type: "giftduels.identity.v1.ValidateTokenResponse";
  /** Internal user UUID */
  userId:
    | UserId
    | undefined;
  /** Telegram user ID */
  telegramUserId: TelegramUserId | undefined;
  isValid: boolean;
  errorMessage: string;
}

export interface AuthorizeRequest {
  $type: "giftduels.identity.v1.AuthorizeRequest";
  /** Telegram WebApp InitData */
  initData: string;
}

export interface AuthorizeResponse {
  $type: "giftduels.identity.v1.AuthorizeResponse";
  token: string;
}

function createBaseGetProfileResponse(): GetProfileResponse {
  return { $type: "giftduels.identity.v1.GetProfileResponse", profile: undefined };
}

export const GetProfileResponse: MessageFns<GetProfileResponse, "giftduels.identity.v1.GetProfileResponse"> = {
  $type: "giftduels.identity.v1.GetProfileResponse" as const,

  encode(message: GetProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      UserProfile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = UserProfile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileResponse {
    return {
      $type: GetProfileResponse.$type,
      profile: isSet(object.profile) ? UserProfile.fromJSON(object.profile) : undefined,
    };
  },

  toJSON(message: GetProfileResponse): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = UserProfile.toJSON(message.profile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProfileResponse>, I>>(base?: I): GetProfileResponse {
    return GetProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProfileResponse>, I>>(object: I): GetProfileResponse {
    const message = createBaseGetProfileResponse();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? UserProfile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseValidateTokenRequest(): ValidateTokenRequest {
  return { $type: "giftduels.identity.v1.ValidateTokenRequest", token: "" };
}

export const ValidateTokenRequest: MessageFns<ValidateTokenRequest, "giftduels.identity.v1.ValidateTokenRequest"> = {
  $type: "giftduels.identity.v1.ValidateTokenRequest" as const,

  encode(message: ValidateTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenRequest {
    return { $type: ValidateTokenRequest.$type, token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: ValidateTokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenRequest>, I>>(base?: I): ValidateTokenRequest {
    return ValidateTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenRequest>, I>>(object: I): ValidateTokenRequest {
    const message = createBaseValidateTokenRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseValidateTokenResponse(): ValidateTokenResponse {
  return {
    $type: "giftduels.identity.v1.ValidateTokenResponse",
    userId: undefined,
    telegramUserId: undefined,
    isValid: false,
    errorMessage: "",
  };
}

export const ValidateTokenResponse: MessageFns<ValidateTokenResponse, "giftduels.identity.v1.ValidateTokenResponse"> = {
  $type: "giftduels.identity.v1.ValidateTokenResponse" as const,

  encode(message: ValidateTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      UserId.encode(message.userId, writer.uint32(10).fork()).join();
    }
    if (message.telegramUserId !== undefined) {
      TelegramUserId.encode(message.telegramUserId, writer.uint32(18).fork()).join();
    }
    if (message.isValid !== false) {
      writer.uint32(24).bool(message.isValid);
    }
    if (message.errorMessage !== "") {
      writer.uint32(34).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = UserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenResponse {
    return {
      $type: ValidateTokenResponse.$type,
      userId: isSet(object.userId) ? UserId.fromJSON(object.userId) : undefined,
      telegramUserId: isSet(object.telegramUserId) ? TelegramUserId.fromJSON(object.telegramUserId) : undefined,
      isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
    };
  },

  toJSON(message: ValidateTokenResponse): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = UserId.toJSON(message.userId);
    }
    if (message.telegramUserId !== undefined) {
      obj.telegramUserId = TelegramUserId.toJSON(message.telegramUserId);
    }
    if (message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenResponse>, I>>(base?: I): ValidateTokenResponse {
    return ValidateTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenResponse>, I>>(object: I): ValidateTokenResponse {
    const message = createBaseValidateTokenResponse();
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? UserId.fromPartial(object.userId)
      : undefined;
    message.telegramUserId = (object.telegramUserId !== undefined && object.telegramUserId !== null)
      ? TelegramUserId.fromPartial(object.telegramUserId)
      : undefined;
    message.isValid = object.isValid ?? false;
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

function createBaseAuthorizeRequest(): AuthorizeRequest {
  return { $type: "giftduels.identity.v1.AuthorizeRequest", initData: "" };
}

export const AuthorizeRequest: MessageFns<AuthorizeRequest, "giftduels.identity.v1.AuthorizeRequest"> = {
  $type: "giftduels.identity.v1.AuthorizeRequest" as const,

  encode(message: AuthorizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.initData !== "") {
      writer.uint32(10).string(message.initData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.initData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizeRequest {
    return {
      $type: AuthorizeRequest.$type,
      initData: isSet(object.initData) ? globalThis.String(object.initData) : "",
    };
  },

  toJSON(message: AuthorizeRequest): unknown {
    const obj: any = {};
    if (message.initData !== "") {
      obj.initData = message.initData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorizeRequest>, I>>(base?: I): AuthorizeRequest {
    return AuthorizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorizeRequest>, I>>(object: I): AuthorizeRequest {
    const message = createBaseAuthorizeRequest();
    message.initData = object.initData ?? "";
    return message;
  },
};

function createBaseAuthorizeResponse(): AuthorizeResponse {
  return { $type: "giftduels.identity.v1.AuthorizeResponse", token: "" };
}

export const AuthorizeResponse: MessageFns<AuthorizeResponse, "giftduels.identity.v1.AuthorizeResponse"> = {
  $type: "giftduels.identity.v1.AuthorizeResponse" as const,

  encode(message: AuthorizeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizeResponse {
    return { $type: AuthorizeResponse.$type, token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: AuthorizeResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorizeResponse>, I>>(base?: I): AuthorizeResponse {
    return AuthorizeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorizeResponse>, I>>(object: I): AuthorizeResponse {
    const message = createBaseAuthorizeResponse();
    message.token = object.token ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
