// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/identity/v1/messaging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TelegramUserId, UserId } from "../../shared/v1/common";

export interface NewUserEvent {
  $type: "giftduels.identity.v1.NewUserEvent";
  userId: UserId | undefined;
  telegramId: TelegramUserId | undefined;
}

function createBaseNewUserEvent(): NewUserEvent {
  return { $type: "giftduels.identity.v1.NewUserEvent", userId: undefined, telegramId: undefined };
}

export const NewUserEvent: MessageFns<NewUserEvent, "giftduels.identity.v1.NewUserEvent"> = {
  $type: "giftduels.identity.v1.NewUserEvent" as const,

  encode(message: NewUserEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      UserId.encode(message.userId, writer.uint32(10).fork()).join();
    }
    if (message.telegramId !== undefined) {
      TelegramUserId.encode(message.telegramId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NewUserEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNewUserEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = UserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telegramId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NewUserEvent {
    return {
      $type: NewUserEvent.$type,
      userId: isSet(object.userId) ? UserId.fromJSON(object.userId) : undefined,
      telegramId: isSet(object.telegramId) ? TelegramUserId.fromJSON(object.telegramId) : undefined,
    };
  },

  toJSON(message: NewUserEvent): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = UserId.toJSON(message.userId);
    }
    if (message.telegramId !== undefined) {
      obj.telegramId = TelegramUserId.toJSON(message.telegramId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NewUserEvent>, I>>(base?: I): NewUserEvent {
    return NewUserEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NewUserEvent>, I>>(object: I): NewUserEvent {
    const message = createBaseNewUserEvent();
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? UserId.fromPartial(object.userId)
      : undefined;
    message.telegramId = (object.telegramId !== undefined && object.telegramId !== null)
      ? TelegramUserId.fromPartial(object.telegramId)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
