// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/shared/v1/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";

/** ===== SORT ORDERS ===== */
export enum SortOrder {
  SORT_ORDER_UNSPECIFIED = 0,
  SORT_ORDER_ASC = 1,
  SORT_ORDER_DESC = 2,
  UNRECOGNIZED = -1,
}

export function sortOrderFromJSON(object: any): SortOrder {
  switch (object) {
    case 0:
    case "SORT_ORDER_UNSPECIFIED":
      return SortOrder.SORT_ORDER_UNSPECIFIED;
    case 1:
    case "SORT_ORDER_ASC":
      return SortOrder.SORT_ORDER_ASC;
    case 2:
    case "SORT_ORDER_DESC":
      return SortOrder.SORT_ORDER_DESC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SortOrder.UNRECOGNIZED;
  }
}

export function sortOrderToJSON(object: SortOrder): string {
  switch (object) {
    case SortOrder.SORT_ORDER_UNSPECIFIED:
      return "SORT_ORDER_UNSPECIFIED";
    case SortOrder.SORT_ORDER_ASC:
      return "SORT_ORDER_ASC";
    case SortOrder.SORT_ORDER_DESC:
      return "SORT_ORDER_DESC";
    case SortOrder.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum GameMode {
  GAME_MODE_UNSPECIFIED = 0,
  GAME_MODE_DUEL = 1,
  UNRECOGNIZED = -1,
}

export function gameModeFromJSON(object: any): GameMode {
  switch (object) {
    case 0:
    case "GAME_MODE_UNSPECIFIED":
      return GameMode.GAME_MODE_UNSPECIFIED;
    case 1:
    case "GAME_MODE_DUEL":
      return GameMode.GAME_MODE_DUEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GameMode.UNRECOGNIZED;
  }
}

export function gameModeToJSON(object: GameMode): string {
  switch (object) {
    case GameMode.GAME_MODE_UNSPECIFIED:
      return "GAME_MODE_UNSPECIFIED";
    case GameMode.GAME_MODE_DUEL:
      return "GAME_MODE_DUEL";
    case GameMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ===== PAGINATION ===== */
export interface PageRequest {
  $type: "giftduels.shared.v1.PageRequest";
  page: number;
  pageSize: number;
}

export interface PageResponse {
  $type: "giftduels.shared.v1.PageResponse";
  page: number;
  pageSize: number;
  total: number;
  totalPages: number;
}

/** ===== COMMON IDENTIFIERS ===== */
export interface TelegramUserId {
  $type: "giftduels.shared.v1.TelegramUserId";
  value: string;
}

export interface UserId {
  $type: "giftduels.shared.v1.UserId";
  /** UUID */
  value: string;
}

export interface GiftId {
  $type: "giftduels.shared.v1.GiftId";
  /** UUID */
  value: string;
}

export interface GiftTelegramId {
  $type: "giftduels.shared.v1.GiftTelegramId";
  value: string;
}

export interface DuelId {
  $type: "giftduels.shared.v1.DuelId";
  /** UUID */
  value: string;
}

/** ===== MONETARY VALUES ===== */
export interface StarsAmount {
  $type: "giftduels.shared.v1.StarsAmount";
  value: number;
}

export interface TonAmount {
  $type: "giftduels.shared.v1.TonAmount";
  /** Amount in TON */
  value: number;
}

/** ===== COMMON FILTERS ===== */
export interface TimeRangeFilter {
  $type: "giftduels.shared.v1.TimeRangeFilter";
  from: Date | undefined;
  to: Date | undefined;
}

export interface NumericRangeFilter {
  $type: "giftduels.shared.v1.NumericRangeFilter";
  minValue: string;
  maxValue: string;
}

/** ===== STATUS RESPONSES ===== */
export interface SuccessResponse {
  $type: "giftduels.shared.v1.SuccessResponse";
  success: boolean;
  message: string;
}

/** ===== USER DISPLAY INFO ===== */
export interface UserDisplayInfo {
  $type: "giftduels.shared.v1.UserDisplayInfo";
  telegramUserId: TelegramUserId | undefined;
  displayName: string;
  photoUrl: string;
  username: string;
}

function createBasePageRequest(): PageRequest {
  return { $type: "giftduels.shared.v1.PageRequest", page: 0, pageSize: 0 };
}

export const PageRequest: MessageFns<PageRequest, "giftduels.shared.v1.PageRequest"> = {
  $type: "giftduels.shared.v1.PageRequest" as const,

  encode(message: PageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PageRequest {
    return {
      $type: PageRequest.$type,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: PageRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PageRequest>, I>>(base?: I): PageRequest {
    return PageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PageRequest>, I>>(object: I): PageRequest {
    const message = createBasePageRequest();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBasePageResponse(): PageResponse {
  return { $type: "giftduels.shared.v1.PageResponse", page: 0, pageSize: 0, total: 0, totalPages: 0 };
}

export const PageResponse: MessageFns<PageResponse, "giftduels.shared.v1.PageResponse"> = {
  $type: "giftduels.shared.v1.PageResponse" as const,

  encode(message: PageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.total !== 0) {
      writer.uint32(24).int32(message.total);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PageResponse {
    return {
      $type: PageResponse.$type,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: PageResponse): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PageResponse>, I>>(base?: I): PageResponse {
    return PageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PageResponse>, I>>(object: I): PageResponse {
    const message = createBasePageResponse();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.total = object.total ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseTelegramUserId(): TelegramUserId {
  return { $type: "giftduels.shared.v1.TelegramUserId", value: "0" };
}

export const TelegramUserId: MessageFns<TelegramUserId, "giftduels.shared.v1.TelegramUserId"> = {
  $type: "giftduels.shared.v1.TelegramUserId" as const,

  encode(message: TelegramUserId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "0") {
      writer.uint32(8).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelegramUserId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelegramUserId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelegramUserId {
    return { $type: TelegramUserId.$type, value: isSet(object.value) ? globalThis.String(object.value) : "0" };
  },

  toJSON(message: TelegramUserId): unknown {
    const obj: any = {};
    if (message.value !== "0") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TelegramUserId>, I>>(base?: I): TelegramUserId {
    return TelegramUserId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TelegramUserId>, I>>(object: I): TelegramUserId {
    const message = createBaseTelegramUserId();
    message.value = object.value ?? "0";
    return message;
  },
};

function createBaseUserId(): UserId {
  return { $type: "giftduels.shared.v1.UserId", value: "" };
}

export const UserId: MessageFns<UserId, "giftduels.shared.v1.UserId"> = {
  $type: "giftduels.shared.v1.UserId" as const,

  encode(message: UserId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserId {
    return { $type: UserId.$type, value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: UserId): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserId>, I>>(base?: I): UserId {
    return UserId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserId>, I>>(object: I): UserId {
    const message = createBaseUserId();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGiftId(): GiftId {
  return { $type: "giftduels.shared.v1.GiftId", value: "" };
}

export const GiftId: MessageFns<GiftId, "giftduels.shared.v1.GiftId"> = {
  $type: "giftduels.shared.v1.GiftId" as const,

  encode(message: GiftId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GiftId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGiftId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GiftId {
    return { $type: GiftId.$type, value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: GiftId): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GiftId>, I>>(base?: I): GiftId {
    return GiftId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GiftId>, I>>(object: I): GiftId {
    const message = createBaseGiftId();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGiftTelegramId(): GiftTelegramId {
  return { $type: "giftduels.shared.v1.GiftTelegramId", value: "0" };
}

export const GiftTelegramId: MessageFns<GiftTelegramId, "giftduels.shared.v1.GiftTelegramId"> = {
  $type: "giftduels.shared.v1.GiftTelegramId" as const,

  encode(message: GiftTelegramId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "0") {
      writer.uint32(8).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GiftTelegramId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGiftTelegramId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GiftTelegramId {
    return { $type: GiftTelegramId.$type, value: isSet(object.value) ? globalThis.String(object.value) : "0" };
  },

  toJSON(message: GiftTelegramId): unknown {
    const obj: any = {};
    if (message.value !== "0") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GiftTelegramId>, I>>(base?: I): GiftTelegramId {
    return GiftTelegramId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GiftTelegramId>, I>>(object: I): GiftTelegramId {
    const message = createBaseGiftTelegramId();
    message.value = object.value ?? "0";
    return message;
  },
};

function createBaseDuelId(): DuelId {
  return { $type: "giftduels.shared.v1.DuelId", value: "" };
}

export const DuelId: MessageFns<DuelId, "giftduels.shared.v1.DuelId"> = {
  $type: "giftduels.shared.v1.DuelId" as const,

  encode(message: DuelId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelId {
    return { $type: DuelId.$type, value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: DuelId): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelId>, I>>(base?: I): DuelId {
    return DuelId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelId>, I>>(object: I): DuelId {
    const message = createBaseDuelId();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseStarsAmount(): StarsAmount {
  return { $type: "giftduels.shared.v1.StarsAmount", value: 0 };
}

export const StarsAmount: MessageFns<StarsAmount, "giftduels.shared.v1.StarsAmount"> = {
  $type: "giftduels.shared.v1.StarsAmount" as const,

  encode(message: StarsAmount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StarsAmount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStarsAmount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StarsAmount {
    return { $type: StarsAmount.$type, value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: StarsAmount): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StarsAmount>, I>>(base?: I): StarsAmount {
    return StarsAmount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StarsAmount>, I>>(object: I): StarsAmount {
    const message = createBaseStarsAmount();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseTonAmount(): TonAmount {
  return { $type: "giftduels.shared.v1.TonAmount", value: 0 };
}

export const TonAmount: MessageFns<TonAmount, "giftduels.shared.v1.TonAmount"> = {
  $type: "giftduels.shared.v1.TonAmount" as const,

  encode(message: TonAmount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TonAmount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTonAmount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TonAmount {
    return { $type: TonAmount.$type, value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: TonAmount): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TonAmount>, I>>(base?: I): TonAmount {
    return TonAmount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TonAmount>, I>>(object: I): TonAmount {
    const message = createBaseTonAmount();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseTimeRangeFilter(): TimeRangeFilter {
  return { $type: "giftduels.shared.v1.TimeRangeFilter", from: undefined, to: undefined };
}

export const TimeRangeFilter: MessageFns<TimeRangeFilter, "giftduels.shared.v1.TimeRangeFilter"> = {
  $type: "giftduels.shared.v1.TimeRangeFilter" as const,

  encode(message: TimeRangeFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.from !== undefined) {
      Timestamp.encode(toTimestamp(message.from), writer.uint32(10).fork()).join();
    }
    if (message.to !== undefined) {
      Timestamp.encode(toTimestamp(message.to), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeRangeFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeRangeFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.from = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.to = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeRangeFilter {
    return {
      $type: TimeRangeFilter.$type,
      from: isSet(object.from) ? fromJsonTimestamp(object.from) : undefined,
      to: isSet(object.to) ? fromJsonTimestamp(object.to) : undefined,
    };
  },

  toJSON(message: TimeRangeFilter): unknown {
    const obj: any = {};
    if (message.from !== undefined) {
      obj.from = message.from.toISOString();
    }
    if (message.to !== undefined) {
      obj.to = message.to.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimeRangeFilter>, I>>(base?: I): TimeRangeFilter {
    return TimeRangeFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimeRangeFilter>, I>>(object: I): TimeRangeFilter {
    const message = createBaseTimeRangeFilter();
    message.from = object.from ?? undefined;
    message.to = object.to ?? undefined;
    return message;
  },
};

function createBaseNumericRangeFilter(): NumericRangeFilter {
  return { $type: "giftduels.shared.v1.NumericRangeFilter", minValue: "0", maxValue: "0" };
}

export const NumericRangeFilter: MessageFns<NumericRangeFilter, "giftduels.shared.v1.NumericRangeFilter"> = {
  $type: "giftduels.shared.v1.NumericRangeFilter" as const,

  encode(message: NumericRangeFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minValue !== "0") {
      writer.uint32(8).int64(message.minValue);
    }
    if (message.maxValue !== "0") {
      writer.uint32(16).int64(message.maxValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NumericRangeFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNumericRangeFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.minValue = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxValue = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NumericRangeFilter {
    return {
      $type: NumericRangeFilter.$type,
      minValue: isSet(object.minValue) ? globalThis.String(object.minValue) : "0",
      maxValue: isSet(object.maxValue) ? globalThis.String(object.maxValue) : "0",
    };
  },

  toJSON(message: NumericRangeFilter): unknown {
    const obj: any = {};
    if (message.minValue !== "0") {
      obj.minValue = message.minValue;
    }
    if (message.maxValue !== "0") {
      obj.maxValue = message.maxValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NumericRangeFilter>, I>>(base?: I): NumericRangeFilter {
    return NumericRangeFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NumericRangeFilter>, I>>(object: I): NumericRangeFilter {
    const message = createBaseNumericRangeFilter();
    message.minValue = object.minValue ?? "0";
    message.maxValue = object.maxValue ?? "0";
    return message;
  },
};

function createBaseSuccessResponse(): SuccessResponse {
  return { $type: "giftduels.shared.v1.SuccessResponse", success: false, message: "" };
}

export const SuccessResponse: MessageFns<SuccessResponse, "giftduels.shared.v1.SuccessResponse"> = {
  $type: "giftduels.shared.v1.SuccessResponse" as const,

  encode(message: SuccessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuccessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuccessResponse {
    return {
      $type: SuccessResponse.$type,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SuccessResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuccessResponse>, I>>(base?: I): SuccessResponse {
    return SuccessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuccessResponse>, I>>(object: I): SuccessResponse {
    const message = createBaseSuccessResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUserDisplayInfo(): UserDisplayInfo {
  return {
    $type: "giftduels.shared.v1.UserDisplayInfo",
    telegramUserId: undefined,
    displayName: "",
    photoUrl: "",
    username: "",
  };
}

export const UserDisplayInfo: MessageFns<UserDisplayInfo, "giftduels.shared.v1.UserDisplayInfo"> = {
  $type: "giftduels.shared.v1.UserDisplayInfo" as const,

  encode(message: UserDisplayInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramUserId !== undefined) {
      TelegramUserId.encode(message.telegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.photoUrl !== "") {
      writer.uint32(26).string(message.photoUrl);
    }
    if (message.username !== "") {
      writer.uint32(34).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDisplayInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDisplayInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.telegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.photoUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDisplayInfo {
    return {
      $type: UserDisplayInfo.$type,
      telegramUserId: isSet(object.telegramUserId) ? TelegramUserId.fromJSON(object.telegramUserId) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      photoUrl: isSet(object.photoUrl) ? globalThis.String(object.photoUrl) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: UserDisplayInfo): unknown {
    const obj: any = {};
    if (message.telegramUserId !== undefined) {
      obj.telegramUserId = TelegramUserId.toJSON(message.telegramUserId);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.photoUrl !== "") {
      obj.photoUrl = message.photoUrl;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserDisplayInfo>, I>>(base?: I): UserDisplayInfo {
    return UserDisplayInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserDisplayInfo>, I>>(object: I): UserDisplayInfo {
    const message = createBaseUserDisplayInfo();
    message.telegramUserId = (object.telegramUserId !== undefined && object.telegramUserId !== null)
      ? TelegramUserId.fromPartial(object.telegramUserId)
      : undefined;
    message.displayName = object.displayName ?? "";
    message.photoUrl = object.photoUrl ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
