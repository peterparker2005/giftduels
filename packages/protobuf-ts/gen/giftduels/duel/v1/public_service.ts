// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/duel/v1/public_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { PageRequest, PageResponse, SuccessResponse, TimeRangeFilter, TonAmount } from "../../shared/v1/common";
import {
  DiceRoll,
  DuelFilters,
  DuelInviteParams,
  DuelListItem,
  DuelParticipants,
  DuelSortOptions,
  DuelSummary,
  GameStatus,
  gameStatusFromJSON,
  gameStatusToJSON,
  RoundStatus,
  roundStatusFromJSON,
  roundStatusToJSON,
} from "./duel";

export interface DuelSort {
  $type: "giftduels.duel.v1.DuelSort";
  createdAt?: SortByCreatedAt | undefined;
  totalValue?:
    | SortByTotalValue
    | undefined;
  /** по убыванию? */
  descending: boolean;
}

/** пустой — просто сортировать по created_at */
export interface SortByCreatedAt {
  $type: "giftduels.duel.v1.SortByCreatedAt";
}

/** пустой — сортировать по общей ставке */
export interface SortByTotalValue {
  $type: "giftduels.duel.v1.SortByTotalValue";
}

export interface GetDuelsRequest {
  $type: "giftduels.duel.v1.GetDuelsRequest";
  /** Пейджинг */
  page: number;
  limit: number;
  /** Сортировка (по умолчанию, например, по времени создания) */
  sort:
    | DuelSort
    | undefined;
  /** Группа всех фильтров */
  filters: DuelFilters | undefined;
}

export interface GetDuelsResponse {
  $type: "giftduels.duel.v1.GetDuelsResponse";
  duels: DuelListSummary[];
  pagination: PageResponse | undefined;
}

export interface DuelListSummary {
  $type: "giftduels.duel.v1.DuelListSummary";
  duelId: string;
  status: GameStatus;
  participants: DuelParticipants | undefined;
  totalTonValue: TonAmount | undefined;
  createdAt: Date | undefined;
  completedAt: Date | undefined;
}

/** ===== CREATE DUEL ===== */
export interface CreateDuelRequest {
  $type: "giftduels.duel.v1.CreateDuelRequest";
  stakes: DuelStakeSource[];
  params: DuelInviteParams | undefined;
}

export interface CreateDuelResponse {
  $type: "giftduels.duel.v1.CreateDuelResponse";
  duelId: string;
  createdAt: Date | undefined;
  status: GameStatus;
  /** For invite-only duels */
  inviteLink: string;
}

export interface DuelStakeSource {
  $type: "giftduels.duel.v1.DuelStakeSource";
  giftId: string;
}

/** ===== JOIN DUEL ===== */
export interface JoinDuelRequest {
  $type: "giftduels.duel.v1.JoinDuelRequest";
  duelId: string;
  stakes: DuelStakeSource[];
}

export interface JoinDuelResponse {
  $type: "giftduels.duel.v1.JoinDuelResponse";
  joinedAt: Date | undefined;
  status: GameStatus;
  duelSummary: DuelSummary | undefined;
}

/** ===== ROLL DICE ===== */
export interface RollDiceRequest {
  $type: "giftduels.duel.v1.RollDiceRequest";
  duelId: string;
  /** Force manual roll even if auto-roll is enabled */
  forceManual: boolean;
}

export interface RollDiceResponse {
  $type: "giftduels.duel.v1.RollDiceResponse";
  roll: DiceRoll | undefined;
  duelStatus: GameStatus;
  currentRound: number;
  roundResult: RoundResult | undefined;
}

export interface RoundResult {
  $type: "giftduels.duel.v1.RoundResult";
  status: RoundStatus;
  winnerUserId: string;
  isFinalRound: boolean;
}

/** ===== GET DUEL ===== */
export interface GetDuelRequest {
  $type: "giftduels.duel.v1.GetDuelRequest";
  duelId: string;
}

export interface GetDuelResponse {
  $type: "giftduels.duel.v1.GetDuelResponse";
  duel: DuelSummary | undefined;
}

/** ===== LIST DUELS ===== */
export interface ListDuelsRequest {
  $type: "giftduels.duel.v1.ListDuelsRequest";
  filters: DuelFilters | undefined;
  sort: DuelSortOptions | undefined;
  pagination: PageRequest | undefined;
}

export interface ListDuelsResponse {
  $type: "giftduels.duel.v1.ListDuelsResponse";
  duels: DuelListItem[];
  pagination: PageResponse | undefined;
  stats: DuelStats | undefined;
}

export interface DuelStats {
  $type: "giftduels.duel.v1.DuelStats";
  totalActive: number;
  totalOpen: number;
  totalFinishedToday: number;
  totalStakesToday: TonAmount | undefined;
}

/** ===== CANCEL DUEL ===== */
export interface CancelDuelRequest {
  $type: "giftduels.duel.v1.CancelDuelRequest";
  duelId: string;
  reason: string;
}

export interface CancelDuelResponse {
  $type: "giftduels.duel.v1.CancelDuelResponse";
  result: SuccessResponse | undefined;
  cancelledAt: Date | undefined;
}

/** ===== DUEL STATISTICS ===== */
export interface GetDuelStatsRequest {
  $type: "giftduels.duel.v1.GetDuelStatsRequest";
  timeRange: TimeRangeFilter | undefined;
}

export interface GetDuelStatsResponse {
  $type: "giftduels.duel.v1.GetDuelStatsResponse";
  stats: DuelStats | undefined;
  statusStats: DuelStatsByStatus[];
}

export interface DuelStatsByStatus {
  $type: "giftduels.duel.v1.DuelStatsByStatus";
  status: GameStatus;
  count: number;
  totalValue: TonAmount | undefined;
}

function createBaseDuelSort(): DuelSort {
  return { $type: "giftduels.duel.v1.DuelSort", createdAt: undefined, totalValue: undefined, descending: false };
}

export const DuelSort: MessageFns<DuelSort, "giftduels.duel.v1.DuelSort"> = {
  $type: "giftduels.duel.v1.DuelSort" as const,

  encode(message: DuelSort, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createdAt !== undefined) {
      SortByCreatedAt.encode(message.createdAt, writer.uint32(10).fork()).join();
    }
    if (message.totalValue !== undefined) {
      SortByTotalValue.encode(message.totalValue, writer.uint32(18).fork()).join();
    }
    if (message.descending !== false) {
      writer.uint32(80).bool(message.descending);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelSort {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelSort();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createdAt = SortByCreatedAt.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.totalValue = SortByTotalValue.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.descending = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelSort {
    return {
      $type: DuelSort.$type,
      createdAt: isSet(object.createdAt) ? SortByCreatedAt.fromJSON(object.createdAt) : undefined,
      totalValue: isSet(object.totalValue) ? SortByTotalValue.fromJSON(object.totalValue) : undefined,
      descending: isSet(object.descending) ? globalThis.Boolean(object.descending) : false,
    };
  },

  toJSON(message: DuelSort): unknown {
    const obj: any = {};
    if (message.createdAt !== undefined) {
      obj.createdAt = SortByCreatedAt.toJSON(message.createdAt);
    }
    if (message.totalValue !== undefined) {
      obj.totalValue = SortByTotalValue.toJSON(message.totalValue);
    }
    if (message.descending !== false) {
      obj.descending = message.descending;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelSort>, I>>(base?: I): DuelSort {
    return DuelSort.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelSort>, I>>(object: I): DuelSort {
    const message = createBaseDuelSort();
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? SortByCreatedAt.fromPartial(object.createdAt)
      : undefined;
    message.totalValue = (object.totalValue !== undefined && object.totalValue !== null)
      ? SortByTotalValue.fromPartial(object.totalValue)
      : undefined;
    message.descending = object.descending ?? false;
    return message;
  },
};

function createBaseSortByCreatedAt(): SortByCreatedAt {
  return { $type: "giftduels.duel.v1.SortByCreatedAt" };
}

export const SortByCreatedAt: MessageFns<SortByCreatedAt, "giftduels.duel.v1.SortByCreatedAt"> = {
  $type: "giftduels.duel.v1.SortByCreatedAt" as const,

  encode(_: SortByCreatedAt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SortByCreatedAt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSortByCreatedAt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SortByCreatedAt {
    return { $type: SortByCreatedAt.$type };
  },

  toJSON(_: SortByCreatedAt): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SortByCreatedAt>, I>>(base?: I): SortByCreatedAt {
    return SortByCreatedAt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SortByCreatedAt>, I>>(_: I): SortByCreatedAt {
    const message = createBaseSortByCreatedAt();
    return message;
  },
};

function createBaseSortByTotalValue(): SortByTotalValue {
  return { $type: "giftduels.duel.v1.SortByTotalValue" };
}

export const SortByTotalValue: MessageFns<SortByTotalValue, "giftduels.duel.v1.SortByTotalValue"> = {
  $type: "giftduels.duel.v1.SortByTotalValue" as const,

  encode(_: SortByTotalValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SortByTotalValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSortByTotalValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SortByTotalValue {
    return { $type: SortByTotalValue.$type };
  },

  toJSON(_: SortByTotalValue): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SortByTotalValue>, I>>(base?: I): SortByTotalValue {
    return SortByTotalValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SortByTotalValue>, I>>(_: I): SortByTotalValue {
    const message = createBaseSortByTotalValue();
    return message;
  },
};

function createBaseGetDuelsRequest(): GetDuelsRequest {
  return { $type: "giftduels.duel.v1.GetDuelsRequest", page: 0, limit: 0, sort: undefined, filters: undefined };
}

export const GetDuelsRequest: MessageFns<GetDuelsRequest, "giftduels.duel.v1.GetDuelsRequest"> = {
  $type: "giftduels.duel.v1.GetDuelsRequest" as const,

  encode(message: GetDuelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).uint32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    if (message.sort !== undefined) {
      DuelSort.encode(message.sort, writer.uint32(26).fork()).join();
    }
    if (message.filters !== undefined) {
      DuelFilters.encode(message.filters, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDuelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDuelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sort = DuelSort.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters = DuelFilters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDuelsRequest {
    return {
      $type: GetDuelsRequest.$type,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      sort: isSet(object.sort) ? DuelSort.fromJSON(object.sort) : undefined,
      filters: isSet(object.filters) ? DuelFilters.fromJSON(object.filters) : undefined,
    };
  },

  toJSON(message: GetDuelsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.sort !== undefined) {
      obj.sort = DuelSort.toJSON(message.sort);
    }
    if (message.filters !== undefined) {
      obj.filters = DuelFilters.toJSON(message.filters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDuelsRequest>, I>>(base?: I): GetDuelsRequest {
    return GetDuelsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDuelsRequest>, I>>(object: I): GetDuelsRequest {
    const message = createBaseGetDuelsRequest();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.sort = (object.sort !== undefined && object.sort !== null) ? DuelSort.fromPartial(object.sort) : undefined;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? DuelFilters.fromPartial(object.filters)
      : undefined;
    return message;
  },
};

function createBaseGetDuelsResponse(): GetDuelsResponse {
  return { $type: "giftduels.duel.v1.GetDuelsResponse", duels: [], pagination: undefined };
}

export const GetDuelsResponse: MessageFns<GetDuelsResponse, "giftduels.duel.v1.GetDuelsResponse"> = {
  $type: "giftduels.duel.v1.GetDuelsResponse" as const,

  encode(message: GetDuelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.duels) {
      DuelListSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDuelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDuelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duels.push(DuelListSummary.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDuelsResponse {
    return {
      $type: GetDuelsResponse.$type,
      duels: globalThis.Array.isArray(object?.duels) ? object.duels.map((e: any) => DuelListSummary.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: GetDuelsResponse): unknown {
    const obj: any = {};
    if (message.duels?.length) {
      obj.duels = message.duels.map((e) => DuelListSummary.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDuelsResponse>, I>>(base?: I): GetDuelsResponse {
    return GetDuelsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDuelsResponse>, I>>(object: I): GetDuelsResponse {
    const message = createBaseGetDuelsResponse();
    message.duels = object.duels?.map((e) => DuelListSummary.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseDuelListSummary(): DuelListSummary {
  return {
    $type: "giftduels.duel.v1.DuelListSummary",
    duelId: "",
    status: 0,
    participants: undefined,
    totalTonValue: undefined,
    createdAt: undefined,
    completedAt: undefined,
  };
}

export const DuelListSummary: MessageFns<DuelListSummary, "giftduels.duel.v1.DuelListSummary"> = {
  $type: "giftduels.duel.v1.DuelListSummary" as const,

  encode(message: DuelListSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duelId !== "") {
      writer.uint32(10).string(message.duelId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.participants !== undefined) {
      DuelParticipants.encode(message.participants, writer.uint32(26).fork()).join();
    }
    if (message.totalTonValue !== undefined) {
      TonAmount.encode(message.totalTonValue, writer.uint32(34).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).join();
    }
    if (message.completedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.completedAt), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelListSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelListSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duelId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.participants = DuelParticipants.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.totalTonValue = TonAmount.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.completedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelListSummary {
    return {
      $type: DuelListSummary.$type,
      duelId: isSet(object.duelId) ? globalThis.String(object.duelId) : "",
      status: isSet(object.status) ? gameStatusFromJSON(object.status) : 0,
      participants: isSet(object.participants) ? DuelParticipants.fromJSON(object.participants) : undefined,
      totalTonValue: isSet(object.totalTonValue) ? TonAmount.fromJSON(object.totalTonValue) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      completedAt: isSet(object.completedAt) ? fromJsonTimestamp(object.completedAt) : undefined,
    };
  },

  toJSON(message: DuelListSummary): unknown {
    const obj: any = {};
    if (message.duelId !== "") {
      obj.duelId = message.duelId;
    }
    if (message.status !== 0) {
      obj.status = gameStatusToJSON(message.status);
    }
    if (message.participants !== undefined) {
      obj.participants = DuelParticipants.toJSON(message.participants);
    }
    if (message.totalTonValue !== undefined) {
      obj.totalTonValue = TonAmount.toJSON(message.totalTonValue);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.completedAt !== undefined) {
      obj.completedAt = message.completedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelListSummary>, I>>(base?: I): DuelListSummary {
    return DuelListSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelListSummary>, I>>(object: I): DuelListSummary {
    const message = createBaseDuelListSummary();
    message.duelId = object.duelId ?? "";
    message.status = object.status ?? 0;
    message.participants = (object.participants !== undefined && object.participants !== null)
      ? DuelParticipants.fromPartial(object.participants)
      : undefined;
    message.totalTonValue = (object.totalTonValue !== undefined && object.totalTonValue !== null)
      ? TonAmount.fromPartial(object.totalTonValue)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.completedAt = object.completedAt ?? undefined;
    return message;
  },
};

function createBaseCreateDuelRequest(): CreateDuelRequest {
  return { $type: "giftduels.duel.v1.CreateDuelRequest", stakes: [], params: undefined };
}

export const CreateDuelRequest: MessageFns<CreateDuelRequest, "giftduels.duel.v1.CreateDuelRequest"> = {
  $type: "giftduels.duel.v1.CreateDuelRequest" as const,

  encode(message: CreateDuelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.stakes) {
      DuelStakeSource.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.params !== undefined) {
      DuelInviteParams.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDuelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDuelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stakes.push(DuelStakeSource.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = DuelInviteParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDuelRequest {
    return {
      $type: CreateDuelRequest.$type,
      stakes: globalThis.Array.isArray(object?.stakes)
        ? object.stakes.map((e: any) => DuelStakeSource.fromJSON(e))
        : [],
      params: isSet(object.params) ? DuelInviteParams.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: CreateDuelRequest): unknown {
    const obj: any = {};
    if (message.stakes?.length) {
      obj.stakes = message.stakes.map((e) => DuelStakeSource.toJSON(e));
    }
    if (message.params !== undefined) {
      obj.params = DuelInviteParams.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateDuelRequest>, I>>(base?: I): CreateDuelRequest {
    return CreateDuelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateDuelRequest>, I>>(object: I): CreateDuelRequest {
    const message = createBaseCreateDuelRequest();
    message.stakes = object.stakes?.map((e) => DuelStakeSource.fromPartial(e)) || [];
    message.params = (object.params !== undefined && object.params !== null)
      ? DuelInviteParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseCreateDuelResponse(): CreateDuelResponse {
  return { $type: "giftduels.duel.v1.CreateDuelResponse", duelId: "", createdAt: undefined, status: 0, inviteLink: "" };
}

export const CreateDuelResponse: MessageFns<CreateDuelResponse, "giftduels.duel.v1.CreateDuelResponse"> = {
  $type: "giftduels.duel.v1.CreateDuelResponse" as const,

  encode(message: CreateDuelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duelId !== "") {
      writer.uint32(10).string(message.duelId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.inviteLink !== "") {
      writer.uint32(34).string(message.inviteLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDuelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDuelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duelId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inviteLink = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDuelResponse {
    return {
      $type: CreateDuelResponse.$type,
      duelId: isSet(object.duelId) ? globalThis.String(object.duelId) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      status: isSet(object.status) ? gameStatusFromJSON(object.status) : 0,
      inviteLink: isSet(object.inviteLink) ? globalThis.String(object.inviteLink) : "",
    };
  },

  toJSON(message: CreateDuelResponse): unknown {
    const obj: any = {};
    if (message.duelId !== "") {
      obj.duelId = message.duelId;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.status !== 0) {
      obj.status = gameStatusToJSON(message.status);
    }
    if (message.inviteLink !== "") {
      obj.inviteLink = message.inviteLink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateDuelResponse>, I>>(base?: I): CreateDuelResponse {
    return CreateDuelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateDuelResponse>, I>>(object: I): CreateDuelResponse {
    const message = createBaseCreateDuelResponse();
    message.duelId = object.duelId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.status = object.status ?? 0;
    message.inviteLink = object.inviteLink ?? "";
    return message;
  },
};

function createBaseDuelStakeSource(): DuelStakeSource {
  return { $type: "giftduels.duel.v1.DuelStakeSource", giftId: "" };
}

export const DuelStakeSource: MessageFns<DuelStakeSource, "giftduels.duel.v1.DuelStakeSource"> = {
  $type: "giftduels.duel.v1.DuelStakeSource" as const,

  encode(message: DuelStakeSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.giftId !== "") {
      writer.uint32(10).string(message.giftId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelStakeSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelStakeSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.giftId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelStakeSource {
    return { $type: DuelStakeSource.$type, giftId: isSet(object.giftId) ? globalThis.String(object.giftId) : "" };
  },

  toJSON(message: DuelStakeSource): unknown {
    const obj: any = {};
    if (message.giftId !== "") {
      obj.giftId = message.giftId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelStakeSource>, I>>(base?: I): DuelStakeSource {
    return DuelStakeSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelStakeSource>, I>>(object: I): DuelStakeSource {
    const message = createBaseDuelStakeSource();
    message.giftId = object.giftId ?? "";
    return message;
  },
};

function createBaseJoinDuelRequest(): JoinDuelRequest {
  return { $type: "giftduels.duel.v1.JoinDuelRequest", duelId: "", stakes: [] };
}

export const JoinDuelRequest: MessageFns<JoinDuelRequest, "giftduels.duel.v1.JoinDuelRequest"> = {
  $type: "giftduels.duel.v1.JoinDuelRequest" as const,

  encode(message: JoinDuelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duelId !== "") {
      writer.uint32(10).string(message.duelId);
    }
    for (const v of message.stakes) {
      DuelStakeSource.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinDuelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinDuelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duelId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stakes.push(DuelStakeSource.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinDuelRequest {
    return {
      $type: JoinDuelRequest.$type,
      duelId: isSet(object.duelId) ? globalThis.String(object.duelId) : "",
      stakes: globalThis.Array.isArray(object?.stakes)
        ? object.stakes.map((e: any) => DuelStakeSource.fromJSON(e))
        : [],
    };
  },

  toJSON(message: JoinDuelRequest): unknown {
    const obj: any = {};
    if (message.duelId !== "") {
      obj.duelId = message.duelId;
    }
    if (message.stakes?.length) {
      obj.stakes = message.stakes.map((e) => DuelStakeSource.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinDuelRequest>, I>>(base?: I): JoinDuelRequest {
    return JoinDuelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinDuelRequest>, I>>(object: I): JoinDuelRequest {
    const message = createBaseJoinDuelRequest();
    message.duelId = object.duelId ?? "";
    message.stakes = object.stakes?.map((e) => DuelStakeSource.fromPartial(e)) || [];
    return message;
  },
};

function createBaseJoinDuelResponse(): JoinDuelResponse {
  return { $type: "giftduels.duel.v1.JoinDuelResponse", joinedAt: undefined, status: 0, duelSummary: undefined };
}

export const JoinDuelResponse: MessageFns<JoinDuelResponse, "giftduels.duel.v1.JoinDuelResponse"> = {
  $type: "giftduels.duel.v1.JoinDuelResponse" as const,

  encode(message: JoinDuelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.joinedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.joinedAt), writer.uint32(10).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.duelSummary !== undefined) {
      DuelSummary.encode(message.duelSummary, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinDuelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinDuelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.joinedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.duelSummary = DuelSummary.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinDuelResponse {
    return {
      $type: JoinDuelResponse.$type,
      joinedAt: isSet(object.joinedAt) ? fromJsonTimestamp(object.joinedAt) : undefined,
      status: isSet(object.status) ? gameStatusFromJSON(object.status) : 0,
      duelSummary: isSet(object.duelSummary) ? DuelSummary.fromJSON(object.duelSummary) : undefined,
    };
  },

  toJSON(message: JoinDuelResponse): unknown {
    const obj: any = {};
    if (message.joinedAt !== undefined) {
      obj.joinedAt = message.joinedAt.toISOString();
    }
    if (message.status !== 0) {
      obj.status = gameStatusToJSON(message.status);
    }
    if (message.duelSummary !== undefined) {
      obj.duelSummary = DuelSummary.toJSON(message.duelSummary);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinDuelResponse>, I>>(base?: I): JoinDuelResponse {
    return JoinDuelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinDuelResponse>, I>>(object: I): JoinDuelResponse {
    const message = createBaseJoinDuelResponse();
    message.joinedAt = object.joinedAt ?? undefined;
    message.status = object.status ?? 0;
    message.duelSummary = (object.duelSummary !== undefined && object.duelSummary !== null)
      ? DuelSummary.fromPartial(object.duelSummary)
      : undefined;
    return message;
  },
};

function createBaseRollDiceRequest(): RollDiceRequest {
  return { $type: "giftduels.duel.v1.RollDiceRequest", duelId: "", forceManual: false };
}

export const RollDiceRequest: MessageFns<RollDiceRequest, "giftduels.duel.v1.RollDiceRequest"> = {
  $type: "giftduels.duel.v1.RollDiceRequest" as const,

  encode(message: RollDiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duelId !== "") {
      writer.uint32(10).string(message.duelId);
    }
    if (message.forceManual !== false) {
      writer.uint32(16).bool(message.forceManual);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollDiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollDiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duelId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.forceManual = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollDiceRequest {
    return {
      $type: RollDiceRequest.$type,
      duelId: isSet(object.duelId) ? globalThis.String(object.duelId) : "",
      forceManual: isSet(object.forceManual) ? globalThis.Boolean(object.forceManual) : false,
    };
  },

  toJSON(message: RollDiceRequest): unknown {
    const obj: any = {};
    if (message.duelId !== "") {
      obj.duelId = message.duelId;
    }
    if (message.forceManual !== false) {
      obj.forceManual = message.forceManual;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RollDiceRequest>, I>>(base?: I): RollDiceRequest {
    return RollDiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RollDiceRequest>, I>>(object: I): RollDiceRequest {
    const message = createBaseRollDiceRequest();
    message.duelId = object.duelId ?? "";
    message.forceManual = object.forceManual ?? false;
    return message;
  },
};

function createBaseRollDiceResponse(): RollDiceResponse {
  return {
    $type: "giftduels.duel.v1.RollDiceResponse",
    roll: undefined,
    duelStatus: 0,
    currentRound: 0,
    roundResult: undefined,
  };
}

export const RollDiceResponse: MessageFns<RollDiceResponse, "giftduels.duel.v1.RollDiceResponse"> = {
  $type: "giftduels.duel.v1.RollDiceResponse" as const,

  encode(message: RollDiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roll !== undefined) {
      DiceRoll.encode(message.roll, writer.uint32(10).fork()).join();
    }
    if (message.duelStatus !== 0) {
      writer.uint32(16).int32(message.duelStatus);
    }
    if (message.currentRound !== 0) {
      writer.uint32(24).int32(message.currentRound);
    }
    if (message.roundResult !== undefined) {
      RoundResult.encode(message.roundResult, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollDiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollDiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roll = DiceRoll.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duelStatus = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currentRound = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.roundResult = RoundResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollDiceResponse {
    return {
      $type: RollDiceResponse.$type,
      roll: isSet(object.roll) ? DiceRoll.fromJSON(object.roll) : undefined,
      duelStatus: isSet(object.duelStatus) ? gameStatusFromJSON(object.duelStatus) : 0,
      currentRound: isSet(object.currentRound) ? globalThis.Number(object.currentRound) : 0,
      roundResult: isSet(object.roundResult) ? RoundResult.fromJSON(object.roundResult) : undefined,
    };
  },

  toJSON(message: RollDiceResponse): unknown {
    const obj: any = {};
    if (message.roll !== undefined) {
      obj.roll = DiceRoll.toJSON(message.roll);
    }
    if (message.duelStatus !== 0) {
      obj.duelStatus = gameStatusToJSON(message.duelStatus);
    }
    if (message.currentRound !== 0) {
      obj.currentRound = Math.round(message.currentRound);
    }
    if (message.roundResult !== undefined) {
      obj.roundResult = RoundResult.toJSON(message.roundResult);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RollDiceResponse>, I>>(base?: I): RollDiceResponse {
    return RollDiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RollDiceResponse>, I>>(object: I): RollDiceResponse {
    const message = createBaseRollDiceResponse();
    message.roll = (object.roll !== undefined && object.roll !== null) ? DiceRoll.fromPartial(object.roll) : undefined;
    message.duelStatus = object.duelStatus ?? 0;
    message.currentRound = object.currentRound ?? 0;
    message.roundResult = (object.roundResult !== undefined && object.roundResult !== null)
      ? RoundResult.fromPartial(object.roundResult)
      : undefined;
    return message;
  },
};

function createBaseRoundResult(): RoundResult {
  return { $type: "giftduels.duel.v1.RoundResult", status: 0, winnerUserId: "0", isFinalRound: false };
}

export const RoundResult: MessageFns<RoundResult, "giftduels.duel.v1.RoundResult"> = {
  $type: "giftduels.duel.v1.RoundResult" as const,

  encode(message: RoundResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.winnerUserId !== "0") {
      writer.uint32(16).int64(message.winnerUserId);
    }
    if (message.isFinalRound !== false) {
      writer.uint32(24).bool(message.isFinalRound);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoundResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoundResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.winnerUserId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isFinalRound = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoundResult {
    return {
      $type: RoundResult.$type,
      status: isSet(object.status) ? roundStatusFromJSON(object.status) : 0,
      winnerUserId: isSet(object.winnerUserId) ? globalThis.String(object.winnerUserId) : "0",
      isFinalRound: isSet(object.isFinalRound) ? globalThis.Boolean(object.isFinalRound) : false,
    };
  },

  toJSON(message: RoundResult): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = roundStatusToJSON(message.status);
    }
    if (message.winnerUserId !== "0") {
      obj.winnerUserId = message.winnerUserId;
    }
    if (message.isFinalRound !== false) {
      obj.isFinalRound = message.isFinalRound;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoundResult>, I>>(base?: I): RoundResult {
    return RoundResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoundResult>, I>>(object: I): RoundResult {
    const message = createBaseRoundResult();
    message.status = object.status ?? 0;
    message.winnerUserId = object.winnerUserId ?? "0";
    message.isFinalRound = object.isFinalRound ?? false;
    return message;
  },
};

function createBaseGetDuelRequest(): GetDuelRequest {
  return { $type: "giftduels.duel.v1.GetDuelRequest", duelId: "" };
}

export const GetDuelRequest: MessageFns<GetDuelRequest, "giftduels.duel.v1.GetDuelRequest"> = {
  $type: "giftduels.duel.v1.GetDuelRequest" as const,

  encode(message: GetDuelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duelId !== "") {
      writer.uint32(10).string(message.duelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDuelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDuelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duelId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDuelRequest {
    return { $type: GetDuelRequest.$type, duelId: isSet(object.duelId) ? globalThis.String(object.duelId) : "" };
  },

  toJSON(message: GetDuelRequest): unknown {
    const obj: any = {};
    if (message.duelId !== "") {
      obj.duelId = message.duelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDuelRequest>, I>>(base?: I): GetDuelRequest {
    return GetDuelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDuelRequest>, I>>(object: I): GetDuelRequest {
    const message = createBaseGetDuelRequest();
    message.duelId = object.duelId ?? "";
    return message;
  },
};

function createBaseGetDuelResponse(): GetDuelResponse {
  return { $type: "giftduels.duel.v1.GetDuelResponse", duel: undefined };
}

export const GetDuelResponse: MessageFns<GetDuelResponse, "giftduels.duel.v1.GetDuelResponse"> = {
  $type: "giftduels.duel.v1.GetDuelResponse" as const,

  encode(message: GetDuelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duel !== undefined) {
      DuelSummary.encode(message.duel, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDuelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDuelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duel = DuelSummary.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDuelResponse {
    return { $type: GetDuelResponse.$type, duel: isSet(object.duel) ? DuelSummary.fromJSON(object.duel) : undefined };
  },

  toJSON(message: GetDuelResponse): unknown {
    const obj: any = {};
    if (message.duel !== undefined) {
      obj.duel = DuelSummary.toJSON(message.duel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDuelResponse>, I>>(base?: I): GetDuelResponse {
    return GetDuelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDuelResponse>, I>>(object: I): GetDuelResponse {
    const message = createBaseGetDuelResponse();
    message.duel = (object.duel !== undefined && object.duel !== null)
      ? DuelSummary.fromPartial(object.duel)
      : undefined;
    return message;
  },
};

function createBaseListDuelsRequest(): ListDuelsRequest {
  return { $type: "giftduels.duel.v1.ListDuelsRequest", filters: undefined, sort: undefined, pagination: undefined };
}

export const ListDuelsRequest: MessageFns<ListDuelsRequest, "giftduels.duel.v1.ListDuelsRequest"> = {
  $type: "giftduels.duel.v1.ListDuelsRequest" as const,

  encode(message: ListDuelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filters !== undefined) {
      DuelFilters.encode(message.filters, writer.uint32(10).fork()).join();
    }
    if (message.sort !== undefined) {
      DuelSortOptions.encode(message.sort, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDuelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDuelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters = DuelFilters.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sort = DuelSortOptions.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDuelsRequest {
    return {
      $type: ListDuelsRequest.$type,
      filters: isSet(object.filters) ? DuelFilters.fromJSON(object.filters) : undefined,
      sort: isSet(object.sort) ? DuelSortOptions.fromJSON(object.sort) : undefined,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListDuelsRequest): unknown {
    const obj: any = {};
    if (message.filters !== undefined) {
      obj.filters = DuelFilters.toJSON(message.filters);
    }
    if (message.sort !== undefined) {
      obj.sort = DuelSortOptions.toJSON(message.sort);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListDuelsRequest>, I>>(base?: I): ListDuelsRequest {
    return ListDuelsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListDuelsRequest>, I>>(object: I): ListDuelsRequest {
    const message = createBaseListDuelsRequest();
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? DuelFilters.fromPartial(object.filters)
      : undefined;
    message.sort = (object.sort !== undefined && object.sort !== null)
      ? DuelSortOptions.fromPartial(object.sort)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListDuelsResponse(): ListDuelsResponse {
  return { $type: "giftduels.duel.v1.ListDuelsResponse", duels: [], pagination: undefined, stats: undefined };
}

export const ListDuelsResponse: MessageFns<ListDuelsResponse, "giftduels.duel.v1.ListDuelsResponse"> = {
  $type: "giftduels.duel.v1.ListDuelsResponse" as const,

  encode(message: ListDuelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.duels) {
      DuelListItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    if (message.stats !== undefined) {
      DuelStats.encode(message.stats, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDuelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDuelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duels.push(DuelListItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stats = DuelStats.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDuelsResponse {
    return {
      $type: ListDuelsResponse.$type,
      duels: globalThis.Array.isArray(object?.duels) ? object.duels.map((e: any) => DuelListItem.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      stats: isSet(object.stats) ? DuelStats.fromJSON(object.stats) : undefined,
    };
  },

  toJSON(message: ListDuelsResponse): unknown {
    const obj: any = {};
    if (message.duels?.length) {
      obj.duels = message.duels.map((e) => DuelListItem.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.stats !== undefined) {
      obj.stats = DuelStats.toJSON(message.stats);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListDuelsResponse>, I>>(base?: I): ListDuelsResponse {
    return ListDuelsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListDuelsResponse>, I>>(object: I): ListDuelsResponse {
    const message = createBaseListDuelsResponse();
    message.duels = object.duels?.map((e) => DuelListItem.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? DuelStats.fromPartial(object.stats)
      : undefined;
    return message;
  },
};

function createBaseDuelStats(): DuelStats {
  return {
    $type: "giftduels.duel.v1.DuelStats",
    totalActive: 0,
    totalOpen: 0,
    totalFinishedToday: 0,
    totalStakesToday: undefined,
  };
}

export const DuelStats: MessageFns<DuelStats, "giftduels.duel.v1.DuelStats"> = {
  $type: "giftduels.duel.v1.DuelStats" as const,

  encode(message: DuelStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalActive !== 0) {
      writer.uint32(8).uint32(message.totalActive);
    }
    if (message.totalOpen !== 0) {
      writer.uint32(16).uint32(message.totalOpen);
    }
    if (message.totalFinishedToday !== 0) {
      writer.uint32(24).uint32(message.totalFinishedToday);
    }
    if (message.totalStakesToday !== undefined) {
      TonAmount.encode(message.totalStakesToday, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalActive = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalOpen = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalFinishedToday = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.totalStakesToday = TonAmount.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelStats {
    return {
      $type: DuelStats.$type,
      totalActive: isSet(object.totalActive) ? globalThis.Number(object.totalActive) : 0,
      totalOpen: isSet(object.totalOpen) ? globalThis.Number(object.totalOpen) : 0,
      totalFinishedToday: isSet(object.totalFinishedToday) ? globalThis.Number(object.totalFinishedToday) : 0,
      totalStakesToday: isSet(object.totalStakesToday) ? TonAmount.fromJSON(object.totalStakesToday) : undefined,
    };
  },

  toJSON(message: DuelStats): unknown {
    const obj: any = {};
    if (message.totalActive !== 0) {
      obj.totalActive = Math.round(message.totalActive);
    }
    if (message.totalOpen !== 0) {
      obj.totalOpen = Math.round(message.totalOpen);
    }
    if (message.totalFinishedToday !== 0) {
      obj.totalFinishedToday = Math.round(message.totalFinishedToday);
    }
    if (message.totalStakesToday !== undefined) {
      obj.totalStakesToday = TonAmount.toJSON(message.totalStakesToday);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelStats>, I>>(base?: I): DuelStats {
    return DuelStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelStats>, I>>(object: I): DuelStats {
    const message = createBaseDuelStats();
    message.totalActive = object.totalActive ?? 0;
    message.totalOpen = object.totalOpen ?? 0;
    message.totalFinishedToday = object.totalFinishedToday ?? 0;
    message.totalStakesToday = (object.totalStakesToday !== undefined && object.totalStakesToday !== null)
      ? TonAmount.fromPartial(object.totalStakesToday)
      : undefined;
    return message;
  },
};

function createBaseCancelDuelRequest(): CancelDuelRequest {
  return { $type: "giftduels.duel.v1.CancelDuelRequest", duelId: "", reason: "" };
}

export const CancelDuelRequest: MessageFns<CancelDuelRequest, "giftduels.duel.v1.CancelDuelRequest"> = {
  $type: "giftduels.duel.v1.CancelDuelRequest" as const,

  encode(message: CancelDuelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duelId !== "") {
      writer.uint32(10).string(message.duelId);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelDuelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelDuelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duelId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelDuelRequest {
    return {
      $type: CancelDuelRequest.$type,
      duelId: isSet(object.duelId) ? globalThis.String(object.duelId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: CancelDuelRequest): unknown {
    const obj: any = {};
    if (message.duelId !== "") {
      obj.duelId = message.duelId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelDuelRequest>, I>>(base?: I): CancelDuelRequest {
    return CancelDuelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelDuelRequest>, I>>(object: I): CancelDuelRequest {
    const message = createBaseCancelDuelRequest();
    message.duelId = object.duelId ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseCancelDuelResponse(): CancelDuelResponse {
  return { $type: "giftduels.duel.v1.CancelDuelResponse", result: undefined, cancelledAt: undefined };
}

export const CancelDuelResponse: MessageFns<CancelDuelResponse, "giftduels.duel.v1.CancelDuelResponse"> = {
  $type: "giftduels.duel.v1.CancelDuelResponse" as const,

  encode(message: CancelDuelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      SuccessResponse.encode(message.result, writer.uint32(10).fork()).join();
    }
    if (message.cancelledAt !== undefined) {
      Timestamp.encode(toTimestamp(message.cancelledAt), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelDuelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelDuelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = SuccessResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cancelledAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelDuelResponse {
    return {
      $type: CancelDuelResponse.$type,
      result: isSet(object.result) ? SuccessResponse.fromJSON(object.result) : undefined,
      cancelledAt: isSet(object.cancelledAt) ? fromJsonTimestamp(object.cancelledAt) : undefined,
    };
  },

  toJSON(message: CancelDuelResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = SuccessResponse.toJSON(message.result);
    }
    if (message.cancelledAt !== undefined) {
      obj.cancelledAt = message.cancelledAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelDuelResponse>, I>>(base?: I): CancelDuelResponse {
    return CancelDuelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelDuelResponse>, I>>(object: I): CancelDuelResponse {
    const message = createBaseCancelDuelResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? SuccessResponse.fromPartial(object.result)
      : undefined;
    message.cancelledAt = object.cancelledAt ?? undefined;
    return message;
  },
};

function createBaseGetDuelStatsRequest(): GetDuelStatsRequest {
  return { $type: "giftduels.duel.v1.GetDuelStatsRequest", timeRange: undefined };
}

export const GetDuelStatsRequest: MessageFns<GetDuelStatsRequest, "giftduels.duel.v1.GetDuelStatsRequest"> = {
  $type: "giftduels.duel.v1.GetDuelStatsRequest" as const,

  encode(message: GetDuelStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeRange !== undefined) {
      TimeRangeFilter.encode(message.timeRange, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDuelStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDuelStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timeRange = TimeRangeFilter.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDuelStatsRequest {
    return {
      $type: GetDuelStatsRequest.$type,
      timeRange: isSet(object.timeRange) ? TimeRangeFilter.fromJSON(object.timeRange) : undefined,
    };
  },

  toJSON(message: GetDuelStatsRequest): unknown {
    const obj: any = {};
    if (message.timeRange !== undefined) {
      obj.timeRange = TimeRangeFilter.toJSON(message.timeRange);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDuelStatsRequest>, I>>(base?: I): GetDuelStatsRequest {
    return GetDuelStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDuelStatsRequest>, I>>(object: I): GetDuelStatsRequest {
    const message = createBaseGetDuelStatsRequest();
    message.timeRange = (object.timeRange !== undefined && object.timeRange !== null)
      ? TimeRangeFilter.fromPartial(object.timeRange)
      : undefined;
    return message;
  },
};

function createBaseGetDuelStatsResponse(): GetDuelStatsResponse {
  return { $type: "giftduels.duel.v1.GetDuelStatsResponse", stats: undefined, statusStats: [] };
}

export const GetDuelStatsResponse: MessageFns<GetDuelStatsResponse, "giftduels.duel.v1.GetDuelStatsResponse"> = {
  $type: "giftduels.duel.v1.GetDuelStatsResponse" as const,

  encode(message: GetDuelStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stats !== undefined) {
      DuelStats.encode(message.stats, writer.uint32(10).fork()).join();
    }
    for (const v of message.statusStats) {
      DuelStatsByStatus.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDuelStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDuelStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stats = DuelStats.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.statusStats.push(DuelStatsByStatus.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDuelStatsResponse {
    return {
      $type: GetDuelStatsResponse.$type,
      stats: isSet(object.stats) ? DuelStats.fromJSON(object.stats) : undefined,
      statusStats: globalThis.Array.isArray(object?.statusStats)
        ? object.statusStats.map((e: any) => DuelStatsByStatus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetDuelStatsResponse): unknown {
    const obj: any = {};
    if (message.stats !== undefined) {
      obj.stats = DuelStats.toJSON(message.stats);
    }
    if (message.statusStats?.length) {
      obj.statusStats = message.statusStats.map((e) => DuelStatsByStatus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDuelStatsResponse>, I>>(base?: I): GetDuelStatsResponse {
    return GetDuelStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDuelStatsResponse>, I>>(object: I): GetDuelStatsResponse {
    const message = createBaseGetDuelStatsResponse();
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? DuelStats.fromPartial(object.stats)
      : undefined;
    message.statusStats = object.statusStats?.map((e) => DuelStatsByStatus.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDuelStatsByStatus(): DuelStatsByStatus {
  return { $type: "giftduels.duel.v1.DuelStatsByStatus", status: 0, count: 0, totalValue: undefined };
}

export const DuelStatsByStatus: MessageFns<DuelStatsByStatus, "giftduels.duel.v1.DuelStatsByStatus"> = {
  $type: "giftduels.duel.v1.DuelStatsByStatus" as const,

  encode(message: DuelStatsByStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint32(message.count);
    }
    if (message.totalValue !== undefined) {
      TonAmount.encode(message.totalValue, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelStatsByStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelStatsByStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.totalValue = TonAmount.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelStatsByStatus {
    return {
      $type: DuelStatsByStatus.$type,
      status: isSet(object.status) ? gameStatusFromJSON(object.status) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      totalValue: isSet(object.totalValue) ? TonAmount.fromJSON(object.totalValue) : undefined,
    };
  },

  toJSON(message: DuelStatsByStatus): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = gameStatusToJSON(message.status);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.totalValue !== undefined) {
      obj.totalValue = TonAmount.toJSON(message.totalValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelStatsByStatus>, I>>(base?: I): DuelStatsByStatus {
    return DuelStatsByStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelStatsByStatus>, I>>(object: I): DuelStatsByStatus {
    const message = createBaseDuelStatsByStatus();
    message.status = object.status ?? 0;
    message.count = object.count ?? 0;
    message.totalValue = (object.totalValue !== undefined && object.totalValue !== null)
      ? TonAmount.fromPartial(object.totalValue)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
