// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: giftduels/duel/v1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { TelegramUserId } from "../../shared/v1/common";
import { DiceRoll } from "./duel";

export interface DuelEvent {
  $type: "giftduels.duel.v1.DuelEvent";
  duelId: string;
  created?: DuelCreated | undefined;
  joined?: DuelJoined | undefined;
  roundStarted?: RoundStarted | undefined;
  rollResult?: RollResult | undefined;
  roundTied?: RoundTied | undefined;
  finished?: DuelFinished | undefined;
  timeout?: AutoRollTimeout | undefined;
  started?: DuelStarted | undefined;
}

export interface DuelCreated {
  $type: "giftduels.duel.v1.DuelCreated";
  creatorTelegramUserId: TelegramUserId | undefined;
  at: Date | undefined;
}

export interface DuelJoined {
  $type: "giftduels.duel.v1.DuelJoined";
  opponentTelegramUserId: TelegramUserId | undefined;
  at: Date | undefined;
}

export interface RoundStarted {
  $type: "giftduels.duel.v1.RoundStarted";
  roundNumber: number;
  at: Date | undefined;
}

export interface RollResult {
  $type: "giftduels.duel.v1.RollResult";
  telegramUserId: TelegramUserId | undefined;
  value: number;
  manual: boolean;
  at: Date | undefined;
}

export interface RoundTied {
  $type: "giftduels.duel.v1.RoundTied";
  /** если выпало равное значение */
  roundNumber: number;
  at: Date | undefined;
}

export interface AutoRollTimeout {
  $type: "giftduels.duel.v1.AutoRollTimeout";
  /** у кого истёк таймаут */
  telegramUserId: TelegramUserId | undefined;
  at: Date | undefined;
}

export interface DuelStarted {
  $type: "giftduels.duel.v1.DuelStarted";
  creatorTelegramUserId: TelegramUserId | undefined;
  opponentTelegramUserId: TelegramUserId | undefined;
  at: Date | undefined;
}

export interface DuelFinished {
  $type: "giftduels.duel.v1.DuelFinished";
  winnerTelegramUserId: TelegramUserId | undefined;
  allRolls: DiceRoll[];
  at: Date | undefined;
}

function createBaseDuelEvent(): DuelEvent {
  return {
    $type: "giftduels.duel.v1.DuelEvent",
    duelId: "",
    created: undefined,
    joined: undefined,
    roundStarted: undefined,
    rollResult: undefined,
    roundTied: undefined,
    finished: undefined,
    timeout: undefined,
    started: undefined,
  };
}

export const DuelEvent: MessageFns<DuelEvent, "giftduels.duel.v1.DuelEvent"> = {
  $type: "giftduels.duel.v1.DuelEvent" as const,

  encode(message: DuelEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duelId !== "") {
      writer.uint32(10).string(message.duelId);
    }
    if (message.created !== undefined) {
      DuelCreated.encode(message.created, writer.uint32(18).fork()).join();
    }
    if (message.joined !== undefined) {
      DuelJoined.encode(message.joined, writer.uint32(26).fork()).join();
    }
    if (message.roundStarted !== undefined) {
      RoundStarted.encode(message.roundStarted, writer.uint32(34).fork()).join();
    }
    if (message.rollResult !== undefined) {
      RollResult.encode(message.rollResult, writer.uint32(42).fork()).join();
    }
    if (message.roundTied !== undefined) {
      RoundTied.encode(message.roundTied, writer.uint32(50).fork()).join();
    }
    if (message.finished !== undefined) {
      DuelFinished.encode(message.finished, writer.uint32(58).fork()).join();
    }
    if (message.timeout !== undefined) {
      AutoRollTimeout.encode(message.timeout, writer.uint32(66).fork()).join();
    }
    if (message.started !== undefined) {
      DuelStarted.encode(message.started, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.duelId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.created = DuelCreated.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.joined = DuelJoined.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.roundStarted = RoundStarted.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rollResult = RollResult.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.roundTied = RoundTied.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.finished = DuelFinished.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.timeout = AutoRollTimeout.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.started = DuelStarted.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelEvent {
    return {
      $type: DuelEvent.$type,
      duelId: isSet(object.duelId) ? globalThis.String(object.duelId) : "",
      created: isSet(object.created) ? DuelCreated.fromJSON(object.created) : undefined,
      joined: isSet(object.joined) ? DuelJoined.fromJSON(object.joined) : undefined,
      roundStarted: isSet(object.roundStarted) ? RoundStarted.fromJSON(object.roundStarted) : undefined,
      rollResult: isSet(object.rollResult) ? RollResult.fromJSON(object.rollResult) : undefined,
      roundTied: isSet(object.roundTied) ? RoundTied.fromJSON(object.roundTied) : undefined,
      finished: isSet(object.finished) ? DuelFinished.fromJSON(object.finished) : undefined,
      timeout: isSet(object.timeout) ? AutoRollTimeout.fromJSON(object.timeout) : undefined,
      started: isSet(object.started) ? DuelStarted.fromJSON(object.started) : undefined,
    };
  },

  toJSON(message: DuelEvent): unknown {
    const obj: any = {};
    if (message.duelId !== "") {
      obj.duelId = message.duelId;
    }
    if (message.created !== undefined) {
      obj.created = DuelCreated.toJSON(message.created);
    }
    if (message.joined !== undefined) {
      obj.joined = DuelJoined.toJSON(message.joined);
    }
    if (message.roundStarted !== undefined) {
      obj.roundStarted = RoundStarted.toJSON(message.roundStarted);
    }
    if (message.rollResult !== undefined) {
      obj.rollResult = RollResult.toJSON(message.rollResult);
    }
    if (message.roundTied !== undefined) {
      obj.roundTied = RoundTied.toJSON(message.roundTied);
    }
    if (message.finished !== undefined) {
      obj.finished = DuelFinished.toJSON(message.finished);
    }
    if (message.timeout !== undefined) {
      obj.timeout = AutoRollTimeout.toJSON(message.timeout);
    }
    if (message.started !== undefined) {
      obj.started = DuelStarted.toJSON(message.started);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelEvent>, I>>(base?: I): DuelEvent {
    return DuelEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelEvent>, I>>(object: I): DuelEvent {
    const message = createBaseDuelEvent();
    message.duelId = object.duelId ?? "";
    message.created = (object.created !== undefined && object.created !== null)
      ? DuelCreated.fromPartial(object.created)
      : undefined;
    message.joined = (object.joined !== undefined && object.joined !== null)
      ? DuelJoined.fromPartial(object.joined)
      : undefined;
    message.roundStarted = (object.roundStarted !== undefined && object.roundStarted !== null)
      ? RoundStarted.fromPartial(object.roundStarted)
      : undefined;
    message.rollResult = (object.rollResult !== undefined && object.rollResult !== null)
      ? RollResult.fromPartial(object.rollResult)
      : undefined;
    message.roundTied = (object.roundTied !== undefined && object.roundTied !== null)
      ? RoundTied.fromPartial(object.roundTied)
      : undefined;
    message.finished = (object.finished !== undefined && object.finished !== null)
      ? DuelFinished.fromPartial(object.finished)
      : undefined;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? AutoRollTimeout.fromPartial(object.timeout)
      : undefined;
    message.started = (object.started !== undefined && object.started !== null)
      ? DuelStarted.fromPartial(object.started)
      : undefined;
    return message;
  },
};

function createBaseDuelCreated(): DuelCreated {
  return { $type: "giftduels.duel.v1.DuelCreated", creatorTelegramUserId: undefined, at: undefined };
}

export const DuelCreated: MessageFns<DuelCreated, "giftduels.duel.v1.DuelCreated"> = {
  $type: "giftduels.duel.v1.DuelCreated" as const,

  encode(message: DuelCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creatorTelegramUserId !== undefined) {
      TelegramUserId.encode(message.creatorTelegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creatorTelegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelCreated {
    return {
      $type: DuelCreated.$type,
      creatorTelegramUserId: isSet(object.creatorTelegramUserId)
        ? TelegramUserId.fromJSON(object.creatorTelegramUserId)
        : undefined,
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
    };
  },

  toJSON(message: DuelCreated): unknown {
    const obj: any = {};
    if (message.creatorTelegramUserId !== undefined) {
      obj.creatorTelegramUserId = TelegramUserId.toJSON(message.creatorTelegramUserId);
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelCreated>, I>>(base?: I): DuelCreated {
    return DuelCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelCreated>, I>>(object: I): DuelCreated {
    const message = createBaseDuelCreated();
    message.creatorTelegramUserId =
      (object.creatorTelegramUserId !== undefined && object.creatorTelegramUserId !== null)
        ? TelegramUserId.fromPartial(object.creatorTelegramUserId)
        : undefined;
    message.at = object.at ?? undefined;
    return message;
  },
};

function createBaseDuelJoined(): DuelJoined {
  return { $type: "giftduels.duel.v1.DuelJoined", opponentTelegramUserId: undefined, at: undefined };
}

export const DuelJoined: MessageFns<DuelJoined, "giftduels.duel.v1.DuelJoined"> = {
  $type: "giftduels.duel.v1.DuelJoined" as const,

  encode(message: DuelJoined, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.opponentTelegramUserId !== undefined) {
      TelegramUserId.encode(message.opponentTelegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelJoined {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelJoined();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.opponentTelegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelJoined {
    return {
      $type: DuelJoined.$type,
      opponentTelegramUserId: isSet(object.opponentTelegramUserId)
        ? TelegramUserId.fromJSON(object.opponentTelegramUserId)
        : undefined,
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
    };
  },

  toJSON(message: DuelJoined): unknown {
    const obj: any = {};
    if (message.opponentTelegramUserId !== undefined) {
      obj.opponentTelegramUserId = TelegramUserId.toJSON(message.opponentTelegramUserId);
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelJoined>, I>>(base?: I): DuelJoined {
    return DuelJoined.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelJoined>, I>>(object: I): DuelJoined {
    const message = createBaseDuelJoined();
    message.opponentTelegramUserId =
      (object.opponentTelegramUserId !== undefined && object.opponentTelegramUserId !== null)
        ? TelegramUserId.fromPartial(object.opponentTelegramUserId)
        : undefined;
    message.at = object.at ?? undefined;
    return message;
  },
};

function createBaseRoundStarted(): RoundStarted {
  return { $type: "giftduels.duel.v1.RoundStarted", roundNumber: 0, at: undefined };
}

export const RoundStarted: MessageFns<RoundStarted, "giftduels.duel.v1.RoundStarted"> = {
  $type: "giftduels.duel.v1.RoundStarted" as const,

  encode(message: RoundStarted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roundNumber !== 0) {
      writer.uint32(8).int32(message.roundNumber);
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoundStarted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoundStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roundNumber = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoundStarted {
    return {
      $type: RoundStarted.$type,
      roundNumber: isSet(object.roundNumber) ? globalThis.Number(object.roundNumber) : 0,
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
    };
  },

  toJSON(message: RoundStarted): unknown {
    const obj: any = {};
    if (message.roundNumber !== 0) {
      obj.roundNumber = Math.round(message.roundNumber);
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoundStarted>, I>>(base?: I): RoundStarted {
    return RoundStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoundStarted>, I>>(object: I): RoundStarted {
    const message = createBaseRoundStarted();
    message.roundNumber = object.roundNumber ?? 0;
    message.at = object.at ?? undefined;
    return message;
  },
};

function createBaseRollResult(): RollResult {
  return { $type: "giftduels.duel.v1.RollResult", telegramUserId: undefined, value: 0, manual: false, at: undefined };
}

export const RollResult: MessageFns<RollResult, "giftduels.duel.v1.RollResult"> = {
  $type: "giftduels.duel.v1.RollResult" as const,

  encode(message: RollResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramUserId !== undefined) {
      TelegramUserId.encode(message.telegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    if (message.manual !== false) {
      writer.uint32(24).bool(message.manual);
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.telegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.manual = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollResult {
    return {
      $type: RollResult.$type,
      telegramUserId: isSet(object.telegramUserId) ? TelegramUserId.fromJSON(object.telegramUserId) : undefined,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      manual: isSet(object.manual) ? globalThis.Boolean(object.manual) : false,
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
    };
  },

  toJSON(message: RollResult): unknown {
    const obj: any = {};
    if (message.telegramUserId !== undefined) {
      obj.telegramUserId = TelegramUserId.toJSON(message.telegramUserId);
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    if (message.manual !== false) {
      obj.manual = message.manual;
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RollResult>, I>>(base?: I): RollResult {
    return RollResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RollResult>, I>>(object: I): RollResult {
    const message = createBaseRollResult();
    message.telegramUserId = (object.telegramUserId !== undefined && object.telegramUserId !== null)
      ? TelegramUserId.fromPartial(object.telegramUserId)
      : undefined;
    message.value = object.value ?? 0;
    message.manual = object.manual ?? false;
    message.at = object.at ?? undefined;
    return message;
  },
};

function createBaseRoundTied(): RoundTied {
  return { $type: "giftduels.duel.v1.RoundTied", roundNumber: 0, at: undefined };
}

export const RoundTied: MessageFns<RoundTied, "giftduels.duel.v1.RoundTied"> = {
  $type: "giftduels.duel.v1.RoundTied" as const,

  encode(message: RoundTied, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roundNumber !== 0) {
      writer.uint32(8).int32(message.roundNumber);
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoundTied {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoundTied();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roundNumber = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoundTied {
    return {
      $type: RoundTied.$type,
      roundNumber: isSet(object.roundNumber) ? globalThis.Number(object.roundNumber) : 0,
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
    };
  },

  toJSON(message: RoundTied): unknown {
    const obj: any = {};
    if (message.roundNumber !== 0) {
      obj.roundNumber = Math.round(message.roundNumber);
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoundTied>, I>>(base?: I): RoundTied {
    return RoundTied.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoundTied>, I>>(object: I): RoundTied {
    const message = createBaseRoundTied();
    message.roundNumber = object.roundNumber ?? 0;
    message.at = object.at ?? undefined;
    return message;
  },
};

function createBaseAutoRollTimeout(): AutoRollTimeout {
  return { $type: "giftduels.duel.v1.AutoRollTimeout", telegramUserId: undefined, at: undefined };
}

export const AutoRollTimeout: MessageFns<AutoRollTimeout, "giftduels.duel.v1.AutoRollTimeout"> = {
  $type: "giftduels.duel.v1.AutoRollTimeout" as const,

  encode(message: AutoRollTimeout, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramUserId !== undefined) {
      TelegramUserId.encode(message.telegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoRollTimeout {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoRollTimeout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.telegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoRollTimeout {
    return {
      $type: AutoRollTimeout.$type,
      telegramUserId: isSet(object.telegramUserId) ? TelegramUserId.fromJSON(object.telegramUserId) : undefined,
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
    };
  },

  toJSON(message: AutoRollTimeout): unknown {
    const obj: any = {};
    if (message.telegramUserId !== undefined) {
      obj.telegramUserId = TelegramUserId.toJSON(message.telegramUserId);
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutoRollTimeout>, I>>(base?: I): AutoRollTimeout {
    return AutoRollTimeout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutoRollTimeout>, I>>(object: I): AutoRollTimeout {
    const message = createBaseAutoRollTimeout();
    message.telegramUserId = (object.telegramUserId !== undefined && object.telegramUserId !== null)
      ? TelegramUserId.fromPartial(object.telegramUserId)
      : undefined;
    message.at = object.at ?? undefined;
    return message;
  },
};

function createBaseDuelStarted(): DuelStarted {
  return {
    $type: "giftduels.duel.v1.DuelStarted",
    creatorTelegramUserId: undefined,
    opponentTelegramUserId: undefined,
    at: undefined,
  };
}

export const DuelStarted: MessageFns<DuelStarted, "giftduels.duel.v1.DuelStarted"> = {
  $type: "giftduels.duel.v1.DuelStarted" as const,

  encode(message: DuelStarted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creatorTelegramUserId !== undefined) {
      TelegramUserId.encode(message.creatorTelegramUserId, writer.uint32(10).fork()).join();
    }
    if (message.opponentTelegramUserId !== undefined) {
      TelegramUserId.encode(message.opponentTelegramUserId, writer.uint32(18).fork()).join();
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelStarted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creatorTelegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.opponentTelegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelStarted {
    return {
      $type: DuelStarted.$type,
      creatorTelegramUserId: isSet(object.creatorTelegramUserId)
        ? TelegramUserId.fromJSON(object.creatorTelegramUserId)
        : undefined,
      opponentTelegramUserId: isSet(object.opponentTelegramUserId)
        ? TelegramUserId.fromJSON(object.opponentTelegramUserId)
        : undefined,
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
    };
  },

  toJSON(message: DuelStarted): unknown {
    const obj: any = {};
    if (message.creatorTelegramUserId !== undefined) {
      obj.creatorTelegramUserId = TelegramUserId.toJSON(message.creatorTelegramUserId);
    }
    if (message.opponentTelegramUserId !== undefined) {
      obj.opponentTelegramUserId = TelegramUserId.toJSON(message.opponentTelegramUserId);
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelStarted>, I>>(base?: I): DuelStarted {
    return DuelStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelStarted>, I>>(object: I): DuelStarted {
    const message = createBaseDuelStarted();
    message.creatorTelegramUserId =
      (object.creatorTelegramUserId !== undefined && object.creatorTelegramUserId !== null)
        ? TelegramUserId.fromPartial(object.creatorTelegramUserId)
        : undefined;
    message.opponentTelegramUserId =
      (object.opponentTelegramUserId !== undefined && object.opponentTelegramUserId !== null)
        ? TelegramUserId.fromPartial(object.opponentTelegramUserId)
        : undefined;
    message.at = object.at ?? undefined;
    return message;
  },
};

function createBaseDuelFinished(): DuelFinished {
  return { $type: "giftduels.duel.v1.DuelFinished", winnerTelegramUserId: undefined, allRolls: [], at: undefined };
}

export const DuelFinished: MessageFns<DuelFinished, "giftduels.duel.v1.DuelFinished"> = {
  $type: "giftduels.duel.v1.DuelFinished" as const,

  encode(message: DuelFinished, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.winnerTelegramUserId !== undefined) {
      TelegramUserId.encode(message.winnerTelegramUserId, writer.uint32(10).fork()).join();
    }
    for (const v of message.allRolls) {
      DiceRoll.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.at !== undefined) {
      Timestamp.encode(toTimestamp(message.at), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DuelFinished {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDuelFinished();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.winnerTelegramUserId = TelegramUserId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.allRolls.push(DiceRoll.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DuelFinished {
    return {
      $type: DuelFinished.$type,
      winnerTelegramUserId: isSet(object.winnerTelegramUserId)
        ? TelegramUserId.fromJSON(object.winnerTelegramUserId)
        : undefined,
      allRolls: globalThis.Array.isArray(object?.allRolls) ? object.allRolls.map((e: any) => DiceRoll.fromJSON(e)) : [],
      at: isSet(object.at) ? fromJsonTimestamp(object.at) : undefined,
    };
  },

  toJSON(message: DuelFinished): unknown {
    const obj: any = {};
    if (message.winnerTelegramUserId !== undefined) {
      obj.winnerTelegramUserId = TelegramUserId.toJSON(message.winnerTelegramUserId);
    }
    if (message.allRolls?.length) {
      obj.allRolls = message.allRolls.map((e) => DiceRoll.toJSON(e));
    }
    if (message.at !== undefined) {
      obj.at = message.at.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DuelFinished>, I>>(base?: I): DuelFinished {
    return DuelFinished.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DuelFinished>, I>>(object: I): DuelFinished {
    const message = createBaseDuelFinished();
    message.winnerTelegramUserId = (object.winnerTelegramUserId !== undefined && object.winnerTelegramUserId !== null)
      ? TelegramUserId.fromPartial(object.winnerTelegramUserId)
      : undefined;
    message.allRolls = object.allRolls?.map((e) => DiceRoll.fromPartial(e)) || [];
    message.at = object.at ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
