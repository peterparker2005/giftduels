// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: giftduels/errors/v1/errors.proto

package errorsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCategory int32

const (
	ErrorCategory_ERROR_CATEGORY_UNSPECIFIED      ErrorCategory = 0
	ErrorCategory_ERROR_CATEGORY_VALIDATION       ErrorCategory = 1
	ErrorCategory_ERROR_CATEGORY_AUTHENTICATION   ErrorCategory = 2
	ErrorCategory_ERROR_CATEGORY_AUTHORIZATION    ErrorCategory = 3
	ErrorCategory_ERROR_CATEGORY_NOT_FOUND        ErrorCategory = 4
	ErrorCategory_ERROR_CATEGORY_CONFLICT         ErrorCategory = 5
	ErrorCategory_ERROR_CATEGORY_RESOURCE         ErrorCategory = 6
	ErrorCategory_ERROR_CATEGORY_BUSINESS_LOGIC   ErrorCategory = 7
	ErrorCategory_ERROR_CATEGORY_EXTERNAL_SERVICE ErrorCategory = 8
	ErrorCategory_ERROR_CATEGORY_INTERNAL         ErrorCategory = 9
)

// Enum value maps for ErrorCategory.
var (
	ErrorCategory_name = map[int32]string{
		0: "ERROR_CATEGORY_UNSPECIFIED",
		1: "ERROR_CATEGORY_VALIDATION",
		2: "ERROR_CATEGORY_AUTHENTICATION",
		3: "ERROR_CATEGORY_AUTHORIZATION",
		4: "ERROR_CATEGORY_NOT_FOUND",
		5: "ERROR_CATEGORY_CONFLICT",
		6: "ERROR_CATEGORY_RESOURCE",
		7: "ERROR_CATEGORY_BUSINESS_LOGIC",
		8: "ERROR_CATEGORY_EXTERNAL_SERVICE",
		9: "ERROR_CATEGORY_INTERNAL",
	}
	ErrorCategory_value = map[string]int32{
		"ERROR_CATEGORY_UNSPECIFIED":      0,
		"ERROR_CATEGORY_VALIDATION":       1,
		"ERROR_CATEGORY_AUTHENTICATION":   2,
		"ERROR_CATEGORY_AUTHORIZATION":    3,
		"ERROR_CATEGORY_NOT_FOUND":        4,
		"ERROR_CATEGORY_CONFLICT":         5,
		"ERROR_CATEGORY_RESOURCE":         6,
		"ERROR_CATEGORY_BUSINESS_LOGIC":   7,
		"ERROR_CATEGORY_EXTERNAL_SERVICE": 8,
		"ERROR_CATEGORY_INTERNAL":         9,
	}
)

func (x ErrorCategory) Enum() *ErrorCategory {
	p := new(ErrorCategory)
	*p = x
	return p
}

func (x ErrorCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_giftduels_errors_v1_errors_proto_enumTypes[0].Descriptor()
}

func (ErrorCategory) Type() protoreflect.EnumType {
	return &file_giftduels_errors_v1_errors_proto_enumTypes[0]
}

func (x ErrorCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCategory.Descriptor instead.
func (ErrorCategory) EnumDescriptor() ([]byte, []int) {
	return file_giftduels_errors_v1_errors_proto_rawDescGZIP(), []int{0}
}

type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0
	// Validation errors (100-199)
	ErrorCode_ERROR_CODE_VALIDATION_GENERAL ErrorCode = 100
	ErrorCode_ERROR_CODE_REQUIRED_FIELD     ErrorCode = 101
	ErrorCode_ERROR_CODE_INVALID_FORMAT     ErrorCode = 102
	ErrorCode_ERROR_CODE_VALUE_TOO_SMALL    ErrorCode = 103
	ErrorCode_ERROR_CODE_VALUE_TOO_LARGE    ErrorCode = 104
	ErrorCode_ERROR_CODE_INVALID_EMAIL      ErrorCode = 105
	ErrorCode_ERROR_CODE_INVALID_URL        ErrorCode = 106
	ErrorCode_ERROR_CODE_INVALID_UUID       ErrorCode = 107
	ErrorCode_ERROR_CODE_INVALID_ENUM_VALUE ErrorCode = 108
	ErrorCode_ERROR_CODE_FIELD_TOO_SHORT    ErrorCode = 109
	ErrorCode_ERROR_CODE_FIELD_TOO_LONG     ErrorCode = 110
	// Authentication errors (200-299)
	ErrorCode_ERROR_CODE_UNAUTHORIZED        ErrorCode = 200
	ErrorCode_ERROR_CODE_INVALID_TOKEN       ErrorCode = 201
	ErrorCode_ERROR_CODE_TOKEN_EXPIRED       ErrorCode = 202
	ErrorCode_ERROR_CODE_INVALID_CREDENTIALS ErrorCode = 203
	ErrorCode_ERROR_CODE_ACCOUNT_SUSPENDED   ErrorCode = 204
	// Authorization errors (300-399)
	ErrorCode_ERROR_CODE_FORBIDDEN                ErrorCode = 300
	ErrorCode_ERROR_CODE_INSUFFICIENT_PERMISSIONS ErrorCode = 301
	ErrorCode_ERROR_CODE_RESOURCE_ACCESS_DENIED   ErrorCode = 302
	ErrorCode_ERROR_CODE_GIFT_NOT_OWNED           ErrorCode = 303
	ErrorCode_ERROR_CODE_DUEL_ACCESS_DENIED       ErrorCode = 304
	// Not found errors (400-499)
	ErrorCode_ERROR_CODE_NOT_FOUND             ErrorCode = 400
	ErrorCode_ERROR_CODE_USER_NOT_FOUND        ErrorCode = 401
	ErrorCode_ERROR_CODE_GIFT_NOT_FOUND        ErrorCode = 402
	ErrorCode_ERROR_CODE_DUEL_NOT_FOUND        ErrorCode = 403
	ErrorCode_ERROR_CODE_TRANSACTION_NOT_FOUND ErrorCode = 404
	ErrorCode_ERROR_CODE_INVOICE_NOT_FOUND     ErrorCode = 405
	// Conflict errors (500-599)
	ErrorCode_ERROR_CODE_ALREADY_EXISTS           ErrorCode = 500
	ErrorCode_ERROR_CODE_USER_ALREADY_EXISTS      ErrorCode = 501
	ErrorCode_ERROR_CODE_DUEL_ALREADY_JOINED      ErrorCode = 502
	ErrorCode_ERROR_CODE_GIFT_ALREADY_STAKED      ErrorCode = 503
	ErrorCode_ERROR_CODE_INVALID_STATE_TRANSITION ErrorCode = 504
	// Resource errors (600-699)
	ErrorCode_ERROR_CODE_INSUFFICIENT_BALANCE ErrorCode = 600
	ErrorCode_ERROR_CODE_INSUFFICIENT_STARS   ErrorCode = 601
	ErrorCode_ERROR_CODE_INSUFFICIENT_TON     ErrorCode = 602
	ErrorCode_ERROR_CODE_GIFT_NOT_AVAILABLE   ErrorCode = 603
	ErrorCode_ERROR_CODE_DUEL_FULL            ErrorCode = 604
	ErrorCode_ERROR_CODE_RATE_LIMIT_EXCEEDED  ErrorCode = 605
	// Business logic errors (700-799)
	ErrorCode_ERROR_CODE_GAME_ALREADY_STARTED   ErrorCode = 700
	ErrorCode_ERROR_CODE_GAME_ALREADY_FINISHED  ErrorCode = 701
	ErrorCode_ERROR_CODE_INVALID_MOVE           ErrorCode = 702
	ErrorCode_ERROR_CODE_TIMEOUT_EXCEEDED       ErrorCode = 703
	ErrorCode_ERROR_CODE_MINIMUM_STAKE_NOT_MET  ErrorCode = 704
	ErrorCode_ERROR_CODE_MAXIMUM_STAKE_EXCEEDED ErrorCode = 705
	// External service errors (800-899)
	ErrorCode_ERROR_CODE_TELEGRAM_API_ERROR     ErrorCode = 800
	ErrorCode_ERROR_CODE_TON_BLOCKCHAIN_ERROR   ErrorCode = 801
	ErrorCode_ERROR_CODE_PAYMENT_PROVIDER_ERROR ErrorCode = 802
	ErrorCode_ERROR_CODE_EXTERNAL_TIMEOUT       ErrorCode = 803
	// Internal errors (900-999)
	ErrorCode_ERROR_CODE_INTERNAL            ErrorCode = 900
	ErrorCode_ERROR_CODE_DATABASE_ERROR      ErrorCode = 901
	ErrorCode_ERROR_CODE_SERVICE_UNAVAILABLE ErrorCode = 902
	ErrorCode_ERROR_CODE_CONFIGURATION_ERROR ErrorCode = 903
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "ERROR_CODE_UNSPECIFIED",
		100: "ERROR_CODE_VALIDATION_GENERAL",
		101: "ERROR_CODE_REQUIRED_FIELD",
		102: "ERROR_CODE_INVALID_FORMAT",
		103: "ERROR_CODE_VALUE_TOO_SMALL",
		104: "ERROR_CODE_VALUE_TOO_LARGE",
		105: "ERROR_CODE_INVALID_EMAIL",
		106: "ERROR_CODE_INVALID_URL",
		107: "ERROR_CODE_INVALID_UUID",
		108: "ERROR_CODE_INVALID_ENUM_VALUE",
		109: "ERROR_CODE_FIELD_TOO_SHORT",
		110: "ERROR_CODE_FIELD_TOO_LONG",
		200: "ERROR_CODE_UNAUTHORIZED",
		201: "ERROR_CODE_INVALID_TOKEN",
		202: "ERROR_CODE_TOKEN_EXPIRED",
		203: "ERROR_CODE_INVALID_CREDENTIALS",
		204: "ERROR_CODE_ACCOUNT_SUSPENDED",
		300: "ERROR_CODE_FORBIDDEN",
		301: "ERROR_CODE_INSUFFICIENT_PERMISSIONS",
		302: "ERROR_CODE_RESOURCE_ACCESS_DENIED",
		303: "ERROR_CODE_GIFT_NOT_OWNED",
		304: "ERROR_CODE_DUEL_ACCESS_DENIED",
		400: "ERROR_CODE_NOT_FOUND",
		401: "ERROR_CODE_USER_NOT_FOUND",
		402: "ERROR_CODE_GIFT_NOT_FOUND",
		403: "ERROR_CODE_DUEL_NOT_FOUND",
		404: "ERROR_CODE_TRANSACTION_NOT_FOUND",
		405: "ERROR_CODE_INVOICE_NOT_FOUND",
		500: "ERROR_CODE_ALREADY_EXISTS",
		501: "ERROR_CODE_USER_ALREADY_EXISTS",
		502: "ERROR_CODE_DUEL_ALREADY_JOINED",
		503: "ERROR_CODE_GIFT_ALREADY_STAKED",
		504: "ERROR_CODE_INVALID_STATE_TRANSITION",
		600: "ERROR_CODE_INSUFFICIENT_BALANCE",
		601: "ERROR_CODE_INSUFFICIENT_STARS",
		602: "ERROR_CODE_INSUFFICIENT_TON",
		603: "ERROR_CODE_GIFT_NOT_AVAILABLE",
		604: "ERROR_CODE_DUEL_FULL",
		605: "ERROR_CODE_RATE_LIMIT_EXCEEDED",
		700: "ERROR_CODE_GAME_ALREADY_STARTED",
		701: "ERROR_CODE_GAME_ALREADY_FINISHED",
		702: "ERROR_CODE_INVALID_MOVE",
		703: "ERROR_CODE_TIMEOUT_EXCEEDED",
		704: "ERROR_CODE_MINIMUM_STAKE_NOT_MET",
		705: "ERROR_CODE_MAXIMUM_STAKE_EXCEEDED",
		800: "ERROR_CODE_TELEGRAM_API_ERROR",
		801: "ERROR_CODE_TON_BLOCKCHAIN_ERROR",
		802: "ERROR_CODE_PAYMENT_PROVIDER_ERROR",
		803: "ERROR_CODE_EXTERNAL_TIMEOUT",
		900: "ERROR_CODE_INTERNAL",
		901: "ERROR_CODE_DATABASE_ERROR",
		902: "ERROR_CODE_SERVICE_UNAVAILABLE",
		903: "ERROR_CODE_CONFIGURATION_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":              0,
		"ERROR_CODE_VALIDATION_GENERAL":       100,
		"ERROR_CODE_REQUIRED_FIELD":           101,
		"ERROR_CODE_INVALID_FORMAT":           102,
		"ERROR_CODE_VALUE_TOO_SMALL":          103,
		"ERROR_CODE_VALUE_TOO_LARGE":          104,
		"ERROR_CODE_INVALID_EMAIL":            105,
		"ERROR_CODE_INVALID_URL":              106,
		"ERROR_CODE_INVALID_UUID":             107,
		"ERROR_CODE_INVALID_ENUM_VALUE":       108,
		"ERROR_CODE_FIELD_TOO_SHORT":          109,
		"ERROR_CODE_FIELD_TOO_LONG":           110,
		"ERROR_CODE_UNAUTHORIZED":             200,
		"ERROR_CODE_INVALID_TOKEN":            201,
		"ERROR_CODE_TOKEN_EXPIRED":            202,
		"ERROR_CODE_INVALID_CREDENTIALS":      203,
		"ERROR_CODE_ACCOUNT_SUSPENDED":        204,
		"ERROR_CODE_FORBIDDEN":                300,
		"ERROR_CODE_INSUFFICIENT_PERMISSIONS": 301,
		"ERROR_CODE_RESOURCE_ACCESS_DENIED":   302,
		"ERROR_CODE_GIFT_NOT_OWNED":           303,
		"ERROR_CODE_DUEL_ACCESS_DENIED":       304,
		"ERROR_CODE_NOT_FOUND":                400,
		"ERROR_CODE_USER_NOT_FOUND":           401,
		"ERROR_CODE_GIFT_NOT_FOUND":           402,
		"ERROR_CODE_DUEL_NOT_FOUND":           403,
		"ERROR_CODE_TRANSACTION_NOT_FOUND":    404,
		"ERROR_CODE_INVOICE_NOT_FOUND":        405,
		"ERROR_CODE_ALREADY_EXISTS":           500,
		"ERROR_CODE_USER_ALREADY_EXISTS":      501,
		"ERROR_CODE_DUEL_ALREADY_JOINED":      502,
		"ERROR_CODE_GIFT_ALREADY_STAKED":      503,
		"ERROR_CODE_INVALID_STATE_TRANSITION": 504,
		"ERROR_CODE_INSUFFICIENT_BALANCE":     600,
		"ERROR_CODE_INSUFFICIENT_STARS":       601,
		"ERROR_CODE_INSUFFICIENT_TON":         602,
		"ERROR_CODE_GIFT_NOT_AVAILABLE":       603,
		"ERROR_CODE_DUEL_FULL":                604,
		"ERROR_CODE_RATE_LIMIT_EXCEEDED":      605,
		"ERROR_CODE_GAME_ALREADY_STARTED":     700,
		"ERROR_CODE_GAME_ALREADY_FINISHED":    701,
		"ERROR_CODE_INVALID_MOVE":             702,
		"ERROR_CODE_TIMEOUT_EXCEEDED":         703,
		"ERROR_CODE_MINIMUM_STAKE_NOT_MET":    704,
		"ERROR_CODE_MAXIMUM_STAKE_EXCEEDED":   705,
		"ERROR_CODE_TELEGRAM_API_ERROR":       800,
		"ERROR_CODE_TON_BLOCKCHAIN_ERROR":     801,
		"ERROR_CODE_PAYMENT_PROVIDER_ERROR":   802,
		"ERROR_CODE_EXTERNAL_TIMEOUT":         803,
		"ERROR_CODE_INTERNAL":                 900,
		"ERROR_CODE_DATABASE_ERROR":           901,
		"ERROR_CODE_SERVICE_UNAVAILABLE":      902,
		"ERROR_CODE_CONFIGURATION_ERROR":      903,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_giftduels_errors_v1_errors_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_giftduels_errors_v1_errors_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_giftduels_errors_v1_errors_proto_rawDescGZIP(), []int{1}
}

type ErrorSeverity int32

const (
	ErrorSeverity_ERROR_SEVERITY_UNSPECIFIED ErrorSeverity = 0
	ErrorSeverity_ERROR_SEVERITY_LOW         ErrorSeverity = 1 // Warnings, non-critical issues
	ErrorSeverity_ERROR_SEVERITY_MEDIUM      ErrorSeverity = 2 // User errors, recoverable issues
	ErrorSeverity_ERROR_SEVERITY_HIGH        ErrorSeverity = 3 // System errors, need attention
	ErrorSeverity_ERROR_SEVERITY_CRITICAL    ErrorSeverity = 4 // Service outages, data corruption
)

// Enum value maps for ErrorSeverity.
var (
	ErrorSeverity_name = map[int32]string{
		0: "ERROR_SEVERITY_UNSPECIFIED",
		1: "ERROR_SEVERITY_LOW",
		2: "ERROR_SEVERITY_MEDIUM",
		3: "ERROR_SEVERITY_HIGH",
		4: "ERROR_SEVERITY_CRITICAL",
	}
	ErrorSeverity_value = map[string]int32{
		"ERROR_SEVERITY_UNSPECIFIED": 0,
		"ERROR_SEVERITY_LOW":         1,
		"ERROR_SEVERITY_MEDIUM":      2,
		"ERROR_SEVERITY_HIGH":        3,
		"ERROR_SEVERITY_CRITICAL":    4,
	}
)

func (x ErrorSeverity) Enum() *ErrorSeverity {
	p := new(ErrorSeverity)
	*p = x
	return p
}

func (x ErrorSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_giftduels_errors_v1_errors_proto_enumTypes[2].Descriptor()
}

func (ErrorSeverity) Type() protoreflect.EnumType {
	return &file_giftduels_errors_v1_errors_proto_enumTypes[2]
}

func (x ErrorSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorSeverity.Descriptor instead.
func (ErrorSeverity) EnumDescriptor() ([]byte, []int) {
	return file_giftduels_errors_v1_errors_proto_rawDescGZIP(), []int{2}
}

type ErrorDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=giftduels.errors.v1.ErrorCode" json:"code,omitempty"`
	Category      ErrorCategory          `protobuf:"varint,2,opt,name=category,proto3,enum=giftduels.errors.v1.ErrorCategory" json:"category,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                               // Human-readable error message
	Field         string                 `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`                                   // Field name for validation errors
	Context       *ErrorContext          `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`                               // Additional context
	NestedErrors  []*ErrorDetail         `protobuf:"bytes,6,rep,name=nested_errors,json=nestedErrors,proto3" json:"nested_errors,omitempty"` // For grouped errors
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetail) Reset() {
	*x = ErrorDetail{}
	mi := &file_giftduels_errors_v1_errors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetail) ProtoMessage() {}

func (x *ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_giftduels_errors_v1_errors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetail.ProtoReflect.Descriptor instead.
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return file_giftduels_errors_v1_errors_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorDetail) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *ErrorDetail) GetCategory() ErrorCategory {
	if x != nil {
		return x.Category
	}
	return ErrorCategory_ERROR_CATEGORY_UNSPECIFIED
}

func (x *ErrorDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorDetail) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ErrorDetail) GetContext() *ErrorContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ErrorDetail) GetNestedErrors() []*ErrorDetail {
	if x != nil {
		return x.NestedErrors
	}
	return nil
}

type ErrorContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      map[string]string      `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Key-value pairs with additional info
	TraceId       string                 `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                                                              // Request trace ID for debugging
	ResourceId    string                 `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`                                                     // ID of the resource that caused the error
	ResourceType  string                 `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`                                               // Type of resource (gift, duel, user, etc.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorContext) Reset() {
	*x = ErrorContext{}
	mi := &file_giftduels_errors_v1_errors_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorContext) ProtoMessage() {}

func (x *ErrorContext) ProtoReflect() protoreflect.Message {
	mi := &file_giftduels_errors_v1_errors_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorContext.ProtoReflect.Descriptor instead.
func (*ErrorContext) Descriptor() ([]byte, []int) {
	return file_giftduels_errors_v1_errors_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorContext) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ErrorContext) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ErrorContext) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ErrorContext) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

type ErrorResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	HttpStatus       int32                  `protobuf:"varint,1,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`                  // HTTP status code
	ErrorId          string                 `protobuf:"bytes,2,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`                            // Unique error identifier for tracking
	Details          []*ErrorDetail         `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`                                           // List of error details
	UserMessage      string                 `protobuf:"bytes,4,opt,name=user_message,json=userMessage,proto3" json:"user_message,omitempty"`                // User-friendly message
	DeveloperMessage string                 `protobuf:"bytes,5,opt,name=developer_message,json=developerMessage,proto3" json:"developer_message,omitempty"` // Technical message for developers
	DocumentationUrl string                 `protobuf:"bytes,6,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"` // Link to error documentation
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_giftduels_errors_v1_errors_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_giftduels_errors_v1_errors_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_giftduels_errors_v1_errors_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorResponse) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

func (x *ErrorResponse) GetErrorId() string {
	if x != nil {
		return x.ErrorId
	}
	return ""
}

func (x *ErrorResponse) GetDetails() []*ErrorDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ErrorResponse) GetUserMessage() string {
	if x != nil {
		return x.UserMessage
	}
	return ""
}

func (x *ErrorResponse) GetDeveloperMessage() string {
	if x != nil {
		return x.DeveloperMessage
	}
	return ""
}

func (x *ErrorResponse) GetDocumentationUrl() string {
	if x != nil {
		return x.DocumentationUrl
	}
	return ""
}

type ErrorReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorId       string                 `protobuf:"bytes,1,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`
	Severity      ErrorSeverity          `protobuf:"varint,2,opt,name=severity,proto3,enum=giftduels.errors.v1.ErrorSeverity" json:"severity,omitempty"`
	Details       []*ErrorDetail         `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	Context       *ErrorContext          `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp     string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // ISO 8601 timestamp
	UserId        string                 `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServiceName   string                 `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorReport) Reset() {
	*x = ErrorReport{}
	mi := &file_giftduels_errors_v1_errors_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorReport) ProtoMessage() {}

func (x *ErrorReport) ProtoReflect() protoreflect.Message {
	mi := &file_giftduels_errors_v1_errors_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorReport.ProtoReflect.Descriptor instead.
func (*ErrorReport) Descriptor() ([]byte, []int) {
	return file_giftduels_errors_v1_errors_proto_rawDescGZIP(), []int{3}
}

func (x *ErrorReport) GetErrorId() string {
	if x != nil {
		return x.ErrorId
	}
	return ""
}

func (x *ErrorReport) GetSeverity() ErrorSeverity {
	if x != nil {
		return x.Severity
	}
	return ErrorSeverity_ERROR_SEVERITY_UNSPECIFIED
}

func (x *ErrorReport) GetDetails() []*ErrorDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ErrorReport) GetContext() *ErrorContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ErrorReport) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ErrorReport) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ErrorReport) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

var File_giftduels_errors_v1_errors_proto protoreflect.FileDescriptor

const file_giftduels_errors_v1_errors_proto_rawDesc = "" +
	"\n" +
	" giftduels/errors/v1/errors.proto\x12\x13giftduels.errors.v1\"\xb5\x02\n" +
	"\vErrorDetail\x122\n" +
	"\x04code\x18\x01 \x01(\x0e2\x1e.giftduels.errors.v1.ErrorCodeR\x04code\x12>\n" +
	"\bcategory\x18\x02 \x01(\x0e2\".giftduels.errors.v1.ErrorCategoryR\bcategory\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x14\n" +
	"\x05field\x18\x04 \x01(\tR\x05field\x12;\n" +
	"\acontext\x18\x05 \x01(\v2!.giftduels.errors.v1.ErrorContextR\acontext\x12E\n" +
	"\rnested_errors\x18\x06 \x03(\v2 .giftduels.errors.v1.ErrorDetailR\fnestedErrors\"\xf9\x01\n" +
	"\fErrorContext\x12K\n" +
	"\bmetadata\x18\x01 \x03(\v2/.giftduels.errors.v1.ErrorContext.MetadataEntryR\bmetadata\x12\x19\n" +
	"\btrace_id\x18\x02 \x01(\tR\atraceId\x12\x1f\n" +
	"\vresource_id\x18\x03 \x01(\tR\n" +
	"resourceId\x12#\n" +
	"\rresource_type\x18\x04 \x01(\tR\fresourceType\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x84\x02\n" +
	"\rErrorResponse\x12\x1f\n" +
	"\vhttp_status\x18\x01 \x01(\x05R\n" +
	"httpStatus\x12\x19\n" +
	"\berror_id\x18\x02 \x01(\tR\aerrorId\x12:\n" +
	"\adetails\x18\x03 \x03(\v2 .giftduels.errors.v1.ErrorDetailR\adetails\x12!\n" +
	"\fuser_message\x18\x04 \x01(\tR\vuserMessage\x12+\n" +
	"\x11developer_message\x18\x05 \x01(\tR\x10developerMessage\x12+\n" +
	"\x11documentation_url\x18\x06 \x01(\tR\x10documentationUrl\"\xbb\x02\n" +
	"\vErrorReport\x12\x19\n" +
	"\berror_id\x18\x01 \x01(\tR\aerrorId\x12>\n" +
	"\bseverity\x18\x02 \x01(\x0e2\".giftduels.errors.v1.ErrorSeverityR\bseverity\x12:\n" +
	"\adetails\x18\x03 \x03(\v2 .giftduels.errors.v1.ErrorDetailR\adetails\x12;\n" +
	"\acontext\x18\x04 \x01(\v2!.giftduels.errors.v1.ErrorContextR\acontext\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\tR\ttimestamp\x12\x17\n" +
	"\auser_id\x18\x06 \x01(\tR\x06userId\x12!\n" +
	"\fservice_name\x18\a \x01(\tR\vserviceName*\xd0\x02\n" +
	"\rErrorCategory\x12\x1e\n" +
	"\x1aERROR_CATEGORY_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19ERROR_CATEGORY_VALIDATION\x10\x01\x12!\n" +
	"\x1dERROR_CATEGORY_AUTHENTICATION\x10\x02\x12 \n" +
	"\x1cERROR_CATEGORY_AUTHORIZATION\x10\x03\x12\x1c\n" +
	"\x18ERROR_CATEGORY_NOT_FOUND\x10\x04\x12\x1b\n" +
	"\x17ERROR_CATEGORY_CONFLICT\x10\x05\x12\x1b\n" +
	"\x17ERROR_CATEGORY_RESOURCE\x10\x06\x12!\n" +
	"\x1dERROR_CATEGORY_BUSINESS_LOGIC\x10\a\x12#\n" +
	"\x1fERROR_CATEGORY_EXTERNAL_SERVICE\x10\b\x12\x1b\n" +
	"\x17ERROR_CATEGORY_INTERNAL\x10\t*\x98\x0e\n" +
	"\tErrorCode\x12\x1a\n" +
	"\x16ERROR_CODE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dERROR_CODE_VALIDATION_GENERAL\x10d\x12\x1d\n" +
	"\x19ERROR_CODE_REQUIRED_FIELD\x10e\x12\x1d\n" +
	"\x19ERROR_CODE_INVALID_FORMAT\x10f\x12\x1e\n" +
	"\x1aERROR_CODE_VALUE_TOO_SMALL\x10g\x12\x1e\n" +
	"\x1aERROR_CODE_VALUE_TOO_LARGE\x10h\x12\x1c\n" +
	"\x18ERROR_CODE_INVALID_EMAIL\x10i\x12\x1a\n" +
	"\x16ERROR_CODE_INVALID_URL\x10j\x12\x1b\n" +
	"\x17ERROR_CODE_INVALID_UUID\x10k\x12!\n" +
	"\x1dERROR_CODE_INVALID_ENUM_VALUE\x10l\x12\x1e\n" +
	"\x1aERROR_CODE_FIELD_TOO_SHORT\x10m\x12\x1d\n" +
	"\x19ERROR_CODE_FIELD_TOO_LONG\x10n\x12\x1c\n" +
	"\x17ERROR_CODE_UNAUTHORIZED\x10\xc8\x01\x12\x1d\n" +
	"\x18ERROR_CODE_INVALID_TOKEN\x10\xc9\x01\x12\x1d\n" +
	"\x18ERROR_CODE_TOKEN_EXPIRED\x10\xca\x01\x12#\n" +
	"\x1eERROR_CODE_INVALID_CREDENTIALS\x10\xcb\x01\x12!\n" +
	"\x1cERROR_CODE_ACCOUNT_SUSPENDED\x10\xcc\x01\x12\x19\n" +
	"\x14ERROR_CODE_FORBIDDEN\x10\xac\x02\x12(\n" +
	"#ERROR_CODE_INSUFFICIENT_PERMISSIONS\x10\xad\x02\x12&\n" +
	"!ERROR_CODE_RESOURCE_ACCESS_DENIED\x10\xae\x02\x12\x1e\n" +
	"\x19ERROR_CODE_GIFT_NOT_OWNED\x10\xaf\x02\x12\"\n" +
	"\x1dERROR_CODE_DUEL_ACCESS_DENIED\x10\xb0\x02\x12\x19\n" +
	"\x14ERROR_CODE_NOT_FOUND\x10\x90\x03\x12\x1e\n" +
	"\x19ERROR_CODE_USER_NOT_FOUND\x10\x91\x03\x12\x1e\n" +
	"\x19ERROR_CODE_GIFT_NOT_FOUND\x10\x92\x03\x12\x1e\n" +
	"\x19ERROR_CODE_DUEL_NOT_FOUND\x10\x93\x03\x12%\n" +
	" ERROR_CODE_TRANSACTION_NOT_FOUND\x10\x94\x03\x12!\n" +
	"\x1cERROR_CODE_INVOICE_NOT_FOUND\x10\x95\x03\x12\x1e\n" +
	"\x19ERROR_CODE_ALREADY_EXISTS\x10\xf4\x03\x12#\n" +
	"\x1eERROR_CODE_USER_ALREADY_EXISTS\x10\xf5\x03\x12#\n" +
	"\x1eERROR_CODE_DUEL_ALREADY_JOINED\x10\xf6\x03\x12#\n" +
	"\x1eERROR_CODE_GIFT_ALREADY_STAKED\x10\xf7\x03\x12(\n" +
	"#ERROR_CODE_INVALID_STATE_TRANSITION\x10\xf8\x03\x12$\n" +
	"\x1fERROR_CODE_INSUFFICIENT_BALANCE\x10\xd8\x04\x12\"\n" +
	"\x1dERROR_CODE_INSUFFICIENT_STARS\x10\xd9\x04\x12 \n" +
	"\x1bERROR_CODE_INSUFFICIENT_TON\x10\xda\x04\x12\"\n" +
	"\x1dERROR_CODE_GIFT_NOT_AVAILABLE\x10\xdb\x04\x12\x19\n" +
	"\x14ERROR_CODE_DUEL_FULL\x10\xdc\x04\x12#\n" +
	"\x1eERROR_CODE_RATE_LIMIT_EXCEEDED\x10\xdd\x04\x12$\n" +
	"\x1fERROR_CODE_GAME_ALREADY_STARTED\x10\xbc\x05\x12%\n" +
	" ERROR_CODE_GAME_ALREADY_FINISHED\x10\xbd\x05\x12\x1c\n" +
	"\x17ERROR_CODE_INVALID_MOVE\x10\xbe\x05\x12 \n" +
	"\x1bERROR_CODE_TIMEOUT_EXCEEDED\x10\xbf\x05\x12%\n" +
	" ERROR_CODE_MINIMUM_STAKE_NOT_MET\x10\xc0\x05\x12&\n" +
	"!ERROR_CODE_MAXIMUM_STAKE_EXCEEDED\x10\xc1\x05\x12\"\n" +
	"\x1dERROR_CODE_TELEGRAM_API_ERROR\x10\xa0\x06\x12$\n" +
	"\x1fERROR_CODE_TON_BLOCKCHAIN_ERROR\x10\xa1\x06\x12&\n" +
	"!ERROR_CODE_PAYMENT_PROVIDER_ERROR\x10\xa2\x06\x12 \n" +
	"\x1bERROR_CODE_EXTERNAL_TIMEOUT\x10\xa3\x06\x12\x18\n" +
	"\x13ERROR_CODE_INTERNAL\x10\x84\a\x12\x1e\n" +
	"\x19ERROR_CODE_DATABASE_ERROR\x10\x85\a\x12#\n" +
	"\x1eERROR_CODE_SERVICE_UNAVAILABLE\x10\x86\a\x12#\n" +
	"\x1eERROR_CODE_CONFIGURATION_ERROR\x10\x87\a*\x98\x01\n" +
	"\rErrorSeverity\x12\x1e\n" +
	"\x1aERROR_SEVERITY_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12ERROR_SEVERITY_LOW\x10\x01\x12\x19\n" +
	"\x15ERROR_SEVERITY_MEDIUM\x10\x02\x12\x17\n" +
	"\x13ERROR_SEVERITY_HIGH\x10\x03\x12\x1b\n" +
	"\x17ERROR_SEVERITY_CRITICAL\x10\x04B\\ZZgithub.com/peterparker2005/giftduels/packages/protobuf-go/gen/giftduels/errors/v1;errorsv1b\x06proto3"

var (
	file_giftduels_errors_v1_errors_proto_rawDescOnce sync.Once
	file_giftduels_errors_v1_errors_proto_rawDescData []byte
)

func file_giftduels_errors_v1_errors_proto_rawDescGZIP() []byte {
	file_giftduels_errors_v1_errors_proto_rawDescOnce.Do(func() {
		file_giftduels_errors_v1_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_giftduels_errors_v1_errors_proto_rawDesc), len(file_giftduels_errors_v1_errors_proto_rawDesc)))
	})
	return file_giftduels_errors_v1_errors_proto_rawDescData
}

var file_giftduels_errors_v1_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_giftduels_errors_v1_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_giftduels_errors_v1_errors_proto_goTypes = []any{
	(ErrorCategory)(0),    // 0: giftduels.errors.v1.ErrorCategory
	(ErrorCode)(0),        // 1: giftduels.errors.v1.ErrorCode
	(ErrorSeverity)(0),    // 2: giftduels.errors.v1.ErrorSeverity
	(*ErrorDetail)(nil),   // 3: giftduels.errors.v1.ErrorDetail
	(*ErrorContext)(nil),  // 4: giftduels.errors.v1.ErrorContext
	(*ErrorResponse)(nil), // 5: giftduels.errors.v1.ErrorResponse
	(*ErrorReport)(nil),   // 6: giftduels.errors.v1.ErrorReport
	nil,                   // 7: giftduels.errors.v1.ErrorContext.MetadataEntry
}
var file_giftduels_errors_v1_errors_proto_depIdxs = []int32{
	1, // 0: giftduels.errors.v1.ErrorDetail.code:type_name -> giftduels.errors.v1.ErrorCode
	0, // 1: giftduels.errors.v1.ErrorDetail.category:type_name -> giftduels.errors.v1.ErrorCategory
	4, // 2: giftduels.errors.v1.ErrorDetail.context:type_name -> giftduels.errors.v1.ErrorContext
	3, // 3: giftduels.errors.v1.ErrorDetail.nested_errors:type_name -> giftduels.errors.v1.ErrorDetail
	7, // 4: giftduels.errors.v1.ErrorContext.metadata:type_name -> giftduels.errors.v1.ErrorContext.MetadataEntry
	3, // 5: giftduels.errors.v1.ErrorResponse.details:type_name -> giftduels.errors.v1.ErrorDetail
	2, // 6: giftduels.errors.v1.ErrorReport.severity:type_name -> giftduels.errors.v1.ErrorSeverity
	3, // 7: giftduels.errors.v1.ErrorReport.details:type_name -> giftduels.errors.v1.ErrorDetail
	4, // 8: giftduels.errors.v1.ErrorReport.context:type_name -> giftduels.errors.v1.ErrorContext
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_giftduels_errors_v1_errors_proto_init() }
func file_giftduels_errors_v1_errors_proto_init() {
	if File_giftduels_errors_v1_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_giftduels_errors_v1_errors_proto_rawDesc), len(file_giftduels_errors_v1_errors_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_giftduels_errors_v1_errors_proto_goTypes,
		DependencyIndexes: file_giftduels_errors_v1_errors_proto_depIdxs,
		EnumInfos:         file_giftduels_errors_v1_errors_proto_enumTypes,
		MessageInfos:      file_giftduels_errors_v1_errors_proto_msgTypes,
	}.Build()
	File_giftduels_errors_v1_errors_proto = out.File
	file_giftduels_errors_v1_errors_proto_goTypes = nil
	file_giftduels_errors_v1_errors_proto_depIdxs = nil
}
