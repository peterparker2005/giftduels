// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: giftduels/gift/v1/gift_private_service.proto

package giftv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GiftPrivateService_PrivateGetGift_FullMethodName     = "/giftduels.gift.v1.GiftPrivateService/PrivateGetGift"
	GiftPrivateService_GetUserGifts_FullMethodName       = "/giftduels.gift.v1.GiftPrivateService/GetUserGifts"
	GiftPrivateService_StakeGift_FullMethodName          = "/giftduels.gift.v1.GiftPrivateService/StakeGift"
	GiftPrivateService_TransferGiftToUser_FullMethodName = "/giftduels.gift.v1.GiftPrivateService/TransferGiftToUser"
)

// GiftPrivateServiceClient is the client API for GiftPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiftPrivateServiceClient interface {
	PrivateGetGift(ctx context.Context, in *PrivateGetGiftRequest, opts ...grpc.CallOption) (*PrivateGetGiftResponse, error)
	GetUserGifts(ctx context.Context, in *GetUserGiftsRequest, opts ...grpc.CallOption) (*GetUserGiftsResponse, error)
	StakeGift(ctx context.Context, in *StakeGiftRequest, opts ...grpc.CallOption) (*StakeGiftResponse, error)
	TransferGiftToUser(ctx context.Context, in *TransferGiftToUserRequest, opts ...grpc.CallOption) (*TransferGiftToUserResponse, error)
}

type giftPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGiftPrivateServiceClient(cc grpc.ClientConnInterface) GiftPrivateServiceClient {
	return &giftPrivateServiceClient{cc}
}

func (c *giftPrivateServiceClient) PrivateGetGift(ctx context.Context, in *PrivateGetGiftRequest, opts ...grpc.CallOption) (*PrivateGetGiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrivateGetGiftResponse)
	err := c.cc.Invoke(ctx, GiftPrivateService_PrivateGetGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftPrivateServiceClient) GetUserGifts(ctx context.Context, in *GetUserGiftsRequest, opts ...grpc.CallOption) (*GetUserGiftsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserGiftsResponse)
	err := c.cc.Invoke(ctx, GiftPrivateService_GetUserGifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftPrivateServiceClient) StakeGift(ctx context.Context, in *StakeGiftRequest, opts ...grpc.CallOption) (*StakeGiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StakeGiftResponse)
	err := c.cc.Invoke(ctx, GiftPrivateService_StakeGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftPrivateServiceClient) TransferGiftToUser(ctx context.Context, in *TransferGiftToUserRequest, opts ...grpc.CallOption) (*TransferGiftToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferGiftToUserResponse)
	err := c.cc.Invoke(ctx, GiftPrivateService_TransferGiftToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiftPrivateServiceServer is the server API for GiftPrivateService service.
// All implementations must embed UnimplementedGiftPrivateServiceServer
// for forward compatibility.
type GiftPrivateServiceServer interface {
	PrivateGetGift(context.Context, *PrivateGetGiftRequest) (*PrivateGetGiftResponse, error)
	GetUserGifts(context.Context, *GetUserGiftsRequest) (*GetUserGiftsResponse, error)
	StakeGift(context.Context, *StakeGiftRequest) (*StakeGiftResponse, error)
	TransferGiftToUser(context.Context, *TransferGiftToUserRequest) (*TransferGiftToUserResponse, error)
	mustEmbedUnimplementedGiftPrivateServiceServer()
}

// UnimplementedGiftPrivateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGiftPrivateServiceServer struct{}

func (UnimplementedGiftPrivateServiceServer) PrivateGetGift(context.Context, *PrivateGetGiftRequest) (*PrivateGetGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateGetGift not implemented")
}
func (UnimplementedGiftPrivateServiceServer) GetUserGifts(context.Context, *GetUserGiftsRequest) (*GetUserGiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGifts not implemented")
}
func (UnimplementedGiftPrivateServiceServer) StakeGift(context.Context, *StakeGiftRequest) (*StakeGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeGift not implemented")
}
func (UnimplementedGiftPrivateServiceServer) TransferGiftToUser(context.Context, *TransferGiftToUserRequest) (*TransferGiftToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferGiftToUser not implemented")
}
func (UnimplementedGiftPrivateServiceServer) mustEmbedUnimplementedGiftPrivateServiceServer() {}
func (UnimplementedGiftPrivateServiceServer) testEmbeddedByValue()                            {}

// UnsafeGiftPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiftPrivateServiceServer will
// result in compilation errors.
type UnsafeGiftPrivateServiceServer interface {
	mustEmbedUnimplementedGiftPrivateServiceServer()
}

func RegisterGiftPrivateServiceServer(s grpc.ServiceRegistrar, srv GiftPrivateServiceServer) {
	// If the following call pancis, it indicates UnimplementedGiftPrivateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GiftPrivateService_ServiceDesc, srv)
}

func _GiftPrivateService_PrivateGetGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateGetGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftPrivateServiceServer).PrivateGetGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiftPrivateService_PrivateGetGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftPrivateServiceServer).PrivateGetGift(ctx, req.(*PrivateGetGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftPrivateService_GetUserGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftPrivateServiceServer).GetUserGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiftPrivateService_GetUserGifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftPrivateServiceServer).GetUserGifts(ctx, req.(*GetUserGiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftPrivateService_StakeGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftPrivateServiceServer).StakeGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiftPrivateService_StakeGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftPrivateServiceServer).StakeGift(ctx, req.(*StakeGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftPrivateService_TransferGiftToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGiftToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftPrivateServiceServer).TransferGiftToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiftPrivateService_TransferGiftToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftPrivateServiceServer).TransferGiftToUser(ctx, req.(*TransferGiftToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GiftPrivateService_ServiceDesc is the grpc.ServiceDesc for GiftPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GiftPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "giftduels.gift.v1.GiftPrivateService",
	HandlerType: (*GiftPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrivateGetGift",
			Handler:    _GiftPrivateService_PrivateGetGift_Handler,
		},
		{
			MethodName: "GetUserGifts",
			Handler:    _GiftPrivateService_GetUserGifts_Handler,
		},
		{
			MethodName: "StakeGift",
			Handler:    _GiftPrivateService_StakeGift_Handler,
		},
		{
			MethodName: "TransferGiftToUser",
			Handler:    _GiftPrivateService_TransferGiftToUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "giftduels/gift/v1/gift_private_service.proto",
}
