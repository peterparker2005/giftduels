// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: giftduels/gift/v1/gift_public_service.proto

package giftv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GiftPublicService_GetGifts_FullMethodName           = "/giftduels.gift.v1.GiftPublicService/GetGifts"
	GiftPublicService_GetGift_FullMethodName            = "/giftduels.gift.v1.GiftPublicService/GetGift"
	GiftPublicService_WithdrawGift_FullMethodName       = "/giftduels.gift.v1.GiftPublicService/WithdrawGift"
	GiftPublicService_GetWithdrawOptions_FullMethodName = "/giftduels.gift.v1.GiftPublicService/GetWithdrawOptions"
)

// GiftPublicServiceClient is the client API for GiftPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiftPublicServiceClient interface {
	// Get user's gifts with filtering and pagination
	GetGifts(ctx context.Context, in *GetGiftsRequest, opts ...grpc.CallOption) (*GetGiftsResponse, error)
	// Get specific gift details
	GetGift(ctx context.Context, in *GetGiftRequest, opts ...grpc.CallOption) (*GetGiftResponse, error)
	// Initiate gift withdrawal process
	WithdrawGift(ctx context.Context, in *WithdrawGiftRequest, opts ...grpc.CallOption) (*WithdrawGiftResponse, error)
	// Get gift withdrawal options and pricing
	// TODO: move to payment service
	GetWithdrawOptions(ctx context.Context, in *GetWithdrawOptionsRequest, opts ...grpc.CallOption) (*GetWithdrawOptionsResponse, error)
}

type giftPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGiftPublicServiceClient(cc grpc.ClientConnInterface) GiftPublicServiceClient {
	return &giftPublicServiceClient{cc}
}

func (c *giftPublicServiceClient) GetGifts(ctx context.Context, in *GetGiftsRequest, opts ...grpc.CallOption) (*GetGiftsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGiftsResponse)
	err := c.cc.Invoke(ctx, GiftPublicService_GetGifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftPublicServiceClient) GetGift(ctx context.Context, in *GetGiftRequest, opts ...grpc.CallOption) (*GetGiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGiftResponse)
	err := c.cc.Invoke(ctx, GiftPublicService_GetGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftPublicServiceClient) WithdrawGift(ctx context.Context, in *WithdrawGiftRequest, opts ...grpc.CallOption) (*WithdrawGiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawGiftResponse)
	err := c.cc.Invoke(ctx, GiftPublicService_WithdrawGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftPublicServiceClient) GetWithdrawOptions(ctx context.Context, in *GetWithdrawOptionsRequest, opts ...grpc.CallOption) (*GetWithdrawOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawOptionsResponse)
	err := c.cc.Invoke(ctx, GiftPublicService_GetWithdrawOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiftPublicServiceServer is the server API for GiftPublicService service.
// All implementations must embed UnimplementedGiftPublicServiceServer
// for forward compatibility.
type GiftPublicServiceServer interface {
	// Get user's gifts with filtering and pagination
	GetGifts(context.Context, *GetGiftsRequest) (*GetGiftsResponse, error)
	// Get specific gift details
	GetGift(context.Context, *GetGiftRequest) (*GetGiftResponse, error)
	// Initiate gift withdrawal process
	WithdrawGift(context.Context, *WithdrawGiftRequest) (*WithdrawGiftResponse, error)
	// Get gift withdrawal options and pricing
	// TODO: move to payment service
	GetWithdrawOptions(context.Context, *GetWithdrawOptionsRequest) (*GetWithdrawOptionsResponse, error)
	mustEmbedUnimplementedGiftPublicServiceServer()
}

// UnimplementedGiftPublicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGiftPublicServiceServer struct{}

func (UnimplementedGiftPublicServiceServer) GetGifts(context.Context, *GetGiftsRequest) (*GetGiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGifts not implemented")
}
func (UnimplementedGiftPublicServiceServer) GetGift(context.Context, *GetGiftRequest) (*GetGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGift not implemented")
}
func (UnimplementedGiftPublicServiceServer) WithdrawGift(context.Context, *WithdrawGiftRequest) (*WithdrawGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawGift not implemented")
}
func (UnimplementedGiftPublicServiceServer) GetWithdrawOptions(context.Context, *GetWithdrawOptionsRequest) (*GetWithdrawOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawOptions not implemented")
}
func (UnimplementedGiftPublicServiceServer) mustEmbedUnimplementedGiftPublicServiceServer() {}
func (UnimplementedGiftPublicServiceServer) testEmbeddedByValue()                           {}

// UnsafeGiftPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiftPublicServiceServer will
// result in compilation errors.
type UnsafeGiftPublicServiceServer interface {
	mustEmbedUnimplementedGiftPublicServiceServer()
}

func RegisterGiftPublicServiceServer(s grpc.ServiceRegistrar, srv GiftPublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedGiftPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GiftPublicService_ServiceDesc, srv)
}

func _GiftPublicService_GetGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftPublicServiceServer).GetGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiftPublicService_GetGifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftPublicServiceServer).GetGifts(ctx, req.(*GetGiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftPublicService_GetGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftPublicServiceServer).GetGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiftPublicService_GetGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftPublicServiceServer).GetGift(ctx, req.(*GetGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftPublicService_WithdrawGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftPublicServiceServer).WithdrawGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiftPublicService_WithdrawGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftPublicServiceServer).WithdrawGift(ctx, req.(*WithdrawGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftPublicService_GetWithdrawOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftPublicServiceServer).GetWithdrawOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiftPublicService_GetWithdrawOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftPublicServiceServer).GetWithdrawOptions(ctx, req.(*GetWithdrawOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GiftPublicService_ServiceDesc is the grpc.ServiceDesc for GiftPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GiftPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "giftduels.gift.v1.GiftPublicService",
	HandlerType: (*GiftPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGifts",
			Handler:    _GiftPublicService_GetGifts_Handler,
		},
		{
			MethodName: "GetGift",
			Handler:    _GiftPublicService_GetGift_Handler,
		},
		{
			MethodName: "WithdrawGift",
			Handler:    _GiftPublicService_WithdrawGift_Handler,
		},
		{
			MethodName: "GetWithdrawOptions",
			Handler:    _GiftPublicService_GetWithdrawOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "giftduels/gift/v1/gift_public_service.proto",
}
