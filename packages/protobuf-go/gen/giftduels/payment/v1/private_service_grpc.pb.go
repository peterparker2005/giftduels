// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: giftduels/payment/v1/private_service.proto

package paymentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentPrivateService_SpendUserBalance_FullMethodName     = "/giftduels.payment.v1.PaymentPrivateService/SpendUserBalance"
	PaymentPrivateService_GetUserBalance_FullMethodName       = "/giftduels.payment.v1.PaymentPrivateService/GetUserBalance"
	PaymentPrivateService_PrepareTonWithdrawal_FullMethodName = "/giftduels.payment.v1.PaymentPrivateService/PrepareTonWithdrawal"
)

// PaymentPrivateServiceClient is the client API for PaymentPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentPrivateServiceClient interface {
	SpendUserBalance(ctx context.Context, in *SpendUserBalanceRequest, opts ...grpc.CallOption) (*SpendUserBalanceResponse, error)
	GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error)
	PrepareTonWithdrawal(ctx context.Context, in *PrepareTonWithdrawalRequest, opts ...grpc.CallOption) (*PrepareTonWithdrawalResponse, error)
}

type paymentPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentPrivateServiceClient(cc grpc.ClientConnInterface) PaymentPrivateServiceClient {
	return &paymentPrivateServiceClient{cc}
}

func (c *paymentPrivateServiceClient) SpendUserBalance(ctx context.Context, in *SpendUserBalanceRequest, opts ...grpc.CallOption) (*SpendUserBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpendUserBalanceResponse)
	err := c.cc.Invoke(ctx, PaymentPrivateService_SpendUserBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentPrivateServiceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBalanceResponse)
	err := c.cc.Invoke(ctx, PaymentPrivateService_GetUserBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentPrivateServiceClient) PrepareTonWithdrawal(ctx context.Context, in *PrepareTonWithdrawalRequest, opts ...grpc.CallOption) (*PrepareTonWithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareTonWithdrawalResponse)
	err := c.cc.Invoke(ctx, PaymentPrivateService_PrepareTonWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentPrivateServiceServer is the server API for PaymentPrivateService service.
// All implementations must embed UnimplementedPaymentPrivateServiceServer
// for forward compatibility.
type PaymentPrivateServiceServer interface {
	SpendUserBalance(context.Context, *SpendUserBalanceRequest) (*SpendUserBalanceResponse, error)
	GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error)
	PrepareTonWithdrawal(context.Context, *PrepareTonWithdrawalRequest) (*PrepareTonWithdrawalResponse, error)
	mustEmbedUnimplementedPaymentPrivateServiceServer()
}

// UnimplementedPaymentPrivateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentPrivateServiceServer struct{}

func (UnimplementedPaymentPrivateServiceServer) SpendUserBalance(context.Context, *SpendUserBalanceRequest) (*SpendUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendUserBalance not implemented")
}
func (UnimplementedPaymentPrivateServiceServer) GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedPaymentPrivateServiceServer) PrepareTonWithdrawal(context.Context, *PrepareTonWithdrawalRequest) (*PrepareTonWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTonWithdrawal not implemented")
}
func (UnimplementedPaymentPrivateServiceServer) mustEmbedUnimplementedPaymentPrivateServiceServer() {}
func (UnimplementedPaymentPrivateServiceServer) testEmbeddedByValue()                               {}

// UnsafePaymentPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentPrivateServiceServer will
// result in compilation errors.
type UnsafePaymentPrivateServiceServer interface {
	mustEmbedUnimplementedPaymentPrivateServiceServer()
}

func RegisterPaymentPrivateServiceServer(s grpc.ServiceRegistrar, srv PaymentPrivateServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentPrivateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentPrivateService_ServiceDesc, srv)
}

func _PaymentPrivateService_SpendUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPrivateServiceServer).SpendUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPrivateService_SpendUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPrivateServiceServer).SpendUserBalance(ctx, req.(*SpendUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentPrivateService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPrivateServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPrivateService_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPrivateServiceServer).GetUserBalance(ctx, req.(*GetUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentPrivateService_PrepareTonWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTonWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPrivateServiceServer).PrepareTonWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPrivateService_PrepareTonWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPrivateServiceServer).PrepareTonWithdrawal(ctx, req.(*PrepareTonWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentPrivateService_ServiceDesc is the grpc.ServiceDesc for PaymentPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "giftduels.payment.v1.PaymentPrivateService",
	HandlerType: (*PaymentPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpendUserBalance",
			Handler:    _PaymentPrivateService_SpendUserBalance_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _PaymentPrivateService_GetUserBalance_Handler,
		},
		{
			MethodName: "PrepareTonWithdrawal",
			Handler:    _PaymentPrivateService_PrepareTonWithdrawal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "giftduels/payment/v1/private_service.proto",
}
