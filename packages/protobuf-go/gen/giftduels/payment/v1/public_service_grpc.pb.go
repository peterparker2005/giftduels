// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: giftduels/payment/v1/public_service.proto

package paymentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentPublicService_DepositStars_FullMethodName                    = "/giftduels.payment.v1.PaymentPublicService/DepositStars"
	PaymentPublicService_CreateWithdrawCommissionReceipt_FullMethodName = "/giftduels.payment.v1.PaymentPublicService/CreateWithdrawCommissionReceipt"
	PaymentPublicService_GetBalance_FullMethodName                      = "/giftduels.payment.v1.PaymentPublicService/GetBalance"
	PaymentPublicService_CalculateWithdrawCommission_FullMethodName     = "/giftduels.payment.v1.PaymentPublicService/CalculateWithdrawCommission"
	PaymentPublicService_GetTransactionHistory_FullMethodName           = "/giftduels.payment.v1.PaymentPublicService/GetTransactionHistory"
	PaymentPublicService_GetWithdrawalStatus_FullMethodName             = "/giftduels.payment.v1.PaymentPublicService/GetWithdrawalStatus"
)

// PaymentPublicServiceClient is the client API for PaymentPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentPublicServiceClient interface {
	// Create a Stars invoice for purchasing Stars
	DepositStars(ctx context.Context, in *DepositStarsRequest, opts ...grpc.CallOption) (*DepositStarsResponse, error)
	CreateWithdrawCommissionReceipt(ctx context.Context, in *CreateWithdrawCommissionReceiptRequest, opts ...grpc.CallOption) (*CreateWithdrawCommissionReceiptResponse, error)
	// Get current user balance
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Calculate withdrawal commission
	CalculateWithdrawCommission(ctx context.Context, in *CalculateWithdrawCommissionRequest, opts ...grpc.CallOption) (*CalculateWithdrawCommissionResponse, error)
	// Get transaction history
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
	// Get withdrawal status
	GetWithdrawalStatus(ctx context.Context, in *GetWithdrawalStatusRequest, opts ...grpc.CallOption) (*GetWithdrawalStatusResponse, error)
}

type paymentPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentPublicServiceClient(cc grpc.ClientConnInterface) PaymentPublicServiceClient {
	return &paymentPublicServiceClient{cc}
}

func (c *paymentPublicServiceClient) DepositStars(ctx context.Context, in *DepositStarsRequest, opts ...grpc.CallOption) (*DepositStarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositStarsResponse)
	err := c.cc.Invoke(ctx, PaymentPublicService_DepositStars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentPublicServiceClient) CreateWithdrawCommissionReceipt(ctx context.Context, in *CreateWithdrawCommissionReceiptRequest, opts ...grpc.CallOption) (*CreateWithdrawCommissionReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWithdrawCommissionReceiptResponse)
	err := c.cc.Invoke(ctx, PaymentPublicService_CreateWithdrawCommissionReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentPublicServiceClient) GetBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, PaymentPublicService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentPublicServiceClient) CalculateWithdrawCommission(ctx context.Context, in *CalculateWithdrawCommissionRequest, opts ...grpc.CallOption) (*CalculateWithdrawCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateWithdrawCommissionResponse)
	err := c.cc.Invoke(ctx, PaymentPublicService_CalculateWithdrawCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentPublicServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, PaymentPublicService_GetTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentPublicServiceClient) GetWithdrawalStatus(ctx context.Context, in *GetWithdrawalStatusRequest, opts ...grpc.CallOption) (*GetWithdrawalStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawalStatusResponse)
	err := c.cc.Invoke(ctx, PaymentPublicService_GetWithdrawalStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentPublicServiceServer is the server API for PaymentPublicService service.
// All implementations must embed UnimplementedPaymentPublicServiceServer
// for forward compatibility.
type PaymentPublicServiceServer interface {
	// Create a Stars invoice for purchasing Stars
	DepositStars(context.Context, *DepositStarsRequest) (*DepositStarsResponse, error)
	CreateWithdrawCommissionReceipt(context.Context, *CreateWithdrawCommissionReceiptRequest) (*CreateWithdrawCommissionReceiptResponse, error)
	// Get current user balance
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetBalance(context.Context, *emptypb.Empty) (*GetBalanceResponse, error)
	// Calculate withdrawal commission
	CalculateWithdrawCommission(context.Context, *CalculateWithdrawCommissionRequest) (*CalculateWithdrawCommissionResponse, error)
	// Get transaction history
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	// Get withdrawal status
	GetWithdrawalStatus(context.Context, *GetWithdrawalStatusRequest) (*GetWithdrawalStatusResponse, error)
	mustEmbedUnimplementedPaymentPublicServiceServer()
}

// UnimplementedPaymentPublicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentPublicServiceServer struct{}

func (UnimplementedPaymentPublicServiceServer) DepositStars(context.Context, *DepositStarsRequest) (*DepositStarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositStars not implemented")
}
func (UnimplementedPaymentPublicServiceServer) CreateWithdrawCommissionReceipt(context.Context, *CreateWithdrawCommissionReceiptRequest) (*CreateWithdrawCommissionReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawCommissionReceipt not implemented")
}
func (UnimplementedPaymentPublicServiceServer) GetBalance(context.Context, *emptypb.Empty) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPaymentPublicServiceServer) CalculateWithdrawCommission(context.Context, *CalculateWithdrawCommissionRequest) (*CalculateWithdrawCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateWithdrawCommission not implemented")
}
func (UnimplementedPaymentPublicServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedPaymentPublicServiceServer) GetWithdrawalStatus(context.Context, *GetWithdrawalStatusRequest) (*GetWithdrawalStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalStatus not implemented")
}
func (UnimplementedPaymentPublicServiceServer) mustEmbedUnimplementedPaymentPublicServiceServer() {}
func (UnimplementedPaymentPublicServiceServer) testEmbeddedByValue()                              {}

// UnsafePaymentPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentPublicServiceServer will
// result in compilation errors.
type UnsafePaymentPublicServiceServer interface {
	mustEmbedUnimplementedPaymentPublicServiceServer()
}

func RegisterPaymentPublicServiceServer(s grpc.ServiceRegistrar, srv PaymentPublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentPublicService_ServiceDesc, srv)
}

func _PaymentPublicService_DepositStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPublicServiceServer).DepositStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPublicService_DepositStars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPublicServiceServer).DepositStars(ctx, req.(*DepositStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentPublicService_CreateWithdrawCommissionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawCommissionReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPublicServiceServer).CreateWithdrawCommissionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPublicService_CreateWithdrawCommissionReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPublicServiceServer).CreateWithdrawCommissionReceipt(ctx, req.(*CreateWithdrawCommissionReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentPublicService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPublicServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPublicService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPublicServiceServer).GetBalance(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentPublicService_CalculateWithdrawCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateWithdrawCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPublicServiceServer).CalculateWithdrawCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPublicService_CalculateWithdrawCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPublicServiceServer).CalculateWithdrawCommission(ctx, req.(*CalculateWithdrawCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentPublicService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPublicServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPublicService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPublicServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentPublicService_GetWithdrawalStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentPublicServiceServer).GetWithdrawalStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentPublicService_GetWithdrawalStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentPublicServiceServer).GetWithdrawalStatus(ctx, req.(*GetWithdrawalStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentPublicService_ServiceDesc is the grpc.ServiceDesc for PaymentPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "giftduels.payment.v1.PaymentPublicService",
	HandlerType: (*PaymentPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositStars",
			Handler:    _PaymentPublicService_DepositStars_Handler,
		},
		{
			MethodName: "CreateWithdrawCommissionReceipt",
			Handler:    _PaymentPublicService_CreateWithdrawCommissionReceipt_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _PaymentPublicService_GetBalance_Handler,
		},
		{
			MethodName: "CalculateWithdrawCommission",
			Handler:    _PaymentPublicService_CalculateWithdrawCommission_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _PaymentPublicService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "GetWithdrawalStatus",
			Handler:    _PaymentPublicService_GetWithdrawalStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "giftduels/payment/v1/public_service.proto",
}
