// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: giftduels/duel/v1/public_service.proto

package duelv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DuelPublicService_CreateDuel_FullMethodName   = "/giftduels.duel.v1.DuelPublicService/CreateDuel"
	DuelPublicService_JoinDuel_FullMethodName     = "/giftduels.duel.v1.DuelPublicService/JoinDuel"
	DuelPublicService_RollDice_FullMethodName     = "/giftduels.duel.v1.DuelPublicService/RollDice"
	DuelPublicService_GetDuel_FullMethodName      = "/giftduels.duel.v1.DuelPublicService/GetDuel"
	DuelPublicService_ListDuels_FullMethodName    = "/giftduels.duel.v1.DuelPublicService/ListDuels"
	DuelPublicService_CancelDuel_FullMethodName   = "/giftduels.duel.v1.DuelPublicService/CancelDuel"
	DuelPublicService_GetDuelStats_FullMethodName = "/giftduels.duel.v1.DuelPublicService/GetDuelStats"
)

// DuelPublicServiceClient is the client API for DuelPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DuelPublicServiceClient interface {
	// Create a new duel
	CreateDuel(ctx context.Context, in *CreateDuelRequest, opts ...grpc.CallOption) (*CreateDuelResponse, error)
	// Join an existing duel
	JoinDuel(ctx context.Context, in *JoinDuelRequest, opts ...grpc.CallOption) (*JoinDuelResponse, error)
	// Submit dice roll action
	RollDice(ctx context.Context, in *RollDiceRequest, opts ...grpc.CallOption) (*RollDiceResponse, error)
	// Get specific duel details
	GetDuel(ctx context.Context, in *GetDuelRequest, opts ...grpc.CallOption) (*GetDuelResponse, error)
	// List duels with filtering and pagination
	ListDuels(ctx context.Context, in *ListDuelsRequest, opts ...grpc.CallOption) (*ListDuelsResponse, error)
	// Cancel a duel (only creator can cancel)
	CancelDuel(ctx context.Context, in *CancelDuelRequest, opts ...grpc.CallOption) (*CancelDuelResponse, error)
	// Get duel statistics
	GetDuelStats(ctx context.Context, in *GetDuelStatsRequest, opts ...grpc.CallOption) (*GetDuelStatsResponse, error)
}

type duelPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDuelPublicServiceClient(cc grpc.ClientConnInterface) DuelPublicServiceClient {
	return &duelPublicServiceClient{cc}
}

func (c *duelPublicServiceClient) CreateDuel(ctx context.Context, in *CreateDuelRequest, opts ...grpc.CallOption) (*CreateDuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDuelResponse)
	err := c.cc.Invoke(ctx, DuelPublicService_CreateDuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duelPublicServiceClient) JoinDuel(ctx context.Context, in *JoinDuelRequest, opts ...grpc.CallOption) (*JoinDuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinDuelResponse)
	err := c.cc.Invoke(ctx, DuelPublicService_JoinDuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duelPublicServiceClient) RollDice(ctx context.Context, in *RollDiceRequest, opts ...grpc.CallOption) (*RollDiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollDiceResponse)
	err := c.cc.Invoke(ctx, DuelPublicService_RollDice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duelPublicServiceClient) GetDuel(ctx context.Context, in *GetDuelRequest, opts ...grpc.CallOption) (*GetDuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDuelResponse)
	err := c.cc.Invoke(ctx, DuelPublicService_GetDuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duelPublicServiceClient) ListDuels(ctx context.Context, in *ListDuelsRequest, opts ...grpc.CallOption) (*ListDuelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDuelsResponse)
	err := c.cc.Invoke(ctx, DuelPublicService_ListDuels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duelPublicServiceClient) CancelDuel(ctx context.Context, in *CancelDuelRequest, opts ...grpc.CallOption) (*CancelDuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelDuelResponse)
	err := c.cc.Invoke(ctx, DuelPublicService_CancelDuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duelPublicServiceClient) GetDuelStats(ctx context.Context, in *GetDuelStatsRequest, opts ...grpc.CallOption) (*GetDuelStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDuelStatsResponse)
	err := c.cc.Invoke(ctx, DuelPublicService_GetDuelStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DuelPublicServiceServer is the server API for DuelPublicService service.
// All implementations must embed UnimplementedDuelPublicServiceServer
// for forward compatibility.
type DuelPublicServiceServer interface {
	// Create a new duel
	CreateDuel(context.Context, *CreateDuelRequest) (*CreateDuelResponse, error)
	// Join an existing duel
	JoinDuel(context.Context, *JoinDuelRequest) (*JoinDuelResponse, error)
	// Submit dice roll action
	RollDice(context.Context, *RollDiceRequest) (*RollDiceResponse, error)
	// Get specific duel details
	GetDuel(context.Context, *GetDuelRequest) (*GetDuelResponse, error)
	// List duels with filtering and pagination
	ListDuels(context.Context, *ListDuelsRequest) (*ListDuelsResponse, error)
	// Cancel a duel (only creator can cancel)
	CancelDuel(context.Context, *CancelDuelRequest) (*CancelDuelResponse, error)
	// Get duel statistics
	GetDuelStats(context.Context, *GetDuelStatsRequest) (*GetDuelStatsResponse, error)
	mustEmbedUnimplementedDuelPublicServiceServer()
}

// UnimplementedDuelPublicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDuelPublicServiceServer struct{}

func (UnimplementedDuelPublicServiceServer) CreateDuel(context.Context, *CreateDuelRequest) (*CreateDuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDuel not implemented")
}
func (UnimplementedDuelPublicServiceServer) JoinDuel(context.Context, *JoinDuelRequest) (*JoinDuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDuel not implemented")
}
func (UnimplementedDuelPublicServiceServer) RollDice(context.Context, *RollDiceRequest) (*RollDiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollDice not implemented")
}
func (UnimplementedDuelPublicServiceServer) GetDuel(context.Context, *GetDuelRequest) (*GetDuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDuel not implemented")
}
func (UnimplementedDuelPublicServiceServer) ListDuels(context.Context, *ListDuelsRequest) (*ListDuelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDuels not implemented")
}
func (UnimplementedDuelPublicServiceServer) CancelDuel(context.Context, *CancelDuelRequest) (*CancelDuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDuel not implemented")
}
func (UnimplementedDuelPublicServiceServer) GetDuelStats(context.Context, *GetDuelStatsRequest) (*GetDuelStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDuelStats not implemented")
}
func (UnimplementedDuelPublicServiceServer) mustEmbedUnimplementedDuelPublicServiceServer() {}
func (UnimplementedDuelPublicServiceServer) testEmbeddedByValue()                           {}

// UnsafeDuelPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DuelPublicServiceServer will
// result in compilation errors.
type UnsafeDuelPublicServiceServer interface {
	mustEmbedUnimplementedDuelPublicServiceServer()
}

func RegisterDuelPublicServiceServer(s grpc.ServiceRegistrar, srv DuelPublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedDuelPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DuelPublicService_ServiceDesc, srv)
}

func _DuelPublicService_CreateDuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuelPublicServiceServer).CreateDuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuelPublicService_CreateDuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuelPublicServiceServer).CreateDuel(ctx, req.(*CreateDuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuelPublicService_JoinDuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinDuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuelPublicServiceServer).JoinDuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuelPublicService_JoinDuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuelPublicServiceServer).JoinDuel(ctx, req.(*JoinDuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuelPublicService_RollDice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollDiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuelPublicServiceServer).RollDice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuelPublicService_RollDice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuelPublicServiceServer).RollDice(ctx, req.(*RollDiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuelPublicService_GetDuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuelPublicServiceServer).GetDuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuelPublicService_GetDuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuelPublicServiceServer).GetDuel(ctx, req.(*GetDuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuelPublicService_ListDuels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDuelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuelPublicServiceServer).ListDuels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuelPublicService_ListDuels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuelPublicServiceServer).ListDuels(ctx, req.(*ListDuelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuelPublicService_CancelDuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuelPublicServiceServer).CancelDuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuelPublicService_CancelDuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuelPublicServiceServer).CancelDuel(ctx, req.(*CancelDuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuelPublicService_GetDuelStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDuelStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuelPublicServiceServer).GetDuelStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuelPublicService_GetDuelStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuelPublicServiceServer).GetDuelStats(ctx, req.(*GetDuelStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DuelPublicService_ServiceDesc is the grpc.ServiceDesc for DuelPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DuelPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "giftduels.duel.v1.DuelPublicService",
	HandlerType: (*DuelPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDuel",
			Handler:    _DuelPublicService_CreateDuel_Handler,
		},
		{
			MethodName: "JoinDuel",
			Handler:    _DuelPublicService_JoinDuel_Handler,
		},
		{
			MethodName: "RollDice",
			Handler:    _DuelPublicService_RollDice_Handler,
		},
		{
			MethodName: "GetDuel",
			Handler:    _DuelPublicService_GetDuel_Handler,
		},
		{
			MethodName: "ListDuels",
			Handler:    _DuelPublicService_ListDuels_Handler,
		},
		{
			MethodName: "CancelDuel",
			Handler:    _DuelPublicService_CancelDuel_Handler,
		},
		{
			MethodName: "GetDuelStats",
			Handler:    _DuelPublicService_GetDuelStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "giftduels/duel/v1/public_service.proto",
}
