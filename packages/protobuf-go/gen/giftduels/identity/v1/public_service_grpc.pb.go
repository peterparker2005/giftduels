// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: giftduels/identity/v1/public_service.proto

package identityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IdentityPublicService_Authorize_FullMethodName     = "/giftduels.identity.v1.IdentityPublicService/Authorize"
	IdentityPublicService_ValidateToken_FullMethodName = "/giftduels.identity.v1.IdentityPublicService/ValidateToken"
	IdentityPublicService_GetProfile_FullMethodName    = "/giftduels.identity.v1.IdentityPublicService/GetProfile"
)

// IdentityPublicServiceClient is the client API for IdentityPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityPublicServiceClient interface {
	// Authorize user via Telegram WebApp InitData
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	// Validate JWT token and get user info
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	// Get current user profile
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetProfileResponse, error)
}

type identityPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityPublicServiceClient(cc grpc.ClientConnInterface) IdentityPublicServiceClient {
	return &identityPublicServiceClient{cc}
}

func (c *identityPublicServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, IdentityPublicService_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityPublicServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, IdentityPublicService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityPublicServiceClient) GetProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, IdentityPublicService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityPublicServiceServer is the server API for IdentityPublicService service.
// All implementations must embed UnimplementedIdentityPublicServiceServer
// for forward compatibility.
type IdentityPublicServiceServer interface {
	// Authorize user via Telegram WebApp InitData
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	// Validate JWT token and get user info
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	// Get current user profile
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	GetProfile(context.Context, *emptypb.Empty) (*GetProfileResponse, error)
	mustEmbedUnimplementedIdentityPublicServiceServer()
}

// UnimplementedIdentityPublicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIdentityPublicServiceServer struct{}

func (UnimplementedIdentityPublicServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedIdentityPublicServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedIdentityPublicServiceServer) GetProfile(context.Context, *emptypb.Empty) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedIdentityPublicServiceServer) mustEmbedUnimplementedIdentityPublicServiceServer() {}
func (UnimplementedIdentityPublicServiceServer) testEmbeddedByValue()                               {}

// UnsafeIdentityPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityPublicServiceServer will
// result in compilation errors.
type UnsafeIdentityPublicServiceServer interface {
	mustEmbedUnimplementedIdentityPublicServiceServer()
}

func RegisterIdentityPublicServiceServer(s grpc.ServiceRegistrar, srv IdentityPublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedIdentityPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IdentityPublicService_ServiceDesc, srv)
}

func _IdentityPublicService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityPublicServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityPublicService_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityPublicServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityPublicService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityPublicServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityPublicService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityPublicServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityPublicService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityPublicServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityPublicService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityPublicServiceServer).GetProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityPublicService_ServiceDesc is the grpc.ServiceDesc for IdentityPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "giftduels.identity.v1.IdentityPublicService",
	HandlerType: (*IdentityPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _IdentityPublicService_Authorize_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _IdentityPublicService_ValidateToken_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _IdentityPublicService_GetProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "giftduels/identity/v1/public_service.proto",
}
