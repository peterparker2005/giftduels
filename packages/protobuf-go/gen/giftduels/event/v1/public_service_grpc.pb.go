// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: giftduels/event/v1/public_service.proto

package eventv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventPublicService_Socket_FullMethodName = "/giftduels.event.v1.EventPublicService/Socket"
)

// EventPublicServiceClient is the client API for EventPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Универсальный Event-сервис. Клиент открывает один bidi-stream,
// а сервер шлёт туда всё подряд: баланс, онлайн, игровые и т.д.
type EventPublicServiceClient interface {
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	Socket(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[emptypb.Empty, SocketResponse], error)
}

type eventPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventPublicServiceClient(cc grpc.ClientConnInterface) EventPublicServiceClient {
	return &eventPublicServiceClient{cc}
}

func (c *eventPublicServiceClient) Socket(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[emptypb.Empty, SocketResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventPublicService_ServiceDesc.Streams[0], EventPublicService_Socket_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, SocketResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventPublicService_SocketClient = grpc.BidiStreamingClient[emptypb.Empty, SocketResponse]

// EventPublicServiceServer is the server API for EventPublicService service.
// All implementations must embed UnimplementedEventPublicServiceServer
// for forward compatibility.
//
// Универсальный Event-сервис. Клиент открывает один bidi-stream,
// а сервер шлёт туда всё подряд: баланс, онлайн, игровые и т.д.
type EventPublicServiceServer interface {
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	Socket(grpc.BidiStreamingServer[emptypb.Empty, SocketResponse]) error
	mustEmbedUnimplementedEventPublicServiceServer()
}

// UnimplementedEventPublicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventPublicServiceServer struct{}

func (UnimplementedEventPublicServiceServer) Socket(grpc.BidiStreamingServer[emptypb.Empty, SocketResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Socket not implemented")
}
func (UnimplementedEventPublicServiceServer) mustEmbedUnimplementedEventPublicServiceServer() {}
func (UnimplementedEventPublicServiceServer) testEmbeddedByValue()                            {}

// UnsafeEventPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventPublicServiceServer will
// result in compilation errors.
type UnsafeEventPublicServiceServer interface {
	mustEmbedUnimplementedEventPublicServiceServer()
}

func RegisterEventPublicServiceServer(s grpc.ServiceRegistrar, srv EventPublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventPublicService_ServiceDesc, srv)
}

func _EventPublicService_Socket_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventPublicServiceServer).Socket(&grpc.GenericServerStream[emptypb.Empty, SocketResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventPublicService_SocketServer = grpc.BidiStreamingServer[emptypb.Empty, SocketResponse]

// EventPublicService_ServiceDesc is the grpc.ServiceDesc for EventPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "giftduels.event.v1.EventPublicService",
	HandlerType: (*EventPublicServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Socket",
			Handler:       _EventPublicService_Socket_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "giftduels/event/v1/public_service.proto",
}
