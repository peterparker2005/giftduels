syntax = "proto3";
package giftduels.duel.v1;

import "giftduels/duel/v1/duel.proto";
import "giftduels/shared/v1/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/peterparker2005/giftduels/packages/protobuf-go/gen/giftduels/duel/v1;duelv1";

service DuelPublicService {
  // Create a new duel
  rpc CreateDuel(CreateDuelRequest) returns (CreateDuelResponse) {}

  // Join an existing duel
  rpc JoinDuel(JoinDuelRequest) returns (JoinDuelResponse) {}

  // Submit dice roll action
  rpc RollDice(RollDiceRequest) returns (RollDiceResponse) {}

  // Get specific duel details
  rpc GetDuel(GetDuelRequest) returns (GetDuelResponse) {}

  // List duels with filtering and pagination
  rpc ListDuels(ListDuelsRequest) returns (ListDuelsResponse) {}

  // Cancel a duel (only creator can cancel)
  rpc CancelDuel(CancelDuelRequest) returns (CancelDuelResponse) {}

  // Get duel statistics
  rpc GetDuelStats(GetDuelStatsRequest) returns (GetDuelStatsResponse) {}
}

message DuelSort {
  // Поля сортировки
  oneof by {
    SortByCreatedAt created_at = 1;
    SortByTotalValue total_value = 2;
  }
  bool descending = 10; // по убыванию?
}

message SortByCreatedAt {
  // пустой — просто сортировать по created_at
}
message SortByTotalValue {
  // пустой — сортировать по общей ставке
}

message GetDuelsRequest {
  // Пейджинг
  uint32 page = 1;
  uint32 limit = 2;

  // Сортировка (по умолчанию, например, по времени создания)
  DuelSort sort = 3;

  // Группа всех фильтров
  DuelFilters filters = 4;
}

message GetDuelsResponse {
  repeated DuelListSummary duels = 1;
  shared.v1.PageResponse pagination = 2;
}

message DuelListSummary {
  string duel_id = 1;
  GameStatus status = 2;
  DuelParticipants participants = 3;
  shared.v1.TonAmount total_ton_value = 4;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp completed_at = 8;
}

// ===== CREATE DUEL =====
message CreateDuelRequest {
  repeated DuelStakeSource stakes = 1;
  DuelInviteParams params = 2;
}

message CreateDuelResponse {
  string duel_id = 1;
  google.protobuf.Timestamp created_at = 2;
  GameStatus status = 3;
  string invite_link = 4; // For invite-only duels
}

message DuelStakeSource {
  string gift_id = 1;
}

// ===== JOIN DUEL =====
message JoinDuelRequest {
  string duel_id = 1;
  repeated DuelStakeSource stakes = 2;
}

message JoinDuelResponse {
  google.protobuf.Timestamp joined_at = 1;
  GameStatus status = 2;
  DuelSummary duel_summary = 3;
}

// ===== ROLL DICE =====
message RollDiceRequest {
  string duel_id = 1;
  bool force_manual = 2; // Force manual roll even if auto-roll is enabled
}

message RollDiceResponse {
  DiceRoll roll = 1;
  GameStatus duel_status = 2;
  int32 current_round = 3;
  RoundResult round_result = 4;
}

message RoundResult {
  RoundStatus status = 1;
  int64 winner_user_id = 2;
  bool is_final_round = 3;
}

// ===== GET DUEL =====
message GetDuelRequest {
  string duel_id = 1;
}

message GetDuelResponse {
  DuelSummary duel = 1;
}

// ===== LIST DUELS =====
message ListDuelsRequest {
  DuelFilters filters = 1;
  DuelSortOptions sort = 2;
  shared.v1.PageRequest pagination = 3;
}

message ListDuelsResponse {
  repeated DuelListItem duels = 1;
  shared.v1.PageResponse pagination = 2;
  DuelStats stats = 3;
}

message DuelStats {
  uint32 total_active = 1;
  uint32 total_open = 2;
  uint32 total_finished_today = 3;
  shared.v1.TonAmount total_stakes_today = 4;
}

// ===== CANCEL DUEL =====
message CancelDuelRequest {
  string duel_id = 1;
  string reason = 2;
}

message CancelDuelResponse {
  shared.v1.SuccessResponse result = 1;
  google.protobuf.Timestamp cancelled_at = 2;
}

// ===== DUEL STATISTICS =====
message GetDuelStatsRequest {
  shared.v1.TimeRangeFilter time_range = 1;
}

message GetDuelStatsResponse {
  DuelStats stats = 1;
  repeated DuelStatsByStatus status_stats = 2;
}

message DuelStatsByStatus {
  giftduels.duel.v1.GameStatus status = 1;
  uint32 count = 2;
  shared.v1.TonAmount total_value = 3;
}
